<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
Resources\Fonts\Fonts.xaml
Themes\Converters.xaml
Themes\Styles\AutoSuggestBox.xaml
Themes\Styles\Button.xaml
Themes\Styles\Calendar.xaml
Themes\Styles\CheckBox.xaml
Themes\Styles\ComboBox.xaml
Themes\Styles\CommandBar.xaml
Themes\Styles\ContextMenu.xaml
Themes\Styles\DataGrid.xaml
Themes\Styles\DatePicker.xaml
Themes\Styles\Expander.xaml
Themes\Styles\GridSplitter.xaml
Themes\Styles\GroupBox.xaml
Themes\Styles\GroupItem.xaml
Themes\Styles\Hyperlink.xaml
Themes\Styles\InfoBar.xaml
Themes\Styles\Label.xaml
Themes\Styles\ListBox.xaml
Themes\Styles\ListView.xaml
Themes\Styles\Menu.xaml
Themes\Styles\MenuItem.xaml
Themes\Styles\NavigationBackButton.xaml
Themes\Styles\NavigationView.xaml
Themes\Styles\PasswordBox.xaml
Themes\Styles\PipsPager.xaml
Themes\Styles\Pivot.xaml
Themes\Styles\ProgressBar.xaml
Themes\Styles\RadioButton.xaml
Themes\Styles\RatingControl.xaml
Themes\Styles\RepeatButton.xaml
Themes\Styles\ResizeGrip.xaml
Themes\Styles\RichTextBox.xaml
Themes\Styles\ScrollBar.xaml
Themes\Styles\ScrollViewer.xaml
Themes\Styles\Slider.xaml
Themes\Styles\StatusBar.xaml
Themes\Styles\TabControl.xaml
Themes\Styles\TeachingTip.xaml
Themes\Styles\TextBox.xaml
Themes\Styles\TextStyles.xaml
Themes\Styles\TimePicker.xaml
Themes\Styles\ToggleButton.xaml
Themes\Styles\ToolBar.xaml
Themes\Styles\ToolTip.xaml
Themes\Styles\TreeView.xaml
Themes\Styles\Window.xaml
Themes\ThemeResources.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:converters="clr-namespace:iNKORE.UI.WPF.Modern.Common.Converters" xmlns:local="clr-namespace:iNKORE.UI.WPF.Modern.Controls" xmlns:primitives="clr-namespace:iNKORE.UI.WPF.Modern.Controls.Primitives" xmlns:chelper="clr-namespace:iNKORE.UI.WPF.Modern.Controls.Helpers" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:animation="clr-namespace:iNKORE.UI.WPF.Modern.Media.Animation" xmlns:vstates="clr-namespace:iNKORE.UI.WPF.Modern.Common" xmlns:root="clr-namespace:iNKORE.UI.WPF.Modern" xmlns:m="clr-namespace:iNKORE.UI.WPF.Modern.Markup">
  <FontFamily x:Key="SegoeUISymbol">Segoe UI Symbol</FontFamily>
  <FontFamily x:Key="SegoeMDL2Assets">Segoe MDL2 Assets</FontFamily>
  <FontFamily x:Key="SegoeFluentIcons">Segoe Fluent Icons</FontFamily>
  <FontFamily x:Key="FluentSystemIcons">pack://application:,,,/iNKORE.UI.WPF.Modern;component/Resources/Fonts/#FluentSystemIcons-Regular</FontFamily>
  <FontFamily x:Key="FluentSystemIconsFilled">pack://application:,,,/iNKORE.UI.WPF.Modern;component/Resources/Fonts/#FluentSystemIcons-Filled</FontFamily>
  <local:BrushTranslationConverter x:Key="BrushTranslationConverter" />
  <converters:CornerRadiusFilterConverter x:Key="cornerRadiusFilterConverter_Bottom" Filter="Bottom" />
  <converters:ThicknessFilterConverter x:Key="thicknessFilterConverter_ExcludeTop" Filter="ExcludeTop" />
  <converters:ColorToBrushConverter x:Key="ColorToSolidColorBrushConverter" />
  <converters:RoundMathConverter x:Key="RoundMathConverter" />
  <converters:RoundRadiusConverter x:Key="RoundRadiusConverter" />
  <converters:CornerRadiusFilterConverter x:Key="TopLeftCornerRadiusDoubleValueConverter" Filter="TopLeftValue" />
  <converters:CornerRadiusFilterConverter x:Key="BottomRightCornerRadiusDoubleValueConverter" Filter="BottomRightValue" />
  <converters:CornerRadiusFilterConverter x:Key="TopCornerRadiusFilterConverter" Filter="Top" />
  <converters:CornerRadiusFilterConverter x:Key="RightCornerRadiusFilterConverter" Filter="Right" />
  <converters:CornerRadiusFilterConverter x:Key="BottomCornerRadiusFilterConverter" Filter="Bottom" />
  <converters:CornerRadiusFilterConverter x:Key="LeftCornerRadiusFilterConverter" Filter="Left" />
  <converters:SharedSizeGroupConverter x:Key="SharedSizeGroupConverter" />
  <converters:OrConverter x:Key="OrConverter" />
  <converters:CornerRadiusFilterConverter x:Key="TopLeftCornerRadiusDoubleValueConverter8x" Filter="TopLeftValue" Scale="8" />
  <converters:CornerRadiusFilterConverter x:Key="BottomRightCornerRadiusDoubleValueConverter8x" Filter="BottomRightValue" Scale="8" />
  <converters:CornerRadiusFilterConverter x:Key="TopLeftCornerRadiusDoubleValueConverter2x" Filter="TopLeftValue" Scale="2" />
  <converters:CornerRadiusFilterConverter x:Key="BottomRightCornerRadiusDoubleValueConverter2x" Filter="BottomRightValue" Scale="2" />
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <converters:AddValueConverter x:Key="addValueConverter" />
  <Thickness x:Key="AutoSuggestBoxTopHeaderMargin">0,0,0,8</Thickness>
  <Thickness x:Key="AutoSuggestBoxInnerButtonMargin">1,3</Thickness>
  <Thickness x:Key="AutoSuggestBoxDeleteButtonMargin">0,4</Thickness>
  <Thickness x:Key="AutoSuggestBoxQueryButtonPadding">3,2</Thickness>
  <sys:Double x:Key="AutoSuggestBoxLeftButtonMargin">3</sys:Double>
  <sys:Double x:Key="AutoSuggestBoxRightButtonMargin">4</sys:Double>
  <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <local:TextContextMenu x:Key="TextControlContextMenu" x:Shared="False" />
  <Style x:Key="DefaultDataGridColumnHeadersPresenterStyle" TargetType="DataGridColumnHeadersPresenter">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridColumnHeadersPresenter">
          <Grid>
            <DataGridColumnHeader Name="PART_FillerColumnHeader" IsHitTestVisible="False" SeparatorVisibility="Collapsed" />
            <ItemsPresenter />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColumnHeaderGripperStyle" TargetType="Thumb">
    <Setter Property="Width" Value="8" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Cursor" Value="SizeWE" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RowHeaderGripperStyle" TargetType="Thumb">
    <Setter Property="Height" Value="8" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Cursor" Value="SizeNS" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultGroupItemStyle" TargetType="GroupItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GroupItem">
          <StackPanel>
            <local:ListViewHeaderItem x:Name="PART_Header" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            <ItemsPresenter x:Name="ItemsPresenter" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Grid.Column="0" Grid.Row="0"  -->
            <DockPanel Grid.RowSpan="2" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}">
              <!--  Column Headers Scroll Viewer  -->
              <local:ScrollViewerEx DockPanel.Dock="Top" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderStringFormat="{Binding Path=TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </local:ScrollViewerEx>
              <!--  Items Scroll Viewer  -->
              <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" KeyboardNavigation.DirectionalNavigation="Local" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </DockPanel>
            <!--  Horizontal Scroll Bar  -->
            <ScrollBar Name="PART_HorizontalScrollBar" Grid.Row="1" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{TemplateBinding HorizontalOffset}" />
            <!--  Vertical Scroll Bar  -->
            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{TemplateBinding VerticalOffset}" />
            <!--  Right Bottom Corner  -->
            <DockPanel Grid.Row="1" Grid.Column="1" Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}" LastChildFill="false">
              <Rectangle Width="1" DockPanel.Dock="Left" Fill="Transparent" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
              <Rectangle Height="1" DockPanel.Dock="Top" Fill="Transparent" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
            </DockPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
    <Setter Property="Canvas.Right" Value="-9" />
    <Setter Property="Width" Value="18" />
    <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Padding" Value="0,3,0,4" />
    <Setter Property="Background" Value="#FF000000" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Padding="{TemplateBinding Padding}" Background="Transparent">
            <Rectangle Width="1" HorizontalAlignment="Center" Fill="{TemplateBinding Background}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}" TargetType="ScrollViewer">
    <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="PanningMode" Value="VerticalOnly" />
  </Style>
  <DataTemplate x:Key="BackgroundImageDefaultTemplate">
    <Image Margin="-8,-8,0,0" />
  </DataTemplate>
  <DataTemplate x:Key="ForegroundImageDefaultTemplate">
    <Image Margin="-8,-8,0,0" />
  </DataTemplate>
  <DataTemplate x:Key="ForegroundPathDefaultTemplate">
    <local:FontIconFallback Margin="-8,-8,0,0" HorizontalContentAlignment="Left" VerticalContentAlignment="Top" Data="M 13.828125 12.246094 L 16.25 20 L 10 15.195313 L 3.75 20 L 6.171875 12.246094 L 0 7.5 L 7.65625 7.5 L 10 0 L 12.34375 7.5 L 20 7.5 Z" FontSize="32" />
  </DataTemplate>
  <Style x:Key="RepeatButtonTransparent" TargetType="RepeatButton">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Grid x:Name="Root" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ScrollViewerScrollBarlessTemplate" TargetType="ScrollViewer">
    <Grid Background="{TemplateBinding Background}">
      <ScrollContentPresenter x:Name="ScrollContentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding ContentTemplate}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="{x:Type ToolBarTray}" TargetType="ToolBarTray">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Margin" Value="0" />
  </Style>
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <m:StaticResource x:Key="ContentControlThemeFontFamily" ResourceKey="{x:Static SystemFonts.MessageFontFamilyKey}" />
  <m:StaticResource x:Key="PivotHeaderItemFontFamily" ResourceKey="{x:Static SystemFonts.MessageFontFamilyKey}" />
  <m:StaticResource x:Key="PivotTitleFontFamily" ResourceKey="{x:Static SystemFonts.MessageFontFamilyKey}" />
  <FontFamily x:Key="SymbolThemeFontFamily">Segoe Fluent Icons,Segoe MDL2 Assets,Segoe UI Symbol</FontFamily>
  <FontFamily x:Key="PhoneFontFamilySemiLight">Segoe WP SemiLight</FontFamily>
  <FontFamily x:Key="PhoneFontFamilyNormal">Segoe WP</FontFamily>
  <sys:Double x:Key="ContentControlFontSize">14</sys:Double>
  <sys:Double x:Key="GridViewItemMinWidth">44</sys:Double>
  <sys:Double x:Key="GridViewItemMinHeight">44</sys:Double>
  <sys:Double x:Key="ListViewItemMinWidth">88</sys:Double>
  <sys:Double x:Key="ListViewItemMinHeight">40</sys:Double>
  <sys:Double x:Key="NumberBoxPopupHorizonalOffset">-20</sys:Double>
  <sys:Double x:Key="NumberBoxPopupVerticalOffset">-16</sys:Double>
  <sys:Double x:Key="NumberBoxPopupShadowDepth">16</sys:Double>
  <sys:Double x:Key="RadioButtonsColumnSpacing">7</sys:Double>
  <sys:Double x:Key="RadioButtonsRowSpacing">3</sys:Double>
  <sys:Double x:Key="TextControlThemeMinHeight">32</sys:Double>
  <Thickness x:Key="NumberBoxSpinButtonBorderThickness">0,1,1,1</Thickness>
  <Thickness x:Key="NumberBoxIconMargin">10,0,0,0</Thickness>
  <Thickness x:Key="RadioButtonsTopHeaderMargin">0,0,0,4</Thickness>
  <Thickness x:Key="TextControlThemePadding">10,5,6,6</Thickness>
  <Thickness x:Key="ToggleSwitchTopHeaderMargin">0,0,0,0</Thickness>
  <sys:Double x:Key="ToggleSwitchPreContentMargin">6</sys:Double>
  <sys:Double x:Key="ToggleSwitchPostContentMargin">6</sys:Double>
  <sys:Double x:Key="ToggleSwitchThemeMinWidth">154</sys:Double>
  <Thickness x:Key="AppBarButtonContentViewboxMargin">12,16,0,10</Thickness>
  <Thickness x:Key="AppBarButtonContentViewboxCompactMargin">0,12,0,12</Thickness>
  <Thickness x:Key="AppBarButtonContentViewboxCollapsedMargin">0,16,0,2</Thickness>
  <Thickness x:Key="AppBarButtonOverflowTextTouchMargin">0,9,0,12</Thickness>
  <Thickness x:Key="AppBarButtonOverflowTextLabelPadding">0,5,0,8</Thickness>
  <Thickness x:Key="AppBarButtonTextLabelMargin">2,0,2,8</Thickness>
  <Thickness x:Key="AppBarButtonTextLabelOnRightMargin">8,16,12,10</Thickness>
  <Thickness x:Key="AppBarButtonInnerBorderMargin">2,6,2,6</Thickness>
  <Thickness x:Key="AppBarButtonInnerBorderCompactMargin">2,6,2,22</Thickness>
  <Thickness x:Key="AppBarButtonInnerBorderOverflowMargin">4,0,4,0</Thickness>
  <Thickness x:Key="AppBarToggleButtonBorderThemeThickness">1</Thickness>
  <Thickness x:Key="AppBarToggleButtonOverflowTextTouchMargin">0,9,0,12</Thickness>
  <Thickness x:Key="AppBarToggleButtonOverflowCheckTouchMargin">12,10,12,10</Thickness>
  <Thickness x:Key="AppBarToggleButtonOverflowCheckMargin">12,4,12,4</Thickness>
  <Thickness x:Key="AppBarToggleButtonTextLabelMargin">2,0,2,8</Thickness>
  <Thickness x:Key="AppBarToggleButtonTextLabelOnRightMargin">8,16,12,10</Thickness>
  <Thickness x:Key="AppBarToggleButtonOverflowTextLabelPadding">0,5,0,8</Thickness>
  <Thickness x:Key="AppBarSeparatorMargin">2,8,2,8</Thickness>
  <Thickness x:Key="AppBarOverflowSeparatorMargin">0,4,0,4</Thickness>
  <sys:Double x:Key="AppBarSeparatorWidth">1</sys:Double>
  <sys:Double x:Key="AppBarOverflowSeparatorHeight">1</sys:Double>
  <sys:Double x:Key="AppBarSeparatorCornerRadius">0.5</sys:Double>
  <Thickness x:Key="ButtonPadding">11,5,11,5</Thickness>
  <Thickness x:Key="CalendarDatePickerTopHeaderMargin">0,0,0,4</Thickness>
  <sys:Double x:Key="CheckBoxBorderThickness">1</sys:Double>
  <sys:Double x:Key="CheckBoxSize">20</sys:Double>
  <sys:Double x:Key="CheckBoxGlyphSize">12</sys:Double>
  <sys:Double x:Key="CheckBoxHeight">32</sys:Double>
  <sys:Double x:Key="CheckBoxMinWidth">120</sys:Double>
  <Thickness x:Key="CheckBoxPadding">8,7,0,0</Thickness>
  <Thickness x:Key="CheckBoxFocusVisualMargin">-7,-3,-7,-3</Thickness>
  <sys:String x:Key="CheckBoxCheckedGlyph"></sys:String>
  <sys:String x:Key="CheckBoxIndeterminateGlyph"></sys:String>
  <sys:Double x:Key="ComboBoxArrowThemeFontSize">21</sys:Double>
  <sys:Double x:Key="ComboBoxThemeMinWidth">64</sys:Double>
  <sys:Double x:Key="ComboBoxPopupThemeMinWidth">80</sys:Double>
  <sys:Double x:Key="ComboBoxPopupThemeTouchMinWidth">240</sys:Double>
  <sys:Double x:Key="ComboBoxItemPillHeight">16</sys:Double>
  <sys:Double x:Key="ComboBoxItemPillWidth">3</sys:Double>
  <sys:Double x:Key="ComboBoxItemPillMinScale">0.625</sys:Double>
  <sys:Double x:Key="ComboBoxMinHeight">32</sys:Double>
  <sys:Int32 x:Key="ComboBoxPopupMaxNumberOfItems">15</sys:Int32>
  <sys:Int32 x:Key="ComboBoxPopupMaxNumberOfItemsThatCanBeShownOnOneSide">7</sys:Int32>
  <KeyTime x:Key="ComboBoxItemScaleAnimationDuration">00:00:00.167</KeyTime>
  <Thickness x:Key="ComboBoxBorderThemeThickness">1</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderThickness">1</Thickness>
  <Thickness x:Key="ComboBoxHeaderThemeMargin">0,0,0,4</Thickness>
  <Thickness x:Key="ComboBoxPopupBorderThemeThickness">2</Thickness>
  <Thickness x:Key="ComboBoxItemThemePadding">11,5,11,7</Thickness>
  <Thickness x:Key="ComboBoxItemThemeTouchPadding">11,11,11,13</Thickness>
  <Thickness x:Key="ComboBoxItemThemeGameControllerPadding">11,11,11,13</Thickness>
  <Thickness x:Key="ComboBoxBackgroundBorderThicknessFocused">2</Thickness>
  <Thickness x:Key="ComboBoxDropdownContentMargin">0,4</Thickness>
  <Thickness x:Key="ComboBoxTopHeaderMargin">0,0,0,8</Thickness>
  <Thickness x:Key="ComboBoxPadding">12,5,0,7</Thickness>
  <Thickness x:Key="ComboBoxEditableTextPadding">11,5,38,6</Thickness>
  <CornerRadius x:Key="ComboBoxHiglightBorderCornerRadius">7</CornerRadius>
  <CornerRadius x:Key="ComboBoxDropDownButtonBackgroundCornerRadius">4</CornerRadius>
  <CornerRadius x:Key="ComboBoxItemCornerRadius">3</CornerRadius>
  <CornerRadius x:Key="ComboBoxItemPillCornerRadius">1.5</CornerRadius>
  <FontWeight x:Key="ComboBoxHeaderThemeFontWeight">Normal</FontWeight>
  <sys:Double x:Key="AppBarThemeMinHeight">64</sys:Double>
  <sys:Double x:Key="AppBarThemeCompactHeight">48</sys:Double>
  <Thickness x:Key="AppBarEllipsisButtonInnerBorderMargin">2,6,6,6</Thickness>
  <sys:Double x:Key="AppBarMoreButtonColumnMinWidth">6</sys:Double>
  <Thickness x:Key="CommandBarOverflowPresenterMargin">0,4,0,4</Thickness>
  <Thickness x:Key="CommandBarMoreButtonMargin">14,19,14,0</Thickness>
  <sys:Double x:Key="AppBarButtonContentHeight">16</sys:Double>
  <Thickness x:Key="CommandBarFlyoutAppBarEllipsisButtonInnerBorderMargin">2,2,6,2</Thickness>
  <sys:Double x:Key="DataGridRowMinHeight">32</sys:Double>
  <sys:Double x:Key="ExpanderMinHeight">48</sys:Double>
  <HorizontalAlignment x:Key="ExpanderHeaderHorizontalContentAlignment">Stretch</HorizontalAlignment>
  <VerticalAlignment x:Key="ExpanderHeaderVerticalContentAlignment">Center</VerticalAlignment>
  <Thickness x:Key="ExpanderHeaderHorizontalPadding">16,0,0,0</Thickness>
  <Thickness x:Key="ExpanderChevronHorizontalMargin">20,0,8,0</Thickness>
  <Thickness x:Key="ExpanderHeaderVerticalPadding">0,16,0,0</Thickness>
  <Thickness x:Key="ExpanderChevronVerticalMargin">0,20,0,8</Thickness>
  <sys:Double x:Key="ExpanderChevronButtonSize">32</sys:Double>
  <sys:Double x:Key="ExpanderChevronGlyphSize">12</sys:Double>
  <sys:String x:Key="ExpanderChevronUpGlyph"></sys:String>
  <sys:String x:Key="ExpanderChevronDownGlyph"></sys:String>
  <sys:String x:Key="ExpanderChevronChevronLeftGlyph"></sys:String>
  <sys:String x:Key="ExpanderChevronChevronRightGlyph"></sys:String>
  <Thickness x:Key="ExpanderContentPadding">16</Thickness>
  <Thickness x:Key="ExpanderContentDownBorderThickness">1,0,1,1</Thickness>
  <Thickness x:Key="ExpanderContentUpBorderThickness">1,1,1,0</Thickness>
  <Thickness x:Key="ExpanderContentLeftBorderThickness">1,1,0,1</Thickness>
  <Thickness x:Key="ExpanderContentRightBorderThickness">0,1,1,1</Thickness>
  <Thickness x:Key="GroupBoxPadding">0,0,0,15</Thickness>
  <sys:Double x:Key="GroupBoxHeaderFontSize">20</sys:Double>
  <Thickness x:Key="GroupBoxHeaderMargin">0,4,0,20</Thickness>
  <sys:Double x:Key="InfoBarTitleFontSize">14</sys:Double>
  <FontWeight x:Key="InfoBarTitleFontWeight">SemiBold</FontWeight>
  <sys:Double x:Key="InfoBarMessageFontSize">14</sys:Double>
  <FontWeight x:Key="InfoBarMessageFontWeight">Normal</FontWeight>
  <sys:Double x:Key="InfoBarMinHeight">48</sys:Double>
  <sys:Double x:Key="InfoBarCloseButtonSize">38</sys:Double>
  <sys:Double x:Key="InfoBarCloseButtonGlyphSize">16</sys:Double>
  <Thickness x:Key="InfoBarHyperlinkButtonMargin">-12,0,0,0</Thickness>
  <sys:String x:Key="InfoBarIconBackgroundGlyph"></sys:String>
  <sys:String x:Key="InfoBarInformationalIconGlyph"></sys:String>
  <sys:String x:Key="InfoBarErrorIconGlyph"></sys:String>
  <sys:String x:Key="InfoBarWarningIconGlyph"></sys:String>
  <sys:String x:Key="InfoBarSuccessIconGlyph"></sys:String>
  <sys:String x:Key="InfoBarCloseButtonGlyph"></sys:String>
  <Thickness x:Key="InfoBarContentRootPadding">16,0,0,0</Thickness>
  <Thickness x:Key="InfoBarIconMargin">0,16,14,16</Thickness>
  <sys:Double x:Key="InfoBarIconFontSize">16</sys:Double>
  <Thickness x:Key="InfoBarPanelMargin">0,0,16,0</Thickness>
  <Thickness x:Key="InfoBarPanelHorizontalOrientationPadding">0,0,0,0</Thickness>
  <Thickness x:Key="InfoBarPanelVerticalOrientationPadding">0,14,0,18</Thickness>
  <Thickness x:Key="InfoBarTitleHorizontalOrientationMargin">0,16,0,0</Thickness>
  <Thickness x:Key="InfoBarTitleVerticalOrientationMargin">0,16,0,0</Thickness>
  <Thickness x:Key="InfoBarMessageHorizontalOrientationMargin">12,16,0,0</Thickness>
  <Thickness x:Key="InfoBarMessageVerticalOrientationMargin">0,4,0,0</Thickness>
  <Thickness x:Key="InfoBarActionHorizontalOrientationMargin">16,8,0,0</Thickness>
  <Thickness x:Key="InfoBarActionVerticalOrientationMargin">0,12,0,0</Thickness>
  <Thickness x:Key="ListBoxItemPadding">12,9,12,12</Thickness>
  <sys:Double x:Key="GridViewColumnHeaderMinHeight">33</sys:Double>
  <sys:Double x:Key="GridViewItemContainerMinHeight">32</sys:Double>
  <sys:Double x:Key="ListViewItemPillMinScale">0.625</sys:Double>
  <KeyTime x:Key="ListViewItemScaleAnimationDuration">00:00:00.167</KeyTime>
  <sys:Double x:Key="MenuBarHeight">40</sys:Double>
  <Thickness x:Key="MenuBarItemButtonPadding">10,4,10,4</Thickness>
  <Thickness x:Key="MenuBarItemMargin">4,4,4,4</Thickness>
  <sys:Double x:Key="MenuFlyoutSeparatorHeight">1</sys:Double>
  <Thickness x:Key="MenuFlyoutPresenterThemePadding">0,2,0,2</Thickness>
  <sys:Double x:Key="MenuFlyoutThemeMinHeight">32</sys:Double>
  <Thickness x:Key="MenuFlyoutItemChevronMargin">24,0,0,-1</Thickness>
  <Thickness x:Key="MenuFlyoutSeparatorThemePadding">-4,1,-4,1</Thickness>
  <Thickness x:Key="MenuFlyoutItemMargin">4,2,4,2</Thickness>
  <Thickness x:Key="MenuFlyoutItemThemePadding">11,6,11,7</Thickness>
  <Thickness x:Key="MenuFlyoutItemThemePaddingNarrow">11,4,11,5</Thickness>
  <Thickness x:Key="MenuFlyoutScrollerMargin">0,4,0,4</Thickness>
  <Thickness x:Key="MenuFlyoutItemRevealBorderThickness">1</Thickness>
  <Thickness x:Key="ToggleMenuFlyoutItemRevealBorderThickness">1</Thickness>
  <Thickness x:Key="MenuFlyoutSubItemRevealBorderThickness">1</Thickness>
  <sys:Double x:Key="NavigationBackButtonWidth">40</sys:Double>
  <sys:Double x:Key="NavigationBackButtonHeight">36</sys:Double>
  <Thickness x:Key="NavigationViewAutoSuggestBoxMargin">16,0</Thickness>
  <Thickness x:Key="TopNavigationViewAutoSuggestBoxMargin">4,0</Thickness>
  <sys:Double x:Key="PaneToggleButtonHeight">36</sys:Double>
  <sys:Double x:Key="PaneToggleButtonWidth">40</sys:Double>
  <sys:Double x:Key="NavigationViewCompactPaneLength">48</sys:Double>
  <sys:Double x:Key="NavigationViewIconBoxWidth">40</sys:Double>
  <sys:Double x:Key="NavigationViewTopPaneHeight">48</sys:Double>
  <sys:Double x:Key="NavigationViewAutoSuggestAreaHeight">40</sys:Double>
  <sys:Double x:Key="TopNavigationViewPaneCustomContentMinWidth">48</sys:Double>
  <sys:Double x:Key="TopNavigationViewOverflowButtonWidth">40</sys:Double>
  <sys:Double x:Key="TopNavigationViewOverflowButtonHeight">40</sys:Double>
  <sys:Double x:Key="TopNavigationViewSettingsButtonWidth">40</sys:Double>
  <sys:Double x:Key="TopNavigationViewSettingsButtonHeight">40</sys:Double>
  <sys:Double x:Key="NavigationViewItemOnLeftMinHeight">36</sys:Double>
  <sys:Double x:Key="NavigationViewPaneHeaderRowMinHeight">40</sys:Double>
  <sys:Double x:Key="NavigationViewItemOnLeftIconBoxHeight">16</sys:Double>
  <sys:Double x:Key="NavigationViewSelectionIndicatorWidth">3</sys:Double>
  <sys:Double x:Key="NavigationViewSelectionIndicatorHeight">16</sys:Double>
  <sys:Double x:Key="NavigationViewSelectionIndicatorRadius">2</sys:Double>
  <sys:Double x:Key="NavigationViewItemSeparatorHeight">1</sys:Double>
  <sys:Double x:Key="TopNavigationViewItemSeparatorWidth">1</sys:Double>
  <Thickness x:Key="NavigationViewToggleBorderThickness">0</Thickness>
  <Thickness x:Key="NavigationViewItemBorderThickness">1</Thickness>
  <Thickness x:Key="NavigationViewItemOnLeftIconBoxMargin">0</Thickness>
  <Thickness x:Key="NavigationViewItemButtonMargin">4,2</Thickness>
  <Thickness x:Key="NavigationViewItemButtonNormalMargin">0,2</Thickness>
  <Thickness x:Key="NavigationViewItemInnerHeaderMargin">16,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemInnerHeaderMargin">12,0</Thickness>
  <Thickness x:Key="NavigationViewMinimalHeaderMargin">-24,44,0,0</Thickness>
  <Thickness x:Key="NavigationViewButtonHolderGridMargin">0,4</Thickness>
  <Thickness x:Key="NavigationViewPaneContentGridMargin">-1,3</Thickness>
  <Thickness x:Key="NavigationViewContentGridBorderThickness">1,1,0,0</Thickness>
  <Thickness x:Key="NavigationViewMinimalContentGridBorderThickness">0,1,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewContentGridBorderThickness">0,1,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewTopNavGridMargin">4,0</Thickness>
  <Thickness x:Key="NavigationViewBorderThickness">1</Thickness>
  <Thickness x:Key="NavigationViewHeaderMargin">56,44,0,0</Thickness>
  <Thickness x:Key="NavigationViewContentPresenterMargin">0</Thickness>
  <Thickness x:Key="NavigationViewContentMargin">0</Thickness>
  <Thickness x:Key="NavigationViewMinimalContentMargin">0</Thickness>
  <Thickness x:Key="TopNavigationViewContentMargin">0</Thickness>
  <Thickness x:Key="NavigationViewPaneTitlePresenterMargin">8,4,0,0</Thickness>
  <Thickness x:Key="NavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="TopNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="NavigationViewItemSeparatorMargin">0,3,0,4</Thickness>
  <Thickness x:Key="NavigationViewCompactItemSeparatorMargin">0,3,0,4</Thickness>
  <Thickness x:Key="TopNavigationViewItemSeparatorMargin">3,0,4,0</Thickness>
  <Thickness x:Key="TopNavigationViewOverflowButtonMargin">0</Thickness>
  <Thickness x:Key="NavigationViewItemContentPresenterMargin">4,-1,8,-1</Thickness>
  <Thickness x:Key="NavigationViewCompactItemContentPresenterMargin">0,0,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemContentPresenterMargin">8,-1,12,-1</Thickness>
  <Thickness x:Key="TopNavigationViewItemContentOnlyContentPresenterMargin">12,0</Thickness>
  <Thickness x:Key="NavigationViewItemExpandChevronMargin">0,0,-14,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemExpandChevronMargin">-16,0,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemIconOnlyExpandChevronMargin">0,0,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemContentOnlyExpandChevronMargin">-12,0,0,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemOnOverflowContentPresenterMargin">12,0,20,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemOnOverflowNoIconContentPresenterMargin">16,0,20,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemOnOverflowExpandChevronMargin">-4,0,-8,0</Thickness>
  <Thickness x:Key="TopNavigationViewItemOnOverflowExpandChevronPadding">12,0,12,0</Thickness>
  <CornerRadius x:Key="NavigationViewContentGridCornerRadius">8,0,0,0</CornerRadius>
  <CornerRadius x:Key="TopNavigationViewContentGridCornerRadius">0</CornerRadius>
  <CornerRadius x:Key="NavigationViewMinimalContentGridCornerRadius">0</CornerRadius>
  <Thickness x:Key="TopNavigationViewOverflowMenuPadding">0,8</Thickness>
  <Thickness x:Key="NavigationViewItemChildrenMenuFlyoutPadding">0,8</Thickness>
  <sys:Double x:Key="NavigationViewItemExpandedGlyphFontSize">12</sys:Double>
  <sys:String x:Key="NavigationViewItemExpandedGlyph"></sys:String>
  <sys:Double x:Key="PaneToggleButtonSize">40</sys:Double>
  <Thickness x:Key="PasswordBoxTopHeaderMargin">0,0,0,8</Thickness>
  <sys:Double x:Key="PasswordBoxIconFontSize">12</sys:Double>
  <sys:Double x:Key="PipsPagerButtonWidth">20</sys:Double>
  <sys:Double x:Key="PipsPagerButtonHeight">12</sys:Double>
  <sys:Double x:Key="PipsPagerHorizontalOrientationButtonWidth">12</sys:Double>
  <sys:Double x:Key="PipsPagerHorizontalOrientationButtonHeight">20</sys:Double>
  <sys:Double x:Key="PipsPagerVerticalOrientationButtonWidth">20</sys:Double>
  <sys:Double x:Key="PipsPagerVerticalOrientationButtonHeight">12</sys:Double>
  <Thickness x:Key="PipsPagerButtonBorderThickness">1</Thickness>
  <Thickness x:Key="PipsPagerNavigationButtonBorderThickness">1</Thickness>
  <sys:String x:Key="PipsPagerSelectedGlyph"></sys:String>
  <sys:String x:Key="PipsPagerNormalGlyph"></sys:String>
  <sys:String x:Key="PipsPagerPreviousPageButtonGlyph"></sys:String>
  <sys:String x:Key="PipsPagerNextPageButtonGlyph"></sys:String>
  <sys:Double x:Key="PipsPagerNavigationButtonHeight">20</sys:Double>
  <sys:Double x:Key="PipsPagerNavigationButtonWidth">20</sys:Double>
  <sys:Double x:Key="PipsPagerNavigationButtonFontSize">15</sys:Double>
  <sys:Double x:Key="PipsPagerSelectedGlyphFontSize">6</sys:Double>
  <sys:Double x:Key="PipsPagerNormalGlyphFontSize">4</sys:Double>
  <sys:Double x:Key="PipsPagerNavigationButtonScalePressed">0.875</sys:Double>
  <sys:Double x:Key="PivotHeaderItemSelectedPipeMinScale">0.625</sys:Double>
  <KeyTime x:Key="PivotHeaderItemScaleAnimationDuration">00:00:00.167</KeyTime>
  <CornerRadius x:Key="PivotHeaderItemSelectedPipeCornerRadius">1.5</CornerRadius>
  <sys:Double x:Key="ProgressBarMinHeight">3</sys:Double>
  <sys:Double x:Key="ProgressBarTrackHeight">1</sys:Double>
  <CornerRadius x:Key="ProgressBarCornerRadius">1.5</CornerRadius>
  <CornerRadius x:Key="ProgressBarTrackCornerRadius">0.5</CornerRadius>
  <sys:Double x:Key="ProgressRingStrokeThickness">3</sys:Double>
  <sys:Double x:Key="RadioButtonCheckGlyphSize">12</sys:Double>
  <sys:Double x:Key="RadioButtonCheckGlyphPointerOverSize">14</sys:Double>
  <sys:Double x:Key="RadioButtonCheckGlyphPressedOverSize">10</sys:Double>
  <Thickness x:Key="RichEditBoxTopHeaderMargin">0,0,0,8</Thickness>
  <KeyTime x:Key="ScrollBarExpandDuration">00:00:00.167</KeyTime>
  <Duration x:Key="ScrollBarOpacityChangeDuration">00:00:00.083</Duration>
  <KeyTime x:Key="ScrollBarColorChangeDuration">00:00:00.083</KeyTime>
  <KeyTime x:Key="ScrollBarContractDuration">00:00:00.167</KeyTime>
  <sys:Double x:Key="ScrollBarThumbOffset">2</sys:Double>
  <KeyTime x:Key="ScrollBarContractDelay">00:00:02</KeyTime>
  <KeyTime x:Key="ScrollBarContractFinalKeyframe">00:00:02.1</KeyTime>
  <sys:Double x:Key="ScrollBarSize">12</sys:Double>
  <sys:Double x:Key="ScrollBarVerticalThumbMinHeight">30</sys:Double>
  <sys:Double x:Key="ScrollBarVerticalThumbMinWidth">8</sys:Double>
  <sys:Double x:Key="ScrollBarHorizontalThumbMinWidth">30</sys:Double>
  <sys:Double x:Key="ScrollBarHorizontalThumbMinHeight">8</sys:Double>
  <sys:Double x:Key="ScrollBarThumbStrokeThickness">6</sys:Double>
  <sys:Double x:Key="ScrollBarButtonArrowIconFontSize">15</sys:Double>
  <sys:Double x:Key="ScrollBarButtonArrowScalePressed">0.875</sys:Double>
  <sys:TimeSpan x:Key="ScrollBarExpandBeginTime">00:00:00.40</sys:TimeSpan>
  <sys:TimeSpan x:Key="ScrollBarContractBeginTime">00:00:00.50</sys:TimeSpan>
  <CornerRadius x:Key="ScrollBarCornerRadius">3</CornerRadius>
  <Thickness x:Key="ScrollBarHorizontalDecreaseMargin">0,0,0,0</Thickness>
  <Thickness x:Key="ScrollBarHorizontalIncreaseMargin">0,0,0,0</Thickness>
  <Thickness x:Key="ScrollBarVerticalDecreaseMargin">0,4,0,0</Thickness>
  <Thickness x:Key="ScrollBarVerticalIncreaseMargin">0,0,0,4</Thickness>
  <sys:Double x:Key="SmallScrollThumbScale">0.125</sys:Double>
  <sys:Double x:Key="SmallScrollThumbOffset">-2</sys:Double>
  <Duration x:Key="ScrollViewerSeparatorExpandDuration">00:00:00.1</Duration>
  <KeyTime x:Key="ScrollViewerSeparatorContractDelay">00:00:02</KeyTime>
  <Duration x:Key="ScrollViewerSeparatorContractDuration">00:00:00.1</Duration>
  <KeyTime x:Key="ScrollViewerSeparatorContractKeyTime">00:00:00.1</KeyTime>
  <KeyTime x:Key="ScrollViewerSeparatorContractFinalKeyframe">00:00:02.1</KeyTime>
  <sys:Boolean x:Key="AutoHideScrollBars">False</sys:Boolean>
  <Thickness x:Key="SliderTopHeaderMargin">0,0,0,4</Thickness>
  <CornerRadius x:Key="SliderTrackCornerRadius">2</CornerRadius>
  <CornerRadius x:Key="SliderThumbCornerRadius">10</CornerRadius>
  <sys:Double x:Key="SliderPreContentMargin">14</sys:Double>
  <sys:Double x:Key="SliderPostContentMargin">14</sys:Double>
  <sys:Double x:Key="SliderHorizontalHeight">32</sys:Double>
  <sys:Double x:Key="SliderVerticalWidth">32</sys:Double>
  <sys:Double x:Key="SliderHorizontalThumbWidth">18</sys:Double>
  <sys:Double x:Key="SliderHorizontalThumbHeight">18</sys:Double>
  <sys:Double x:Key="SliderVerticalThumbWidth">18</sys:Double>
  <sys:Double x:Key="SliderVerticalThumbHeight">18</sys:Double>
  <sys:Double x:Key="SliderInnerThumbWidth">12</sys:Double>
  <sys:Double x:Key="SliderInnerThumbHeight">12</sys:Double>
  <Thickness x:Key="StatusBarSeparatorMargin">2,6,2,6</Thickness>
  <sys:Double x:Key="StatusBarSeparatorWidth">1</sys:Double>
  <sys:Double x:Key="StatusBarSeparatorCornerRadius">0.5</sys:Double>
  <Thickness x:Key="TabViewHeaderPadding">0,8,0,0</Thickness>
  <Thickness x:Key="TabViewItemHeaderPadding">8,3,4,3</Thickness>
  <Thickness x:Key="TabViewSelectedItemHeaderPadding">9,3,5,4</Thickness>
  <sys:Double x:Key="TabViewItemMinHeight">32</sys:Double>
  <sys:Double x:Key="TabViewItemMaxWidth">240</sys:Double>
  <sys:Double x:Key="TabViewItemMinWidth">100</sys:Double>
  <sys:Double x:Key="TabViewItemHeaderFontSize">12</sys:Double>
  <sys:Double x:Key="TabViewItemHeaderIconSize">16</sys:Double>
  <Thickness x:Key="TabViewItemHeaderIconMargin">0,0,10,0</Thickness>
  <sys:Double x:Key="TabViewItemHeaderCloseButtonHeight">24</sys:Double>
  <sys:Double x:Key="TabViewItemHeaderCloseButtonWidth">32</sys:Double>
  <sys:Double x:Key="TabViewItemHeaderCloseButtonSize">16</sys:Double>
  <sys:Double x:Key="TabViewItemHeaderCloseFontSize">12</sys:Double>
  <Thickness x:Key="TabViewItemHeaderCloseMargin">4,0,0,0</Thickness>
  <sys:Double x:Key="TabViewItemScrollButtonWidth">32</sys:Double>
  <sys:Double x:Key="TabViewItemScrollButtonHeight">24</sys:Double>
  <sys:Double x:Key="TabViewItemScrollButonFontSize">15</sys:Double>
  <Thickness x:Key="TabViewItemScrollButtonPadding">7,3,7,3</Thickness>
  <Thickness x:Key="TabViewItemLeftScrollButtonContainerPadding">8,0,3,3</Thickness>
  <Thickness x:Key="TabViewItemRightScrollButtonContainerPadding">3,0,8,3</Thickness>
  <sys:Double x:Key="TabViewItemAddButtonWidth">32</sys:Double>
  <sys:Double x:Key="TabViewItemAddButtonHeight">24</sys:Double>
  <sys:Double x:Key="TabViewItemAddButtonFontSize">12</sys:Double>
  <Thickness x:Key="TabViewItemAddButtonContainerPadding">3,0,0,3</Thickness>
  <sys:Double x:Key="TabViewShadowDepth">16</sys:Double>
  <Thickness x:Key="TabViewItemSeparatorMargin">0,8,0,8</Thickness>
  <Thickness x:Key="TabViewItemBorderThickness">1</Thickness>
  <Thickness x:Key="TabViewSelectedItemBorderThickness">1,1,1,0</Thickness>
  <Thickness x:Key="TabViewSelectedItemHeaderMargin">-1,0,-1,0</Thickness>
  <Thickness x:Key="TabViewTopHeaderPadding">8,8,0,0</Thickness>
  <Thickness x:Key="TabViewBottomHeaderPadding">8,0,0,8</Thickness>
  <Thickness x:Key="TabViewLeftHeaderPadding">8,8,0,8</Thickness>
  <Thickness x:Key="TabViewRightHeaderPadding">0,8,8,8</Thickness>
  <sys:Double x:Key="TeachingTipMinHeight">40</sys:Double>
  <sys:Double x:Key="TeachingTipMaxHeight">520</sys:Double>
  <sys:Double x:Key="TeachingTipMinWidth">320</sys:Double>
  <sys:Double x:Key="TeachingTipMaxWidth">336</sys:Double>
  <Thickness x:Key="TeachingTipButtonPanelMargin">0,12,0,0</Thickness>
  <Thickness x:Key="TeachingTipRightButtonMargin">4,12,0,0</Thickness>
  <Thickness x:Key="TeachingTipLeftButtonMargin">0,12,4,0</Thickness>
  <Thickness x:Key="TeachingTipMainContentPresentMargin">0,12,0,0</Thickness>
  <Thickness x:Key="TeachingTipMainContentAbsentMargin">0,0,0,0</Thickness>
  <Thickness x:Key="TeachingTipTitleStackPanelMarginWithHeaderCloseButton">0,0,28,0</Thickness>
  <Thickness x:Key="TeachingTipTitleStackPanelMarginWithFooterCloseButton">0,0,0,0</Thickness>
  <Thickness x:Key="TeachingTipIconPresenterMarginWithIcon">0,0,12,0</Thickness>
  <Thickness x:Key="TeachingTipIconPresenterMarginWithoutIcon">0,0,0,0</Thickness>
  <Thickness x:Key="TeachingTipContentBorderThicknessTop">1,1,1,0</Thickness>
  <Thickness x:Key="TeachingTipContentBorderThicknessBottom">1,0,1,1</Thickness>
  <Thickness x:Key="TeachingTipContentBorderThicknessLeft">1,1,0,1</Thickness>
  <Thickness x:Key="TeachingTipContentBorderThicknessRight">0,1,1,1</Thickness>
  <Thickness x:Key="TeachingTipContentBorderThicknessUntargeted">1,1,1,1</Thickness>
  <Thickness x:Key="TeachingTipTailPolygonMarginTop">0,-1,0,0</Thickness>
  <Thickness x:Key="TeachingTipTailPolygonMarginBottom">0,0,0,-1</Thickness>
  <Thickness x:Key="TeachingTipTailPolygonMarginLeft">-1,0,0,0</Thickness>
  <Thickness x:Key="TeachingTipTailPolygonMarginRight">0,0,-1,0</Thickness>
  <GridLength x:Key="TeachingTipTailShortSideLength">8</GridLength>
  <GridLength x:Key="TeachingTipTailMargin">10</GridLength>
  <sys:Double x:Key="TeachingTipAlternateCloseButtonSize">40</sys:Double>
  <sys:Double x:Key="TeachingTipAlternateCloseButtonGlyphSize">16</sys:Double>
  <Thickness x:Key="TeachingTipContentMargin">12</Thickness>
  <sys:Double x:Key="TeachingTipTopHighlightHeight">1</sys:Double>
  <sys:Double x:Key="TeachingTipBorderThickness">1</sys:Double>
  <Thickness x:Key="TeachingTipTopHighlightOffsetForBorder">0,1,0,0</Thickness>
  <sys:Double x:Key="CaptionTextBlockFontSize">12</sys:Double>
  <sys:Double x:Key="BodyTextBlockFontSize">14</sys:Double>
  <sys:Double x:Key="SubtitleTextBlockFontSize">20</sys:Double>
  <sys:Double x:Key="TitleTextBlockFontSize">28</sys:Double>
  <sys:Double x:Key="TitleLargeTextBlockFontSize">40</sys:Double>
  <sys:Double x:Key="DisplayTextBlockFontSize">68</sys:Double>
  <Thickness x:Key="TextBoxTopHeaderMargin">0,0,0,8</Thickness>
  <Thickness x:Key="TextBoxInnerButtonMargin">0,4,4,4</Thickness>
  <sys:Double x:Key="TextBoxIconFontSize">12</sys:Double>
  <Thickness x:Key="TimePickerTopHeaderMargin">0,0,0,4</Thickness>
  <sys:Double x:Key="TimePickerFlyoutPresenterHighlightHeight">40</sys:Double>
  <sys:Double x:Key="TimePickerFlyoutPresenterAcceptDismissHostGridHeight">41</sys:Double>
  <sys:Double x:Key="TimePickerThemeMinWidth">242</sys:Double>
  <sys:Double x:Key="TimePickerThemeMaxWidth">456</sys:Double>
  <sys:Double x:Key="TimePickerFlyoutPresenterItemHeight">40</sys:Double>
  <Thickness x:Key="TimePickerFlyoutPresenterItemPadding">0,3,0,6</Thickness>
  <Thickness x:Key="TimePickerHostPadding">0,3,0,6</Thickness>
  <sys:Double x:Key="ToolBarThemeCompactHeight">48</sys:Double>
  <sys:Double x:Key="ToolBarExpandButtonThemeWidth">48</sys:Double>
  <Thickness x:Key="ToolBarEllipsisButtonInnerBorderMargin">2,6,6,6</Thickness>
  <sys:Double x:Key="ToolBarMoreButtonColumnMinWidth">6</sys:Double>
  <Thickness x:Key="ToolBarMoreButtonMargin">14,19,14,0</Thickness>
  <Thickness x:Key="ToolBarSeparatorMargin">2,8,2,8</Thickness>
  <sys:Double x:Key="ToolBarSeparatorWidth">1</sys:Double>
  <sys:Double x:Key="ToolBarSeparatorCornerRadius">0.5</sys:Double>
  <Thickness x:Key="ToolBarButtonTextLabelMargin">8,16,12,10</Thickness>
  <Thickness x:Key="ToolBarButtonInnerBorderMargin">2,6,2,6</Thickness>
  <Thickness x:Key="ToolTipBorderPadding">9,6,9,6</Thickness>
  <sys:Double x:Key="ToolTipMaxWidth">320</sys:Double>
  <sys:Double x:Key="TreeViewItemPillMinScale">0.625</sys:Double>
  <KeyTime x:Key="TreeViewItemScaleAnimationDuration">00:00:00.167</KeyTime>
  <primitives:BindingProxy x:Key="ComboBoxItemPillCornerRadiusProxy" Value="{DynamicResource ComboBoxItemPillCornerRadius}" />
  <primitives:BindingProxy x:Key="ListViewItemSelectionIndicatorCornerRadiusProxy" Value="{DynamicResource ListViewItemSelectionIndicatorCornerRadius}" />
  <primitives:BindingProxy x:Key="ProgressBarTrackCornerRadiusProxy" Value="{DynamicResource ProgressBarTrackCornerRadius}" />
  <Style x:Key="DefaultButtonStyle" TargetType="Button">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource ButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource ControlElevationBorderBrushElevationColor}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <local:ElevationBorder x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </local:ElevationBorder>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button" />
  <Style x:Key="AccentButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{DynamicResource AccentButtonForeground}" />
    <Setter Property="Background" Value="{DynamicResource AccentButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrush}" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource ControlStrokeColorOnAccentSecondary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <local:ElevationBorder x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </local:ElevationBorder>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource AccentButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource AccentButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushPressed}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource AccentButtonBackgroundDisabled}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultCalendarItemStyle" TargetType="CalendarItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarItem">
          <ControlTemplate.Resources>
            <Style x:Key="WeekDayNameStyle" TargetType="TextBlock">
              <Setter Property="FontSize" Value="12" />
              <Setter Property="HorizontalAlignment" Value="Center" />
              <Setter Property="VerticalAlignment" Value="Center" />
              <Setter Property="FontWeight" Value="{DynamicResource CalendarViewWeekDayFontWeight}" />
              <Setter Property="Margin" Value="{DynamicResource CalendarViewWeekDayMargin}" />
              <Setter Property="Padding" Value="{DynamicResource CalendarViewWeekDayPadding}" />
            </Style>
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <TextBlock Style="{StaticResource WeekDayNameStyle}" Text="{Binding}" />
            </DataTemplate>
          </ControlTemplate.Resources>
          <Grid x:Name="PART_Root" SnapsToDevicePixels="True">
            <Grid.Resources>
              <Style x:Key="HeaderNavigationButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
                <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
                <Setter Property="FontSize" Value="{DynamicResource CalendarViewHeaderNavigationButtonFontSize}" />
                <Setter Property="FontWeight" Value="{DynamicResource CalendarViewHeaderNavigationFontWeight}" />
                <Setter Property="Foreground" Value="{DynamicResource CalendarViewHeaderNavigationButtonForeground}" />
                <Setter Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackground}" />
                <Setter Property="Margin" Value="{DynamicResource CalendarViewHeaderNavigationButtonMargin}" />
                <Setter Property="Padding" Value="{DynamicResource CalendarViewHeaderNavigationButtonPadding}" />
                <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
                <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="{StaticResource CalendarViewNavigationButtonFocusVisualMargin}" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                          <local:ContentPresenterEx x:Name="Text" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" />
                        </Border>
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                          <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackgroundPointerOver}" />
                          <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewHeaderNavigationButtonForegroundPointerOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                          <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackgroundPressed}" />
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewHeaderNavigationButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewHeaderNavigationButtonForegroundDisabled}" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="NavigationButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
                <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
                <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIconsFilled}" />
                <Setter Property="FontSize" Value="{DynamicResource CalendarViewNavigationButtonFontSize}" />
                <Setter Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource CalendarViewNavigationButtonForeground}" />
                <Setter Property="Padding" Value="{DynamicResource CalendarViewNavigationButtonPadding}" />
                <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
                <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="{StaticResource CalendarViewNavigationButtonFocusVisualMargin}" />
                <Setter Property="IsTabStop" Value="True" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                          <local:ContentPresenterEx x:Name="Text" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" />
                        </Border>
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                          <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackgroundPointerOver}" />
                          <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewNavigationButtonForegroundPointerOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                          <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarViewNavigationButtonBackgroundPressed}" />
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewNavigationButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                          <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource CalendarViewNavigationButtonForegroundDisabled}" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Button x:Name="PART_HeaderButton" HorizontalContentAlignment="Left" Focusable="False" Style="{StaticResource HeaderNavigationButtonStyle}" />
                  <Button x:Name="PART_PreviousButton" Grid.Column="1" Margin="{DynamicResource CalendarViewNavigationPreviousButtonMargin}" HorizontalContentAlignment="Center" Content="" Focusable="False" Style="{StaticResource NavigationButtonStyle}" />
                  <Button x:Name="PART_NextButton" Grid.Column="2" Margin="{DynamicResource CalendarViewNavigationNextButtonMargin}" HorizontalContentAlignment="Center" Content="" Focusable="False" Style="{StaticResource NavigationButtonStyle}" />
                </Grid>
                <Border Grid.Row="1" Height="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                <Grid x:Name="Views" Grid.Row="2" ClipToBounds="True">
                  <Border x:Name="BackgroundLayer" RenderTransformOrigin="0.5,0.5">
                    <Border.RenderTransform>
                      <ScaleTransform x:Name="BackgroundTransform" />
                    </Border.RenderTransform>
                  </Border>
                  <Grid x:Name="PART_MonthView" RenderTransformOrigin="0.5,0.5" TextElement.Foreground="{DynamicResource CalendarViewCalendarItemForeground}" Visibility="Visible">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="auto" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.RenderTransform>
                      <ScaleTransform x:Name="MonthViewTransform" />
                    </Grid.RenderTransform>
                  </Grid>
                  <Grid x:Name="PART_YearView" RenderTransformOrigin="0.5,0.5" Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.RenderTransform>
                      <ScaleTransform x:Name="YearViewTransform" />
                    </Grid.RenderTransform>
                  </Grid>
                </Grid>
              </Grid>
            </Border>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualState x:Name="Month" />
                <VisualState x:Name="Year">
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Decade">
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Month" To="Year">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthViewTransform" Storyboard.TargetProperty="ScaleX">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0.84" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthViewTransform" Storyboard.TargetProperty="ScaleY">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0.84" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="1.29" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="1.29" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="PART_HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Month">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleX">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="1.29" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleY">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="1.29" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthViewTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthViewTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="PART_HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Decade">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleX">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="1.29" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleY">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="1.29" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="PART_HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Decade" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.150" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleX">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewTransform" Storyboard.TargetProperty="ScaleY">
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.150" Value="0.84" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" KeyTime="0:0:0.500" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="PART_HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_MonthView" Property="TextElement.Foreground" Value="{DynamicResource CalendarViewWeekDayForegroundDisabled}" />
            </Trigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
              <Setter TargetName="PART_Root" Property="chelper:ControlHelper.VisualState" Value="Year" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Month">
              <Setter TargetName="PART_Root" Property="chelper:ControlHelper.VisualState" Value="Month" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
              <Setter TargetName="PART_Root" Property="chelper:ControlHelper.VisualState" Value="Decade" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCalendarItemStyle}" TargetType="CalendarItem" />
  <Style x:Key="DefaultCalendarDayButtonStyle" TargetType="CalendarDayButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource CalendarViewCalendarItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource CalendarViewCalendarItemForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CalendarViewCalendarItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Margin" Value="1" />
    <Setter Property="FontSize" Value="{DynamicResource CalendarViewDayItemFontSize}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarDayButton">
          <Grid SnapsToDevicePixels="True">
            <Grid.Width>
              <MultiBinding Converter="{StaticResource RoundMathConverter}">
                <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding>
            </Grid.Width>
            <Grid.Height>
              <MultiBinding Converter="{StaticResource RoundMathConverter}">
                <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding>
            </Grid.Height>
            <Ellipse x:Name="Background" Fill="{TemplateBinding Background}" />
            <Ellipse x:Name="InnerBorder" StrokeThickness="2" />
            <Ellipse x:Name="HighlightBorder" Fill="{TemplateBinding BorderBrush}" StrokeThickness="1" />
            <TextBlock x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DayStates">
                <primitives:VisualStateGroupListener.Listener>
                  <primitives:VisualStateGroupListener x:Name="DayStatesListener" />
                </primitives:VisualStateGroupListener.Listener>
                <VisualState x:Name="RegularDay" />
                <VisualState x:Name="Today" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <!--  Normal  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemHoverBackground}" />
              <Setter TargetName="Background" Property="Stroke" Value="{DynamicResource CalendarViewHoverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemPressedBackground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewPressedBorderBrush}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewPressedForeground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemDisabledBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewDisabledForeground}" />
            </Trigger>
            <!--  Selected  -->
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewSelectedForeground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewSelectedBorderBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewSelectedHoverForeground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewSelectedHoverBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewSelectedPressedForeground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewSelectedPressedBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewSelectedDisabledForeground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewSelectedDisabledBorderBrush}" />
            </MultiTrigger>
            <!--  OutOfScope  -->
            <Trigger Property="IsInactive" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewOutOfScopeBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopeForeground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsInactive" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopeHoverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsInactive" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopePressedForeground}" />
            </MultiTrigger>
            <!--  Today  -->
            <Trigger SourceName="DayStatesListener" Property="CurrentStateName" Value="Today">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayBackground}" />
              <Setter TargetName="NormalText" Property="FontWeight" Value="{DynamicResource CalendarViewTodayFontWeight}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewTodayForeground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsBlackedOut" Value="True" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="Today" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayBlackoutBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewTodayBlackoutForeground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="Today" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayHoverBackground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsPressed" Value="True" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="Today" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayPressedBackground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="Today" />
              </MultiTrigger.Conditions>
              <Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource CalendarViewTodaySelectedInnerBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="Today" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayDisabledBackground}" />
            </MultiTrigger>
            <!--  Blackout  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsBlackedOut" Value="True" />
                <Condition SourceName="DayStatesListener" Property="CurrentStateName" Value="RegularDay" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewBlackoutBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewBlackoutForeground}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCalendarDayButtonStyle}" TargetType="CalendarDayButton" />
  <Style x:Key="DefaultCalendarButtonStyle" TargetType="CalendarButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource CalendarViewCalendarItemRevealBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource CalendarViewCalendarItemForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CalendarViewCalendarItemRevealBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="MinHeight" Value="42" />
    <Setter Property="Margin" Value="9" />
    <Setter Property="FontSize" Value="{DynamicResource CalendarViewMonthYearItemFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarButton">
          <Grid SnapsToDevicePixels="True">
            <Grid.Width>
              <MultiBinding Converter="{StaticResource RoundMathConverter}">
                <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding>
            </Grid.Width>
            <Grid.Height>
              <MultiBinding Converter="{StaticResource RoundMathConverter}">
                <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
              </MultiBinding>
            </Grid.Height>
            <Ellipse x:Name="Background" Margin="-1" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
            <Ellipse x:Name="HighlightBorder" StrokeThickness="2" />
            <TextBlock x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Text="{TemplateBinding Content}" />
          </Grid>
          <ControlTemplate.Triggers>
            <!--  Normal  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemHoverBackground}" />
              <Setter TargetName="Background" Property="Stroke" Value="{DynamicResource CalendarViewHoverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemPressedBackground}" />
              <Setter TargetName="HighlightBorder" Property="Stroke" Value="{DynamicResource CalendarViewPressedBorderBrush}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewPressedForeground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewCalendarItemDisabledBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewDisabledForeground}" />
            </Trigger>
            <!--  Selected  -->
            <Trigger Property="HasSelectedDays" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayBackground}" />
              <Setter TargetName="NormalText" Property="FontWeight" Value="{DynamicResource CalendarViewTodayFontWeight}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewTodayForeground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSelectedDays" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayHoverBackground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSelectedDays" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayPressedBackground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSelectedDays" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewTodayDisabledBackground}" />
            </MultiTrigger>
            <!--  OutOfScope  -->
            <Trigger Property="IsInactive" Value="True">
              <Setter TargetName="Background" Property="Fill" Value="{DynamicResource CalendarViewOutOfScopeBackground}" />
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopeForeground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsInactive" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopeHoverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsInactive" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NormalText" Property="Foreground" Value="{DynamicResource CalendarViewOutOfScopePressedForeground}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCalendarButtonStyle}" TargetType="CalendarButton" />
  <Style x:Key="DefaultCalendarStyle" TargetType="Calendar">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource DefaultCalendarItemStyle}" />
    <Setter Property="CalendarDayButtonStyle" Value="{StaticResource DefaultCalendarDayButtonStyle}" />
    <Setter Property="CalendarButtonStyle" Value="{StaticResource DefaultCalendarButtonStyle}" />
    <Setter Property="Foreground" Value="{DynamicResource CalendarViewForeground}" />
    <Setter Property="Background" Value="{DynamicResource CalendarViewBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CalendarViewBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:CalendarHelper.AutoReleaseMouseCapture" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Calendar">
          <StackPanel x:Name="PART_Root" SnapsToDevicePixels="True">
            <CalendarItem x:Name="PART_CalendarItem" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Style="{TemplateBinding CalendarItemStyle}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCalendarStyle}" TargetType="Calendar" />
  <Style x:Key="DatePickerCalendarStyle" BasedOn="{StaticResource DefaultCalendarStyle}" TargetType="Calendar">
    <Setter Property="Background" Value="{DynamicResource FlyoutPresenterBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Calendar">
          <primitives:ThemeShadowChrome x:Name="Shdw" chelper:OpeningAnimationHelper.Storyboard="{DynamicResource OpeningStoryboard}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" SnapsToDevicePixels="True">
            <primitives:ThemeShadowChrome.Resources>
              <Storyboard x:Key="OpeningStoryboard">
                <DoubleAnimation Storyboard.Target="{Binding ElementName=Shdw}" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.100" />
              </Storyboard>
            </primitives:ThemeShadowChrome.Resources>
            <StackPanel x:Name="PART_Root">
              <CalendarItem x:Name="PART_CalendarItem" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Style="{TemplateBinding CalendarItemStyle}" />
            </StackPanel>
          </primitives:ThemeShadowChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultCheckBoxStyle" TargetType="CheckBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource CheckBoxBackgroundUnchecked}" />
    <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUnchecked}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUnchecked}" />
    <Setter Property="Padding" Value="{DynamicResource CheckBoxPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="MinWidth" Value="{DynamicResource CheckBoxMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource CheckBoxHeight}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="{DynamicResource CheckBoxFocusVisualMargin}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Border x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid Grid.Column="0" Width="{DynamicResource CheckBoxSize}" Height="{DynamicResource CheckBoxSize}" VerticalAlignment="Center">
                <Rectangle x:Name="NormalRectangle" Width="{DynamicResource CheckBoxSize}" Height="{DynamicResource CheckBoxSize}" Fill="{DynamicResource CheckBoxCheckBackgroundFillUnchecked}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                               Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                               Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{DynamicResource CheckBoxCheckBackgroundStrokeUnchecked}" StrokeThickness="{DynamicResource CheckBoxBorderThemeThickness}" UseLayoutRounding="False" />
                <local:FontIcon x:Name="CheckGlyph" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource CheckBoxGlyphSize}" Foreground="{DynamicResource CheckBoxCheckGlyphForegroundUnchecked}" Glyph="{DynamicResource CheckBoxCheckedGlyph}" Opacity="0" />
              </Grid>
              <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <!--  UncheckedNormal  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="IsPressed" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUnchecked}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUnchecked}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUnchecked}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeUnchecked}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillUnchecked}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUnchecked}" />
            </MultiTrigger>
            <!--  UncheckedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedPointerOver}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedPointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedPointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeUncheckedPointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillUncheckedPointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedPointerOver}" />
            </MultiTrigger>
            <!--  UncheckedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedPressed}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedPressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedPressed}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeUncheckedPressed}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillUncheckedPressed}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedPressed}" />
            </MultiTrigger>
            <!--  UncheckedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedDisabled}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeUncheckedDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillUncheckedDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedDisabled}" />
            </MultiTrigger>
            <!--  CheckedNormal  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="IsPressed" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundChecked}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundChecked}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushChecked}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeChecked}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillChecked}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundChecked}" />
              <Setter TargetName="NormalRectangle" Property="StrokeThickness" Value="{DynamicResource CheckBoxCheckedStrokeThickness}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  CheckedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedPointerOver}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedPointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedPointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeCheckedPointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillCheckedPointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedPointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  CheckedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedPressed}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedPressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedPressed}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeCheckedPressed}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillCheckedPressed}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedPressed}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  CheckedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedDisabled}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeCheckedDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillCheckedDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  IndeterminateNormal  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="IsPressed" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminate}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminate}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminate}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminate}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminate}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminate}" />
              <Setter TargetName="CheckGlyph" Property="Glyph" Value="{DynamicResource CheckBoxIndeterminateGlyph}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  IndeterminatePointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminatePointerOver}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminatePointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminatePointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminatePointerOver}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminatePointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminatePointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Glyph" Value="{DynamicResource CheckBoxIndeterminateGlyph}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  IndeterminatePressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminatePressed}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminatePressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminatePressed}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminatePressed}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminatePressed}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminatePressed}" />
              <Setter TargetName="CheckGlyph" Property="Glyph" Value="{DynamicResource CheckBoxIndeterminateGlyph}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
            <!--  IndeterminateDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminateDisabled}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminateDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminateDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminateDisabled}" />
              <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminateDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminateDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Glyph" Value="{DynamicResource CheckBoxIndeterminateGlyph}" />
              <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCheckBoxStyle}" TargetType="CheckBox" />
  <Style x:Key="DataGridCheckBoxStyle" BasedOn="{StaticResource DefaultCheckBoxStyle}" TargetType="CheckBox">
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="Margin" Value="12,0" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
  </Style>
  <Style x:Key="DataGridReadOnlyCheckBoxStyle" BasedOn="{StaticResource DataGridCheckBoxStyle}" TargetType="CheckBox">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <Style x:Key="ComboBoxItemPill" TargetType="Rectangle">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Height" Value="{DynamicResource ComboBoxItemPillHeight}" />
    <Setter Property="Width" Value="{DynamicResource ComboBoxItemPillWidth}" />
    <Setter Property="Fill" Value="{DynamicResource ComboBoxItemPillFillBrush}" />
    <Setter Property="RadiusX" Value="{Binding Value, Source={StaticResource ComboBoxItemPillCornerRadiusProxy}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" />
    <Setter Property="RadiusY" Value="{Binding Value, Source={StaticResource ComboBoxItemPillCornerRadiusProxy}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
    <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
  </Style>
  <Style x:Key="DefaultComboBoxItemStyle" TargetType="ComboBoxItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForeground}" />
    <Setter Property="Background" Value="{DynamicResource ComboBoxItemBackground}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{DynamicResource ComboBoxItemThemePadding}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ComboBoxItemCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBoxItem">
          <Border x:Name="LayoutRoot" Margin="5,2,5,2" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid>
              <Rectangle x:Name="Pill" Grid.Row="1" Grid.Column="0" Opacity="0" RenderTransformOrigin="0.5,0.5" Style="{StaticResource ComboBoxItemPill}">
                <Rectangle.RenderTransform>
                  <ScaleTransform x:Name="PillTransform" ScaleY="1" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="1,0,0,0" KeyTime="{DynamicResource ComboBoxItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ComboBoxItemScaleAnimationDuration}" Value="{DynamicResource ComboBoxItemPillMinScale}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InputModeStates">
                <VisualState x:Name="InputModeDefault" />
                <VisualState x:Name="TouchInputMode">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Margin">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ComboBoxItemThemeTouchPadding}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="GameControllerInputMode">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Margin">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ComboBoxItemThemeGameControllerPadding}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Pressed" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="False">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Normal" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundPointerOver}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundPressed}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundDisabled}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundDisabled}" />
            </MultiTrigger>
            <!--  Selected  -->
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Pill" Property="Opacity" Value="1" />
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelected}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelected}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelected}" />
            </Trigger>
            <!--  SelectedFocused  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelected}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelected}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelected}" />
            </MultiTrigger>
            <!--  SelectedUnfocused  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelectedUnfocused}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelectedUnfocused}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelectedUnfocused}" />
            </MultiTrigger>
            <!--  SelectedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelectedDisabled}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelectedDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelectedDisabled}" />
            </MultiTrigger>
            <!--  SelectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelectedPointerOver}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelectedPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelectedPointerOver}" />
            </MultiTrigger>
            <!--  SelectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ComboBoxItemBackgroundSelectedPressed}" />
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource ComboBoxItemBorderBrushSelectedPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundSelectedPressed}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultComboBoxItemStyle}" TargetType="ComboBoxItem" />
  <Style x:Key="ContextMenuStyleBase" TargetType="ContextMenu">
    <Setter Property="Background" Value="{DynamicResource MenuFlyoutPresenterBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutPresenterBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource MenuFlyoutPresenterBorderThemeThickness}" />
    <Setter Property="Padding" Value="{DynamicResource MenuFlyoutPresenterThemePadding}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="FontStyle" Value="Normal" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
    <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
    <!--<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />-->
    <!--<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />-->
    <!--<Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />-->
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="MaxWidth" Value="{DynamicResource FlyoutThemeMaxWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource MenuFlyoutThemeMinHeight}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource OverlayCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <primitives:ThemeShadowChrome x:Name="Shdw" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" IsShadowEnabled="{TemplateBinding HasDropShadow}" SnapsToDevicePixels="True">
            <Border MinHeight="{DynamicResource MenuFlyoutThemeMinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ScrollViewerEx x:Name="ContextMenuScrollViewer" MinWidth="{DynamicResource FlyoutThemeMinWidth}" Margin="{TemplateBinding Padding}" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                               TypeInTargetAssembly={x:Type FrameworkElement}}}">
                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" RenderOptions.ClearTypeHint="Enabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </local:ScrollViewerEx>
            </Border>
          </primitives:ThemeShadowChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultContextMenuStyle" BasedOn="{StaticResource ContextMenuStyleBase}" TargetType="ContextMenu">
    <Setter Property="OverridesDefaultStyle" Value="True" />
  </Style>
  <Style BasedOn="{StaticResource DefaultContextMenuStyle}" TargetType="ContextMenu" />
  <Style x:Key="DefaultDataGridCellStyle" TargetType="DataGridCell">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource DataGridCellBackgroundBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="MinHeight" Value="{DynamicResource DataGridRowMinHeight}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridCell">
          <primitives:DataGridCellPresenter MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" CurrencyVisualBrush="{DynamicResource DataGridCurrencyVisualPrimaryBrush}" CurrencyVisualThickness="1" FocusVisualPrimaryBrush="{DynamicResource DataGridCellFocusVisualPrimaryBrush}" FocusVisualPrimaryThickness="2" FocusVisualSecondaryBrush="{DynamicResource DataGridCellFocusVisualSecondaryBrush}" FocusVisualSecondaryThickness="1" IsCurrencyVisualVisible="{TemplateBinding IsSelected}" IsFocusVisualVisible="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridCellExpanded" TargetType="DataGridCell">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource DataGridCellBackgroundBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="MinHeight" Value="{DynamicResource DataGridRowMinHeight}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridCell">
          <Border MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="CurrencyVisual" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" IsHitTestVisible="False" Opacity="0" Stroke="{DynamicResource DataGridCurrencyVisualPrimaryBrush}" StrokeThickness="1" />
              <Grid x:Name="FocusVisual" IsHitTestVisible="False" Opacity="0">
                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" IsHitTestVisible="False" Stroke="{DynamicResource DataGridCellFocusVisualPrimaryBrush}" StrokeThickness="2" />
                <Rectangle Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" IsHitTestVisible="False" Stroke="{DynamicResource DataGridCellFocusVisualSecondaryBrush}" StrokeThickness="1" />
              </Grid>
              <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="CurrencyVisual" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="FocusVisual" Property="Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultDataGridColumnHeadersPresenterStyle}" TargetType="DataGridColumnHeadersPresenter" />
  <Style x:Key="DefaultDataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource DataGridColumnHeaderBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource DataGridColumnHeaderForegroundBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SeparatorBrush" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="Padding" Value="12,0,0,0" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="MinHeight" Value="32" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridColumnHeader">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="SortIconAscending">M 18.310547 10.126953 L 10.625 2.441406 L 10.625 20 L 9.375 20 L 9.375 2.441406 L 1.689453 10.126953 L 0.810547 9.248047 L 10 0.058594 L 19.189453 9.248047 Z</StreamGeometry>
            <StreamGeometry x:Key="SortIconDescending">M 19.189453 10.751953 L 10 19.941406 L 0.810547 10.751953 L 1.689453 9.873047 L 9.375 17.558594 L 9.375 0 L 10.625 0 L 10.625 17.558594 L 18.310547 9.873047 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Grid x:Name="ColumnHeaderRoot">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="BackgroundRectangle" Grid.ColumnSpan="2" Fill="{TemplateBinding Background}" Stretch="Fill" />
            <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition x:Name="SortIconColumn" Width="Auto" MinWidth="32" />
              </Grid.ColumnDefinitions>
              <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ContentPresenter.Resources>
                  <Style TargetType="TextBlock">
                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                  </Style>
                </ContentPresenter.Resources>
              </ContentPresenter>
              <local:FontIconFallback x:Name="SortIcon" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource SortIconAscending}" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Foreground="{DynamicResource DataGridColumnHeaderForegroundBrush}" Visibility="Collapsed" />
            </Grid>
            <Rectangle x:Name="VerticalSeparator" Grid.Column="1" Width="1" VerticalAlignment="Stretch" Fill="{TemplateBinding SeparatorBrush}" Visibility="{TemplateBinding SeparatorVisibility}" />
            <Grid x:Name="FocusVisual" IsHitTestVisible="False" Opacity="0">
              <Rectangle x:Name="FocusVisualPrimary" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" IsHitTestVisible="False" Stroke="{DynamicResource DataGridCellFocusVisualPrimaryBrush}" StrokeThickness="2" />
              <Rectangle x:Name="FocusVisualSecondary" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" IsHitTestVisible="False" Stroke="{DynamicResource DataGridCellFocusVisualSecondaryBrush}" StrokeThickness="1" />
            </Grid>
            <Thumb x:Name="PART_LeftHeaderGripper" Grid.ColumnSpan="2" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
            <Thumb x:Name="PART_RightHeaderGripper" Grid.ColumnSpan="2" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SortStates">
                <VisualState x:Name="Unsorted" />
                <VisualState x:Name="SortAscending">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SortIcon" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SortDescending">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SortIcon" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SortIcon" Storyboard.TargetProperty="Data">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SortIconDescending}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridColumnHeaderHoveredBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridColumnHeaderPressedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="SortDirection" Value="{x:Null}">
              <Setter TargetName="SortIconColumn" Property="MinWidth" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="SortDirection" Value="{x:Null}">
        <Setter Property="Padding" Value="12,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultDataGridRowHeaderStyle" TargetType="DataGridRowHeader">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource DataGridRowHeaderBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource DataGridRowHeaderForegroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SeparatorBrush" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="Padding" Value="12,0,13,0" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridRowHeader">
          <Grid x:Name="RowHeaderRoot">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Grid.RowSpan="3" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding SeparatorBrush}" BorderThickness="0,0,1,0">
              <Grid Background="{TemplateBinding Background}">
                <Rectangle x:Name="RowInvalidVisualElement" Fill="{DynamicResource DataGridRowInvalidBrush}" Opacity="0" Stretch="Fill" />
                <Rectangle x:Name="BackgroundRectangle" Fill="Transparent" Stretch="Fill" />
              </Grid>
            </Border>
            <Rectangle x:Name="HorizontalSeparator" Grid.Row="2" Grid.ColumnSpan="2" Height="1" Margin="1,0,1,0" HorizontalAlignment="Stretch" Fill="{TemplateBinding SeparatorBrush}" Visibility="{TemplateBinding SeparatorVisibility}" />
            <ContentPresenter Grid.RowSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Thumb x:Name="PART_TopHeaderGripper" Grid.RowSpan="3" Grid.ColumnSpan="2" VerticalAlignment="Top" Style="{StaticResource RowHeaderGripperStyle}" />
            <Thumb x:Name="PART_BottomHeaderGripper" Grid.RowSpan="3" Grid.ColumnSpan="2" VerticalAlignment="Bottom" Style="{StaticResource RowHeaderGripperStyle}" />
            <!-- For optional row currency glyph
                        <Path x:Name="CurrentRowGlyph" VerticalAlignment="Center" HorizontalAlignment="Center" Width="6" Height="10" Margin="8,0,8,0" Grid.RowSpan="2" Stretch="Fill" Opacity="0" Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z ">
                            <Path.Fill>
                                <LinearGradientBrush StartPoint="0,-.15" EndPoint="0,1.75">
                                    <GradientStop Color="#FF84E3FF" Offset="0"/>
                                    <GradientStop Color="#FF6ABFD8" Offset="0.5"/>
                                    <GradientStop Color="#FF5297AB" Offset="1"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        -->
            <!-- For optional row editing glyph
                        <Path x:Name="EditingRowGlyph" VerticalAlignment="Center" HorizontalAlignment="Center" Width="6" Height="10" Margin="8,0,8,0" Grid.RowSpan="2" Stretch="Fill" Opacity="0" Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z ">
                            <Path.Fill>
                                <LinearGradientBrush StartPoint="0,-.15" EndPoint="0,1.75">
                                    <GradientStop Color="#FF84E3FF" Offset="0"/>
                                    <GradientStop Color="#FF6ABFD8" Offset="0.5"/>
                                    <GradientStop Color="#FF5297AB" Offset="1"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        -->
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <primitives:VisualStateGroupListener.Listener>
                  <primitives:VisualStateGroupListener x:Name="CommonStatesListener" />
                </primitives:VisualStateGroupListener.Listener>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Normal_CurrentRow" />
                <VisualState x:Name="Normal_Selected">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Normal_EditingRow" />
                <VisualState x:Name="Normal_CurrentRow_Selected">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="MouseOver_CurrentRow" />
                <VisualState x:Name="MouseOver_Unfocused_EditingRow" />
                <VisualState x:Name="MouseOver_EditingRow" />
                <VisualState x:Name="MouseOver_Unfocused_Selected" />
                <VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
                <VisualState x:Name="MouseOver_CurrentRow_Selected">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="MouseOver_Selected" />
                <VisualState x:Name="Unfocused_EditingRow" />
                <VisualState x:Name="Unfocused_Selected" />
                <VisualState x:Name="Unfocused_CurrentRow_Selected" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="RowValid" />
                <VisualState x:Name="RowInvalid">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundRectangle" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="RowInvalidVisualElement" Storyboard.TargetProperty="Opacity" To="0.4" Duration="0" />
                    <!-- For optional row currency and editing glyphs
                                        <ColorAnimation Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        <ColorAnimation Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        <ColorAnimation Storyboard.TargetName="CurrentRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        <ColorAnimation Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        <ColorAnimation Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        <ColorAnimation Storyboard.TargetName="EditingRowGlyph" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Duration="0" To="#FFDC000C"/>
                                        -->
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Normal_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Normal_CurrentRow_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource SystemControlHighlightListLowBrush}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_CurrentRow">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource SystemControlHighlightListLowBrush}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Unfocused_EditingRow">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource SystemControlHighlightListLowBrush}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_EditingRow">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource SystemControlHighlightListLowBrush}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Unfocused_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Unfocused_CurrentRow_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_CurrentRow_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Unfocused_EditingRow">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedBackground}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Unfocused_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedUnfocusedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Unfocused_CurrentRow_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedUnfocusedBackgroundOpacity}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultDataGridRowStyle" TargetType="DataGridRow">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="ValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridRow">
          <Grid>
            <Rectangle x:Name="BackgroundRectangle" Fill="Transparent" />
            <Border x:Name="DGR_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
              <SelectiveScrollingGrid>
                <SelectiveScrollingGrid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </SelectiveScrollingGrid.ColumnDefinitions>
                <SelectiveScrollingGrid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </SelectiveScrollingGrid.RowDefinitions>
                <DataGridCellsPresenter x:Name="CellsPresenter" Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Border Grid.Row="1" Grid.Column="1" Background="{DynamicResource DataGridDetailsPresenterBackgroundBrush}">
                  <DataGridDetailsPresenter x:Name="DetailsPresenter" SelectiveScrollingGrid.SelectiveScrollingOrientation="{TemplateBinding chelper:DataGridRowHelper.AreRowDetailsFrozen,                                                                                                                ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},                                                                                                                Converter={x:Static DataGrid.RowDetailsScrollingConverter}}" Visibility="{TemplateBinding DetailsVisibility}" />
                </Border>
                <DataGridRowHeader x:Name="RowHeader" Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{TemplateBinding chelper:DataGridRowHelper.HeadersVisibility,                                                                  ConverterParameter={x:Static DataGridHeadersVisibility.Row},                                                                  Converter={x:Static DataGrid.HeadersVisibilityConverter}}" />
              </SelectiveScrollingGrid>
            </Border>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <primitives:VisualStateGroupListener.Listener>
                  <primitives:VisualStateGroupListener x:Name="CommonStatesListener" />
                </primitives:VisualStateGroupListener.Listener>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Normal_AlternatingRow" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Normal_Selected" />
                <VisualState x:Name="MouseOver_Selected" />
                <VisualState x:Name="MouseOver_Unfocused_Selected" />
                <VisualState x:Name="Unfocused_Selected" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource SystemControlHighlightListLowBrush}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Normal_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="MouseOver_Unfocused_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedHoveredUnfocusedBackgroundOpacity}" />
            </Trigger>
            <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Unfocused_Selected">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridRowSelectedUnfocusedBackground}" />
              <Setter TargetName="BackgroundRectangle" Property="Opacity" Value="{DynamicResource DataGridRowSelectedUnfocusedBackgroundOpacity}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsNewItem" Value="True">
        <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource DataGridColumnHeaderBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Rectangle x:Name="BackgroundRectangle" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
            <Rectangle Width="1" HorizontalAlignment="Right" Fill="{TemplateBinding BorderBrush}" />
            <Polygon x:Name="Arrow" Margin="8,8,3,3" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}" Points="0,10 10,10 10,0" Stretch="Uniform" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridColumnHeaderHoveredBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="BackgroundRectangle" Property="Fill" Value="{DynamicResource DataGridColumnHeaderPressedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridTextBlockStyle" TargetType="TextBlock">
    <Setter Property="Padding" Value="12,0" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Resources>
      <Style TargetType="Hyperlink">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Setter Property="chelper:HyperlinkHelper.IsPressEnabled" Value="True" />
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="true">
            <Setter Property="Foreground" Value="{DynamicResource SystemControlHyperlinkBaseMediumBrush}" />
          </Trigger>
          <Trigger Property="chelper:HyperlinkHelper.IsPressed" Value="true">
            <Setter Property="Foreground" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="true">
            <Setter Property="Cursor" Value="Hand" />
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="DataGridRowGroupHeaderStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronRight">M 5.029297 19.091797 L 14.111328 10 L 5.029297 0.908203 L 5.908203 0.029297 L 15.888672 10 L 5.908203 19.970703 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronDown">M 18.935547 4.560547 L 19.814453 5.439453 L 10 15.253906 L 0.185547 5.439453 L 1.064453 4.560547 L 10 13.496094 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Grid x:Name="RowGroupHeaderRoot" Background="{DynamicResource DataGridRowGroupHeaderBackgroundBrush}" SnapsToDevicePixels="False">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <local:FontIconFallback x:Name="arrow" Margin="12,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource ChevronRight}" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="false" />
            <ContentPresenter Grid.Column="1" Margin="12,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="arrow" Property="Data" Value="{StaticResource ChevronDown}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="RowGroupHeaderRoot" Property="Background" Value="{DynamicResource DataGridRowGroupHeaderHoveredBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="RowGroupHeaderRoot" Property="Background" Value="{DynamicResource DataGridRowGroupHeaderPressedBackgroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridRowGroupContainerStyle" TargetType="GroupItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GroupItem">
          <Expander x:Name="PART_Header" FontSize="{DynamicResource ControlContentThemeFontSize}" Foreground="{DynamicResource DataGridRowGroupHeaderForegroundBrush}" Header="{TemplateBinding Content}" HeaderStringFormat="{TemplateBinding ContentStringFormat}" HeaderTemplate="{TemplateBinding ContentTemplate}" HeaderTemplateSelector="{TemplateBinding ContentTemplateSelector}" IsExpanded="True">
            <Expander.Template>
              <ControlTemplate TargetType="Expander">
                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                  <DockPanel>
                    <ToggleButton x:Name="HeaderSite" MinWidth="0" MinHeight="{DynamicResource DataGridRowMinHeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" chelper:FocusVisualHelper.FocusVisualMargin="0" chelper:FocusVisualHelper.UseSystemFocusVisuals="True" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FocusVisualStyle="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource DataGridRowGroupHeaderStyle}" />
                    <ContentPresenter x:Name="ExpandSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom" Focusable="false" Visibility="Collapsed" />
                  </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsExpanded" Value="true">
                    <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Expander.Template>
            <ItemsPresenter x:Name="ItemsPresenter" />
          </Expander>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DataGridTextControlValidationErrorTemplate">
    <Grid SnapsToDevicePixels="True">
      <AdornedElementPlaceholder />
      <Border BorderBrush="{DynamicResource SystemControlErrorTextForegroundBrush}" BorderThickness="{DynamicResource TextControlBorderThemeThicknessFocused}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="DefaultDatePickerStyle" TargetType="DatePicker">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource CalendarDatePickerForeground}" />
    <Setter Property="IsTodayHighlighted" Value="True" />
    <Setter Property="SelectedDateFormat" Value="Short" />
    <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
    <Setter Property="Background" Value="{DynamicResource CalendarDatePickerBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CalendarDatePickerBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource CalendarDatePickerBorderThemeThickness}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource IsApplicationFocusVisualKindReveal}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:DatePickerHelper.IsEnabled" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePicker">
          <Grid x:Name="PART_Root" SnapsToDevicePixels="True">
            <Grid.Resources>
              <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="Button">
                <local:FontIcon x:Name="CalendarGlyph" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Glyph="{TemplateBinding Content}" />
              </ControlTemplate>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="32" />
            </Grid.ColumnDefinitions>
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Margin="{DynamicResource CalendarDatePickerTopHeaderMargin}" VerticalAlignment="Top" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <Border x:Name="Background" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" MinHeight="32" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <DatePickerTextBox x:Name="PART_TextBox" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Margin="0,0,0,0" Padding="{DynamicResource ComboBoxEditableTextPadding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" BorderBrush="Transparent" Focusable="{TemplateBinding Focusable}" />
            <Button x:Name="PART_Button" Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" Content="" Focusable="False" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource CalendarDatePickerCalendarGlyphForeground}" Template="{StaticResource DropDownButtonTemplate}" />
            <Popup x:Name="PART_Popup" Grid.Row="1" Grid.Column="2" AllowsTransparency="True" Placement="Bottom" StaysOpen="False">
              <Popup.PlacementRectangle>
                <MultiBinding>
                  <MultiBinding.Converter>
                    <converters:PlacementRectangleConverter Margin="0,-4" />
                  </MultiBinding.Converter>
                  <Binding ElementName="PART_Root" Path="ActualWidth" />
                  <Binding ElementName="PART_Root" Path="ActualHeight" />
                </MultiBinding>
              </Popup.PlacementRectangle>
            </Popup>
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Content="{TemplateBinding chelper:ControlHelper.Description}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Root" Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarDatePickerBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource CalendarDatePickerBorderBrushPointerOver}" />
              <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource CalendarDatePickerCalendarGlyphForegroundPointerOver}" />
            </Trigger>
            <!--  TextBoxFocused  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_TextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="False" />
                <Condition SourceName="PART_Button" Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
              <Setter TargetName="PART_Button" Property="Padding" Value="0,2,2,2" />
            </MultiTrigger>
            <!--  TextBoxFocusedOverlayPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_TextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
              <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource ComboBoxFocusedDropDownBackgroundPointerOver}" />
              <Setter TargetName="PART_Button" Property="Padding" Value="0,2,2,2" />
            </MultiTrigger>
            <!--  TextBoxFocusedOverlayPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_TextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="PART_Button" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
              <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource ComboBoxFocusedDropDownBackgroundPointerPressed}" />
              <Setter TargetName="PART_Button" Property="Padding" Value="0,2,2,2" />
            </MultiTrigger>
            <!--  TextBoxOverlayPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_TextBox" Property="IsSelectionActive" Value="False" />
                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource ComboBoxDropDownBackgroundPointerOver}" />
            </MultiTrigger>
            <!--  TextBoxOverlayPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_TextBox" Property="IsSelectionActive" Value="False" />
                <Condition SourceName="PART_Button" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Button" Property="Background" Value="{DynamicResource ComboBoxDropDownBackgroundPointerPressed}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource CalendarDatePickerBackgroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource CalendarDatePickerBorderBrushDisabled}" />
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource CalendarDatePickerHeaderForegroundDisabled}" />
              <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource CalendarDatePickerTextForegroundDisabled}" />
              <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource CalendarDatePickerCalendarGlyphForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultDatePickerStyle}" TargetType="DatePicker" />
  <Style x:Key="ExpanderCardHeaderDownStyle" TargetType="ToggleButton">
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderHorizontalPadding}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Column="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronHorizontalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronDownGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderCardHeaderUpStyle" TargetType="ToggleButton">
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderHorizontalPadding}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Column="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronHorizontalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronUpGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderCardHeaderLeftStyle" TargetType="ToggleButton">
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinHeight}" MinHeight="{TemplateBinding MinWidth}" MaxHeight="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True">
                <local:ContentPresenterEx.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </local:ContentPresenterEx.LayoutTransform>
              </local:ContentPresenterEx>
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Row="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronVerticalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronChevronLeftGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderCardRightHeaderRightStyle" TargetType="ToggleButton">
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinHeight}" MinHeight="{TemplateBinding MinWidth}" MaxHeight="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True">
                <local:ContentPresenterEx.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </local:ContentPresenterEx.LayoutTransform>
              </local:ContentPresenterEx>
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Row="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronVerticalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronChevronRightGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderCardStyle" TargetType="Expander">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{DynamicResource ExpanderContentBackground}" />
    <Setter Property="MinWidth" Value="{DynamicResource FlyoutThemeMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource ExpanderMinHeight}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ExpanderContentDownBorderThickness}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ExpanderContentBorderBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderContentPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Expander">
          <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
            <ToggleButton x:Name="ExpanderHeader" MinHeight="{TemplateBinding MinHeight}" Padding="{DynamicResource ExpanderHeaderHorizontalPadding}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{DynamicResource ExpanderHeaderHorizontalContentAlignment}" VerticalContentAlignment="{DynamicResource ExpanderHeaderVerticalContentAlignment}" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" AutomationProperties.AutomationId="ExpanderToggleButton" Background="{DynamicResource ExpanderHeaderBackground}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{DynamicResource ExpanderHeaderBorderThickness}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsEnabled}" Style="{DynamicResource ExpanderCardHeaderDownStyle}" Tag="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <!--  The clip is a composition clip applied in code  -->
            <Border x:Name="ExpanderContentClip" DockPanel.Dock="Bottom">
              <Border x:Name="ExpanderContent" MinHeight="{TemplateBinding MinHeight}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{DynamicResource ExpanderContentDownBorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                Converter={StaticResource BottomCornerRadiusFilterConverter}}" Visibility="Collapsed">
                <ContentPresenter x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="false" />
              </Border>
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderCardRightHeaderRightStyle}" />
              <Setter TargetName="ExpanderHeader" Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
              <Setter TargetName="ExpanderHeader" Property="VerticalContentAlignment" Value="Stretch" />
              <Setter TargetName="ExpanderHeader" Property="HorizontalContentAlignment" Value="Center" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentRightBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Left" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderCardHeaderUpStyle}" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentUpBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderCardHeaderLeftStyle}" />
              <Setter TargetName="ExpanderHeader" Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
              <Setter TargetName="ExpanderHeader" Property="VerticalContentAlignment" Value="Stretch" />
              <Setter TargetName="ExpanderHeader" Property="HorizontalContentAlignment" Value="Center" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentLeftBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Right" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Down" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="chelper:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Right" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="chelper:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Up" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="chelper:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Left" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="chelper:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderDownHeaderStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronDown">M 18.935547 4.560547 L 19.814453 5.439453 L 10 15.253906 L 0.185547 5.439453 L 1.064453 4.560547 L 10 13.496094 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronUp">M 19.091797 14.970703 L 10 5.888672 L 0.908203 14.970703 L 0.029297 14.091797 L 10 4.111328 L 19.970703 14.091797 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <local:FontIconFallback x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Data="{StaticResource ChevronDown}" SnapsToDevicePixels="false" Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}" />
              <ContentPresenter Grid.Column="1" Margin="8,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="arrow" Property="Data" Value="{StaticResource ChevronUp}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseMediumBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronDown">M 18.935547 4.560547 L 19.814453 5.439453 L 10 15.253906 L 0.185547 5.439453 L 1.064453 4.560547 L 10 13.496094 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronUp">M 19.091797 14.970703 L 10 5.888672 L 0.908203 14.970703 L 0.029297 14.091797 L 10 4.111328 L 19.970703 14.091797 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="180" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <local:FontIconFallback x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Data="{StaticResource ChevronDown}" SnapsToDevicePixels="false" Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}" />
              </Grid>
              <ContentPresenter Grid.Column="1" Margin="8,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="arrow" Property="Data" Value="{StaticResource ChevronUp}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseMediumBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronDown">M 18.935547 4.560547 L 19.814453 5.439453 L 10 15.253906 L 0.185547 5.439453 L 1.064453 4.560547 L 10 13.496094 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronUp">M 19.091797 14.970703 L 10 5.888672 L 0.908203 14.970703 L 0.029297 14.091797 L 10 4.111328 L 19.970703 14.091797 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <local:FontIconFallback x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Data="{StaticResource ChevronDown}" SnapsToDevicePixels="false" Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}" />
              </Grid>
              <ContentPresenter Grid.Row="1" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="arrow" Property="Data" Value="{StaticResource ChevronUp}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseMediumBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronDown">M 18.935547 4.560547 L 19.814453 5.439453 L 10 15.253906 L 0.185547 5.439453 L 1.064453 4.560547 L 10 13.496094 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronUp">M 19.091797 14.970703 L 10 5.888672 L 0.908203 14.970703 L 0.029297 14.091797 L 10 4.111328 L 19.970703 14.091797 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <local:FontIconFallback x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Data="{StaticResource ChevronDown}" SnapsToDevicePixels="false" Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}" />
              </Grid>
              <ContentPresenter Grid.Row="1" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="arrow" Property="Data" Value="{StaticResource ChevronUp}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseMediumBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="arrow" Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultExpanderStyle" TargetType="Expander">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Expander">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}" SnapsToDevicePixels="true">
            <DockPanel>
              <ToggleButton x:Name="HeaderSite" MinWidth="0" MinHeight="0" Margin="1" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FocusVisualStyle="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpanderDownHeaderStyle}" chelper:FocusVisualHelper.UseSystemFocusVisuals="True" chelper:FocusVisualHelper.FocusVisualMargin="-3" />
              <ContentPresenter x:Name="ExpandSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom" Focusable="false" Visibility="Collapsed" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultExpanderStyle}" TargetType="Expander" />
  <Style x:Key="GridSplitterPreviewStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Fill="{DynamicResource GridSplitterPointerOverBackground}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultGridSplitterStyle" TargetType="GridSplitter">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{DynamicResource GridSplitterBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource GridSplitterForeground}" />
    <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GridSplitter">
          <Border x:Name="RootGrid" Padding="{TemplateBinding Padding}" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource GridSplitterPointerOverBackground}" />
            </Trigger>
            <Trigger SourceName="RootGrid" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource GridSplitterPressedBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultGridSplitterStyle}" TargetType="GridSplitter" />
  <Style x:Key="DefaultGroupBoxStyle" TargetType="GroupBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource GroupBoxPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GroupBox">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ContentPresenter Grid.Row="0" Margin="{DynamicResource GroupBoxHeaderMargin}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.FontSize="{DynamicResource GroupBoxHeaderFontSize}" />
            <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultGroupBoxStyle}" TargetType="GroupBox" />
  <Style BasedOn="{StaticResource DefaultGroupItemStyle}" TargetType="GroupItem" />
  <Style x:Key="DefaultHyperlinkStyle" TargetType="Hyperlink">
    <Setter Property="Foreground" Value="{DynamicResource HyperlinkForeground}" />
    <Setter Property="chelper:HyperlinkHelper.IsPressEnabled" Value="True" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource HyperlinkForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="chelper:HyperlinkHelper.IsPressed" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource HyperlinkForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource HyperlinkButtonForegroundDisabled}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="true">
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultHyperlinkStyle}" TargetType="Hyperlink" />
  <Style x:Key="InfoBarCloseButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Style.Setters>
      <Setter Property="Background" Value="{DynamicResource InfoBarCloseButtonBackground}" />
      <Setter Property="Foreground" Value="{DynamicResource InfoBarCloseButtonForeground}" />
      <Setter Property="BorderBrush" Value="{DynamicResource InfoBarCloseButtonBorderBrush}" />
      <Setter Property="Width" Value="{DynamicResource InfoBarCloseButtonSize}" />
      <Setter Property="Height" Value="{DynamicResource InfoBarCloseButtonSize}" />
      <Setter Property="VerticalAlignment" Value="Top" />
      <Setter Property="Margin" Value="5" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
              <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Border>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource InfoBarCloseButtonBackgroundPointerOver}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource InfoBarCloseButtonBorderBrushPointerOver}" />
                <Setter Property="Foreground" Value="{DynamicResource InfoBarCloseButtonForegroundPointerOver}" />
              </Trigger>
              <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource InfoBarCloseButtonBackgroundPressed}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource InfoBarCloseButtonBorderBrushPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource InfoBarCloseButtonForegroundPressed}" />
              </Trigger>
              <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource InfoBarCloseButtonBackgroundDisabled}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource InfoBarCloseButtonBorderBrushDisabled}" />
                <Setter Property="Foreground" Value="{DynamicResource InfoBarCloseButtonForegroundDisabled}" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style.Setters>
  </Style>
  <Style x:Key="DefaultLabelStyle" TargetType="Label">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Label">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultLabelStyle}" TargetType="Label" />
  <Style x:Key="DefaultListBoxItemStyle" TargetType="ListBoxItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{DynamicResource ListBoxItemPadding}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border x:Name="LayoutRoot" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="PressedBackground" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Fill="Transparent" />
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{DynamicResource ControlContentThemeFontSize}" FontWeight="Normal" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="NoWrap" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </Trigger>
            <!--  Selected  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundSelected}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </MultiTrigger>
            <!--  SelectedUnfocused  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundSelected}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </MultiTrigger>
            <!--  SelectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundSelectedPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </MultiTrigger>
            <!--  SelectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListBoxItemBackgroundSelectedPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ListBoxItemForeground}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultListBoxItemStyle}" TargetType="ListBoxItem" />
  <Style x:Key="DefaultListBoxStyle" TargetType="ListBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource ListBoxForeground}" />
    <Setter Property="Background" Value="{DynamicResource ListBoxBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ListBoxBorder}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ListBoxBorderThemeThickness}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:ScrollViewerHelper.AutoHideScrollBars" Value="{DynamicResource AutoHideScrollBars}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBox">
          <Border x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <local:ScrollViewerEx x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" chelper:ScrollViewerHelper.AutoHideScrollBars="{TemplateBinding chelper:ScrollViewerHelper.AutoHideScrollBars}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentPresenter Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Header}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.HeaderTemplate}" />
                <ItemsPresenter Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ContentPresenter Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Footer}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.FooterTemplate}" />
              </Grid>
            </local:ScrollViewerEx>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultListBoxStyle}" TargetType="ListBox" />
  <Style x:Key="DefaultListViewItemStyle" TargetType="ListViewItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{DynamicResource ListViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ListViewItemForeground}" />
    <Setter Property="Padding" Value="12,0,12,0" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="MinWidth" Value="{DynamicResource ListViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource ListViewItemMinHeight}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ListViewItemCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Border x:Name="LayoutRoot" Margin="{DynamicResource ListViewItemCompactSelectedBorderThemeThickness}" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
            <Grid>
              <Grid x:Name="PressedBackgroundGrid">
                <Grid.RowDefinitions>
                  <RowDefinition Height="0.5*" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="0.5*" />
                </Grid.RowDefinitions>
                <Rectangle x:Name="PressedBackground" Grid.Row="1" Width="3.5" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{DynamicResource ListViewItemSelectionIndicatorBrush}" Opacity="0" RadiusX="{Binding Value, Source={StaticResource ListViewItemSelectionIndicatorCornerRadiusProxy}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Value, Source={StaticResource ListViewItemSelectionIndicatorCornerRadiusProxy}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" RenderTransformOrigin="0.5,0.5">
                  <Rectangle.RenderTransform>
                    <ScaleTransform x:Name="PillTransform" ScaleY="1" />
                  </Rectangle.RenderTransform>
                </Rectangle>
              </Grid>
              <Grid x:Name="ContentPresenterGrid" Margin="0,0,0,0" Background="Transparent">
                <Grid.RenderTransform>
                  <TranslateTransform x:Name="ContentPresenterTranslateTransform" />
                </Grid.RenderTransform>
                <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
              <Border x:Name="MultiSelectSquare" Width="{DynamicResource CheckBoxSize}" Height="{DynamicResource CheckBoxSize}" Margin="12,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{DynamicResource ListViewItemCheckBoxBrush}" BorderBrush="{DynamicResource ListViewItemCheckBoxBorderBrush}" BorderThickness="1" CornerRadius="{DynamicResource ListViewItemCheckBoxCornerRadius}" Visibility="Collapsed">
                <Border.Clip>
                  <RectangleGeometry Rect="0,0,20,20">
                    <RectangleGeometry.Transform>
                      <TranslateTransform x:Name="MultiSelectClipTransform" />
                    </RectangleGeometry.Transform>
                  </RectangleGeometry>
                </Border.Clip>
                <Border.RenderTransform>
                  <TranslateTransform x:Name="MultiSelectCheckBoxTransform" />
                </Border.RenderTransform>
                <local:FontIcon x:Name="MultiSelectCheck" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource CheckBoxGlyphSize}" Glyph="{DynamicResource CheckBoxCheckedGlyph}" Opacity="0" Visibility="Collapsed" />
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="1,0,0,0" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="{DynamicResource ListViewItemPillMinScale}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{DynamicResource ListViewItemPillMinScale}" />
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="SelectedInactive" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="MultiSelectStates">
                <VisualState x:Name="MultiSelectDisabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="-32" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="32" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                      <DiscreteObjectKeyFrame KeyTime="0:0:0.333" Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedBackgroundGrid" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultiSelectEnabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.333" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedBackgroundGrid" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterGrid" Storyboard.TargetProperty="Margin">
                      <DiscreteThicknessKeyFrame KeyTime="0" Value="32,0,0,0" />
                    </ThicknessAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="LayoutRoot" Property="Opacity" Value="{DynamicResource ListViewItemDisabledThemeOpacity}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxDisabledBorderBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxDisabledBrush}" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Pressed" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="False">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Normal" />
            </Trigger>
            <DataTrigger Binding="{Binding SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Value="Single">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="MultiSelectDisabled" />
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Value="Extended">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="MultiSelectDisabled" />
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Value="Multiple">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="MultiSelectEnabled" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ListViewItemForegroundPointerOver}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxPointerOverBorderBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxPointerOverBrush}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ListViewItemForegroundPointerOver}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxPressedBorderBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxPressedBrush}" />
            </MultiTrigger>
            <!--  Selected  -->
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="MultiSelectCheck" Property="Opacity" Value="1" />
              <Setter TargetName="PressedBackground" Property="Opacity" Value="1" />
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundSelected}" />
              <Setter Property="Foreground" Value="{DynamicResource ListViewItemForegroundSelected}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxSelectedBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxSelectedBrush}" />
              <Setter TargetName="MultiSelectCheck" Property="Foreground" Value="{DynamicResource ListViewItemCheckBrush}" />
            </Trigger>
            <!--  SelectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundSelectedPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ListViewItemForegroundSelectedPointerOver}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListViewItemSelectionIndicatorPointerOverBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxSelectedPointerOverBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxSelectedPointerOverBrush}" />
              <Setter TargetName="MultiSelectCheck" Property="Foreground" Value="{DynamicResource ListViewItemCheckBrush}" />
            </MultiTrigger>
            <!--  SelectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundSelectedPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ListViewItemForegroundSelectedPressed}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListViewItemSelectionIndicatorPressedBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxSelectedPressedBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxSelectedPressedBrush}" />
              <Setter TargetName="MultiSelectCheck" Property="Foreground" Value="{DynamicResource ListViewItemCheckPressedBrush}" />
            </MultiTrigger>
            <!--  SelectedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ListViewItemBackgroundSelectedDisabled}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource ListViewItemSelectionIndicatorDisabledBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="BorderBrush" Value="{DynamicResource ListViewItemCheckBoxSelectedDisabledBrush}" />
              <Setter TargetName="MultiSelectSquare" Property="Background" Value="{DynamicResource ListViewItemCheckBoxSelectedDisabledBrush}" />
              <Setter TargetName="MultiSelectCheck" Property="Foreground" Value="{DynamicResource ListViewItemCheckDisabledBrush}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="ListViewItem" />
  <ControlTemplate x:Key="GridViewTemplate" TargetType="ListView">
    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
      <local:ScrollViewerEx Padding="{TemplateBinding Padding}" chelper:ScrollViewerHelper.AutoHideScrollBars="{TemplateBinding chelper:ScrollViewerHelper.AutoHideScrollBars}" Focusable="false" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <ContentPresenter Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Header}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.HeaderTemplate}" />
          <ItemsPresenter Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          <ContentPresenter Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Footer}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.FooterTemplate}" />
        </Grid>
      </local:ScrollViewerEx>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="true" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="BaseListViewStyle" TargetType="ListView">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultListViewItemStyle}" />
    <Setter Property="chelper:ScrollViewerHelper.AutoHideScrollBars" Value="{DynamicResource AutoHideScrollBars}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListView">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <local:ScrollViewerEx Padding="{TemplateBinding Padding}" chelper:ScrollViewerHelper.AutoHideScrollBars="{TemplateBinding chelper:ScrollViewerHelper.AutoHideScrollBars}" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentPresenter Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Header}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.HeaderTemplate}" />
                <ItemsPresenter Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ContentPresenter Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:ListViewHelper.Footer}" ContentTemplate="{TemplateBinding chelper:ListViewHelper.FooterTemplate}" />
              </Grid>
            </local:ScrollViewerEx>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="GridViewColumnHeader">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource ListViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutSeparatorBackground}" />
    <Setter Property="BorderThickness" Value="0,0,1,1" />
    <Setter Property="Padding" Value="12,0,12,0" />
    <Setter Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GridViewColumnHeader">
          <Grid SnapsToDevicePixels="true">
            <!--  GridViewColumnHeader Content  -->
            <Border x:Name="ContentContainer" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper" Background="Transparent" Style="{StaticResource GridViewColumnHeaderGripper}" />
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ContentContainer" Property="Background" Value="{DynamicResource ListViewItemBackgroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ContentContainer" Property="Background" Value="{DynamicResource ListViewItemBackgroundPressed}" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
              <Setter Property="MinHeight" Value="{DynamicResource GridViewColumnHeaderMinHeight}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ContentContainer" Property="Opacity" Value="{DynamicResource ListViewItemDisabledThemeOpacity}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="Padding">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Template">
          <Setter.Value>
            <!--  The same as normal header, just no gripper.  -->
            <ControlTemplate TargetType="GridViewColumnHeader">
              <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
              <ControlTemplate.Triggers>
                <Trigger Property="Height" Value="Auto">
                  <Setter Property="MinHeight" Value="{DynamicResource GridViewColumnHeaderMinHeight}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role" Value="Floating">
        <Setter Property="Opacity" Value="{DynamicResource ListViewItemReorderTargetThemeOpacity}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="GridViewColumnHeader">
              <Canvas Name="PART_FloatingHeaderCanvas">
                <Rectangle Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Fill="{DynamicResource SystemControlBackgroundBaseHighBrush}" Opacity="0.3034" />
              </Canvas>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}" BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="ListViewItem">
    <Setter Property="Padding" Value="6,0" />
    <Setter Property="Background" Value="{DynamicResource GridViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource GridViewItemForeground}" />
    <Setter Property="MinWidth" Value="{DynamicResource GridViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource GridViewItemMinHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Border x:Name="LayoutRoot" Margin="0,4" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
            <Grid>
              <Rectangle x:Name="PressedBackground" Width="3.5" Margin="0,10" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{DynamicResource GridViewItemSelectedBorderBrush}" Opacity="0" RadiusX="{Binding Value, Source={StaticResource ListViewItemSelectionIndicatorCornerRadiusProxy}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Value, Source={StaticResource ListViewItemSelectionIndicatorCornerRadiusProxy}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                  <ScaleTransform x:Name="PillTransform" ScaleY="1" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <GridViewRowPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="1,0,0,0" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="{DynamicResource ListViewItemPillMinScale}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PillTransform" Storyboard.TargetProperty="ScaleY">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{DynamicResource ListViewItemPillMinScale}" />
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ListViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="SelectedInactive" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="LayoutRoot" Property="Opacity" Value="{DynamicResource ListViewItemDisabledThemeOpacity}" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Pressed" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="False">
              <Setter TargetName="LayoutRoot" Property="chelper:ControlHelper.VisualState" Value="Normal" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundPointerOver}" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource GridViewItemForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="PressedBackground" Property="Opacity" Value="1" />
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundSelected}" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource GridViewItemForegroundSelected}" />
            </Trigger>
            <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundPressed}" />
            </Trigger>
            <!--  SelectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundSelectedPointerOver}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource GridViewItemSelectedPointerOverBorderBrush}" />
            </MultiTrigger>
            <!--  SelectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundSelectedPressed}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource GridViewItemSelectedPressedBorderBrush}" />
            </MultiTrigger>
            <!--  SelectedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource GridViewItemBackgroundSelectedDisabled}" />
              <Setter TargetName="PressedBackground" Property="Fill" Value="{DynamicResource GridViewItemSelectedDisabledBorderBrush}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static GridView.GridViewStyleKey}" BasedOn="{StaticResource BaseListViewStyle}" TargetType="ListView">
    <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static GridView.GridViewItemContainerStyleKey}}" />
    <Setter Property="Template" Value="{StaticResource GridViewTemplate}" />
  </Style>
  <Style x:Key="DefaultMenuStyle" TargetType="Menu">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource MenuBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Height" Value="{DynamicResource MenuBarHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Menu">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ItemsPresenter VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultMenuStyle}" TargetType="Menu" />
  <Style x:Key="DefaultMenuItemSeparatorStyle" TargetType="Separator">
    <Setter Property="Background" Value="{DynamicResource MenuFlyoutSeparatorBackground}" />
    <Setter Property="Padding" Value="{DynamicResource MenuFlyoutSeparatorThemePadding}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Rectangle Height="{DynamicResource MenuFlyoutSeparatorHeight}" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" BasedOn="{StaticResource DefaultMenuItemSeparatorStyle}" TargetType="Separator" />
  <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}" TargetType="MenuItem">
    <Border x:Name="ContentRoot" Margin="{DynamicResource MenuBarItemMargin}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
      <Grid>
        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
        <local:ContentPresenterEx Margin="{DynamicResource MenuBarItemButtonPadding}" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPointerOver}" />
        <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPressed}" />
        <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPressed}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}" TargetType="MenuItem">
    <Border x:Name="ContentRoot" Margin="{DynamicResource MenuBarItemMargin}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
      <Grid>
        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
        <local:ContentPresenterEx Margin="{DynamicResource MenuBarItemButtonPadding}" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <primitives:MenuPopup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
          <primitives:ThemeShadowChrome CornerRadius="{DynamicResource OverlayCornerRadius}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
            <Border x:Name="SubMenuRoot" MinHeight="{DynamicResource MenuFlyoutThemeMinHeight}" Background="{DynamicResource MenuFlyoutPresenterBackground}" BorderBrush="{DynamicResource MenuFlyoutPresenterBorderBrush}" BorderThickness="{DynamicResource MenuFlyoutPresenterBorderThemeThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
              <local:ScrollViewerEx x:Name="SubMenuScrollViewer" MinWidth="{DynamicResource FlyoutThemeMinWidth}" Margin="{DynamicResource MenuFlyoutPresenterThemePadding}" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                               TypeInTargetAssembly={x:Type FrameworkElement}}}">
                <ItemsPresenter Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" RenderOptions.ClearTypeHint="Enabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </local:ScrollViewerEx>
            </Border>
          </primitives:ThemeShadowChrome>
        </primitives:MenuPopup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="IsSuspendingAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPointerOver}" />
        <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPointerOver}" />
      </Trigger>
      <!--  Selected  -->
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundSelected}" />
        <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushSelected}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPressed}" />
        <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPressed}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}" TargetType="MenuItem">
    <Border x:Name="LayoutRoot" Margin="{DynamicResource MenuFlyoutItemMargin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
      <Grid x:Name="AnimationRoot">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemCheckColumnGroup" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Viewbox x:Name="IconRoot" Grid.Column="1" Width="16" Height="16" Margin="0,0,12,0" HorizontalAlignment="Left" VerticalAlignment="Center">
          <ContentPresenter x:Name="IconContent" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Viewbox>
        <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="Header" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <local:FontIcon x:Name="SubItemChevron" Grid.Column="3" Margin="{DynamicResource MenuFlyoutItemChevronMargin}" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource MenuFlyoutSubItemChevron}" Glyph="" />
        <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PlacementTarget="{Binding ElementName=LayoutRoot}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
          <Popup.PlacementRectangle>
            <MultiBinding>
              <MultiBinding.Converter>
                <converters:PlacementRectangleConverter Margin="4,-1" />
              </MultiBinding.Converter>
              <Binding ElementName="LayoutRoot" Path="ActualWidth" />
              <Binding ElementName="LayoutRoot" Path="ActualHeight" />
            </MultiBinding>
          </Popup.PlacementRectangle>
          <primitives:ThemeShadowChrome CornerRadius="{DynamicResource OverlayCornerRadius}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
            <Border x:Name="SubMenuRoot" MinHeight="{DynamicResource MenuFlyoutThemeMinHeight}" Background="{DynamicResource MenuFlyoutPresenterBackground}" BorderBrush="{DynamicResource MenuFlyoutPresenterBorderBrush}" BorderThickness="{DynamicResource MenuFlyoutPresenterBorderThemeThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
              <local:ScrollViewerEx x:Name="SubMenuScrollViewer" MinWidth="{DynamicResource FlyoutThemeMinWidth}" Margin="{DynamicResource MenuFlyoutPresenterThemePadding}" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                               TypeInTargetAssembly={x:Type FrameworkElement}}}">
                <ItemsPresenter Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" RenderOptions.ClearTypeHint="Enabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </local:ScrollViewerEx>
            </Border>
          </primitives:ThemeShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="IconRoot" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundPointerOver}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushPointerOver}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPointerOver}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPointerOver}" />
        <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundPressed}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushPressed}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPressed}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPressed}" />
        <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronPressed}" />
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundSubMenuOpened}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushSubMenuOpened}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundSubMenuOpened}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundSubMenuOpened}" />
        <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronSubMenuOpened}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundDisabled}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushDisabled}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundDisabled}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundDisabled}" />
        <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronDisabled}" />
      </Trigger>
      <!--<Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false" >
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>-->
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="NavigationBackButtonNormalStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource NavigationViewBackButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIcons}" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="Height" Value="{DynamicResource NavigationBackButtonHeight}" />
    <Setter Property="Width" Value="{DynamicResource NavigationBackButtonWidth}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Margin" Value="4,2" />
    <Setter Property="Content" Value="" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="RootGrid" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <local:FontIcon x:Name="Content" Width="16" Height="16" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Glyph="{TemplateBinding Content}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPointerOver}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPressed}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationBackButtonSmallStyle" BasedOn="{StaticResource NavigationBackButtonNormalStyle}" TargetType="Button">
    <Setter Property="Margin" Value="4,2,0,2" />
  </Style>
  <Style x:Key="PaneToggleButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIcons}" />
    <Setter Property="MinHeight" Value="{DynamicResource PaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="{DynamicResource PaneToggleButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}" />
    <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewToggleBorderThickness}" />
    <Setter Property="Padding" Value="{DynamicResource NavigationViewItemButtonMargin}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="LayoutRoot" Height="{TemplateBinding MinHeight}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition chelper:RowDefinitionHelper.PixelHeight="{DynamicResource PaneToggleButtonHeight}" />
              </Grid.RowDefinitions>
              <Border Width="{TemplateBinding MinWidth}">
                <local:FontIcon x:Name="Icon" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Glyph="" />
              </Border>
              <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="1" Margin="4,0,0,0" VerticalAlignment="Center" Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPointerOver}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPressed}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationViewPaneSearchButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="FontFamily" Value="{DynamicResource SymbolThemeFontFamily}" />
    <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewToggleBorderThickness}" />
    <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}" />
    <Setter Property="Content" Value="" />
    <Setter Property="MinHeight" Value="36" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-4,0" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
  </Style>
  <Style x:Key="NavigationViewOverflowButtonStyleWhenPaneOnTop" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{DynamicResource TopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{DynamicResource TopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}">
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <local:FontIcon x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="16" Foreground="{TemplateBinding Foreground}" Glyph="" IsHitTestVisible="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <!--  PointerOver  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPointerOver}" />
              <Setter TargetName="PointerRectangle" Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPointerOver}" />
            </Trigger>
            <!--  Pressed  -->
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPressed}" />
              <Setter TargetName="PointerRectangle" Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPressed}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPressed}" />
            </Trigger>
            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{DynamicResource TopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{DynamicResource TopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="True" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}">
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <local:FontIcon x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="20" Foreground="{TemplateBinding Foreground}" Glyph="" IsHitTestVisible="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <!--  PointerOver  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPointerOver}" />
              <Setter TargetName="PointerRectangle" Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPointerOver}" />
            </Trigger>
            <!--  Pressed  -->
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPressed}" />
              <Setter TargetName="PointerRectangle" Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPressed}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPressed}" />
            </Trigger>
            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationViewTitleHeaderContentControlTextStyle" TargetType="ContentControl">
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="FontSize" Value="28" />
    <!--<Setter Property="FontFamily" Value="XamlAutoFontFamily" />-->
    <Setter Property="Margin" Value="{DynamicResource NavigationViewHeaderMargin}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="PipsPagerNavigationButtonBaseStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource PipsPagerNavigationButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource PipsPagerNavigationButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource PipsPagerNavigationButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource PipsPagerNavigationButtonBorderThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIconsFilled}" />
    <Setter Property="FontSize" Value="{DynamicResource PipsPagerNavigationButtonFontSize}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Width" Value="{DynamicResource PipsPagerNavigationButtonWidth}" />
    <Setter Property="Height" Value="{DynamicResource PipsPagerNavigationButtonHeight}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Border RenderTransformOrigin="0.5, 0.5">
              <Border.RenderTransform>
                <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1" />
              </Border.RenderTransform>
              <local:FontIcon x:Name="Content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Glyph="{TemplateBinding Content}" />
            </Border>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource PipsPagerNavigationButtonScalePressed}" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource PipsPagerNavigationButtonScalePressed}" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource PipsPagerNavigationButtonScalePressed}" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource PipsPagerNavigationButtonScalePressed}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerNavigationButtonBackgroundPointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerNavigationButtonBorderBrushPressed}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerNavigationButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerNavigationButtonBackgroundPressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerNavigationButtonBorderBrushPressed}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerNavigationButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerNavigationButtonBackgroundDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerNavigationButtonBorderBrushDisabled}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerNavigationButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PipsPagerPreviousPageButtonStyle" BasedOn="{StaticResource PipsPagerNavigationButtonBaseStyle}" TargetType="Button">
    <Setter Property="Content" Value="{DynamicResource PipsPagerPreviousPageButtonGlyph}" />
  </Style>
  <Style x:Key="PipsPagerNextPageButtonStyle" BasedOn="{StaticResource PipsPagerNavigationButtonBaseStyle}" TargetType="Button">
    <Setter Property="Content" Value="{DynamicResource PipsPagerNextPageButtonGlyph}" />
  </Style>
  <Style x:Key="PipsPagerButtonBaseStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource PipsPagerSelectionIndicatorBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource PipsPagerSelectionIndicatorForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource PipsPagerSelectionIndicatorBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource PipsPagerButtonBorderThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIconsFilled}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Content" Value="{DynamicResource PipsPagerNormalGlyph}" />
    <Setter Property="FontSize" Value="{DynamicResource PipsPagerNormalGlyphFontSize}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="RootGrid" Width="{DynamicResource PipsPagerHorizontalOrientationButtonWidth}" Height="{DynamicResource PipsPagerHorizontalOrientationButtonHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <local:FontIcon x:Name="Content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Glyph="{TemplateBinding Content}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="OrientationStates">
                <primitives:VisualStateGroupListener.Listener>
                  <primitives:VisualStateGroupListener x:Name="OrientationStatesListener" />
                </primitives:VisualStateGroupListener.Listener>
                <VisualState x:Name="HorizontalOrientation" />
                <VisualState x:Name="VerticalOrientation" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerSelectionIndicatorBackgroundPointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerSelectionIndicatorBorderBrushPointerOver}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerSelectionIndicatorForegroundPointerOver}" />
              <Setter TargetName="Content" Property="FontSize" Value="{DynamicResource PipsPagerSelectedGlyphFontSize}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerSelectionIndicatorBackgroundPressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerSelectionIndicatorBorderBrushPressed}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerSelectionIndicatorForegroundPressed}" />
              <Setter TargetName="Content" Property="FontSize" Value="{DynamicResource PipsPagerNormalGlyphFontSize}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource PipsPagerSelectionIndicatorBackgroundDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource PipsPagerSelectionIndicatorBorderBrushDisabled}" />
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource PipsPagerSelectionIndicatorForegroundDisabled}" />
            </Trigger>
            <!--  VerticalOrientation  -->
            <Trigger SourceName="OrientationStatesListener" Property="CurrentStateName" Value="VerticalOrientation">
              <Setter TargetName="RootGrid" Property="Width" Value="{DynamicResource PipsPagerVerticalOrientationButtonWidth}" />
              <Setter TargetName="RootGrid" Property="Height" Value="{DynamicResource PipsPagerVerticalOrientationButtonHeight}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PipsPagerSelectedPipButtonStyle" BasedOn="{StaticResource PipsPagerButtonBaseStyle}" TargetType="Button">
    <Setter Property="Content" Value="{DynamicResource PipsPagerSelectedGlyph}" />
    <Setter Property="FontSize" Value="{DynamicResource PipsPagerSelectedGlyphFontSize}" />
    <Setter Property="Background" Value="{DynamicResource PipsPagerSelectionIndicatorBackgroundSelected}" />
    <Setter Property="BorderBrush" Value="{DynamicResource PipsPagerSelectionIndicatorBorderBrushSelected}" />
    <Setter Property="Foreground" Value="{DynamicResource PipsPagerSelectionIndicatorForegroundSelected}" />
  </Style>
  <Style x:Key="PipsPagerNormalPipButtonStyle" BasedOn="{StaticResource PipsPagerButtonBaseStyle}" TargetType="Button">
    <Setter Property="Content" Value="{DynamicResource PipsPagerNormalGlyph}" />
    <Setter Property="FontSize" Value="{DynamicResource PipsPagerNormalGlyphFontSize}" />
  </Style>
  <Style x:Key="TabItemPivotStyle" TargetType="TabItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundUnselected}" />
    <Setter Property="Padding" Value="{DynamicResource PivotHeaderItemMargin}" />
    <Setter Property="Height" Value="48" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource PivotHeaderItemSelectedPipeCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Border x:Name="Border" Padding="{TemplateBinding Padding}" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" Focusable="False" FontFamily="{DynamicResource PivotHeaderItemFontFamily}" FontSize="{DynamicResource PivotHeaderItemFontSize}" FontWeight="{DynamicResource PivotHeaderItemThemeFontWeight}" Foreground="{DynamicResource PivotHeaderItemForegroundUnselected}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              <Rectangle x:Name="SelectedPipe" Height="3" Margin="0,0,0,2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource PivotHeaderItemSelectedPipeFill}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                           Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                           Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                  <ScaleTransform x:Name="SelectedPipeTransform" ScaleX="1" />
                </Rectangle.RenderTransform>
              </Rectangle>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedPipeTransform" Storyboard.TargetProperty="ScaleX">
                      <SplineDoubleKeyFrame KeySpline="1,0,0,0" KeyTime="{DynamicResource PivotHeaderItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedPipeTransform" Storyboard.TargetProperty="ScaleX">
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource PivotHeaderItemScaleAnimationDuration}" Value="{DynamicResource PivotHeaderItemSelectedPipeMinScale}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedPipeTransform" Storyboard.TargetProperty="ScaleX">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{DynamicResource PivotHeaderItemSelectedPipeMinScale}" />
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource PivotHeaderItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Border" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="Border" Property="chelper:ControlHelper.VisualState" Value="Pressed" />
            </Trigger>
            <Trigger SourceName="Border" Property="chelper:PressHelper.IsPressed" Value="False">
              <Setter TargetName="Border" Property="chelper:ControlHelper.VisualState" Value="Normal" />
            </Trigger>
            <!--  Unselected  -->
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="SelectedPipe" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!--  Selected  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="Border" Property="IsMouseOver" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundSelected}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundSelected}" />
            </MultiTrigger>
            <!--  UnselectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition SourceName="Border" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundUnselectedPointerOver}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundUnselectedPointerOver}" />
            </MultiTrigger>
            <!--  SelectedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="Border" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundSelectedPointerOver}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundSelectedPointerOver}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundDisabled}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundDisabled}" />
              <Setter TargetName="SelectedPipe" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!--  UnselectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition SourceName="Border" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundUnselectedPressed}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundUnselectedPressed}" />
            </MultiTrigger>
            <!--  SelectedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition SourceName="Border" Property="chelper:PressHelper.IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource PivotHeaderItemForegroundSelectedPressed}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource PivotHeaderItemBackgroundSelectedPressed}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabControlPivotStyle" TargetType="TabControl">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{DynamicResource PivotBackground}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemPivotStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabControl">
          <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronLeft">M 14.091797 19.970703 L 4.111328 10 L 14.091797 0.029297 L 14.970703 0.908203 L 5.888672 10 L 14.970703 19.091797 Z</StreamGeometry>
            <StreamGeometry x:Key="ChevronRight">M 5.029297 19.091797 L 14.111328 10 L 5.029297 0.908203 L 5.908203 0.029297 L 15.888672 10 L 5.908203 19.970703 Z</StreamGeometry>
          </ControlTemplate.Resources>
          <Grid x:Name="templateRoot" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" ClipToBounds="true" KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="true">
            <Grid.Resources>
              <Style x:Key="BaseContentControlStyle" TargetType="ContentControl">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
                <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="ContentControl">
                      <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="TitleContentControlStyle" BasedOn="{StaticResource BaseContentControlStyle}" TargetType="ContentControl">
                <Setter Property="FontFamily" Value="{DynamicResource PivotTitleFontFamily}" />
                <Setter Property="FontWeight" Value="{DynamicResource PivotTitleThemeFontWeight}" />
                <Setter Property="FontSize" Value="{DynamicResource PivotTitleFontSize}" />
              </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ContentControl x:Name="TitleContentControl" Margin="{DynamicResource PivotPortraitThemePadding}" Content="{TemplateBinding chelper:PivotHelper.Title}" ContentTemplate="{TemplateBinding chelper:PivotHelper.TitleTemplate}" IsTabStop="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource TitleContentControlStyle}" Visibility="Collapsed" />
            <Grid Grid.Row="1" Margin="{TemplateBinding Padding}">
              <Grid.Resources>
                <ControlTemplate x:Key="NextTemplate" TargetType="ButtonBase">
                  <Border x:Name="Root" Background="{DynamicResource PivotNextButtonBackground}" BorderBrush="{DynamicResource PivotNextButtonBorderBrush}" BorderThickness="{DynamicResource PivotNavButtonBorderThemeThickness}">
                    <local:FontIconFallback x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource ChevronRight}" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Foreground="{DynamicResource PivotNextButtonForeground}" UseLayoutRounding="False" />
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="Root" Property="Background" Value="{DynamicResource PivotNextButtonBackgroundPointerOver}" />
                      <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource PivotNextButtonBorderBrushPointerOver}" />
                      <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource PivotNextButtonForegroundPointerOver}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                      <Setter TargetName="Root" Property="Background" Value="{DynamicResource PivotNextButtonBackgroundPressed}" />
                      <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource PivotNextButtonBorderBrushPressed}" />
                      <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource PivotNextButtonForegroundPressed}" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
                <ControlTemplate x:Key="PreviousTemplate" TargetType="ButtonBase">
                  <Border x:Name="Root" Background="{DynamicResource PivotPreviousButtonBackground}" BorderBrush="{DynamicResource PivotPreviousButtonBorderBrush}" BorderThickness="{DynamicResource PivotNavButtonBorderThemeThickness}">
                    <local:FontIconFallback x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource ChevronLeft}" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Foreground="{DynamicResource PivotPreviousButtonForeground}" UseLayoutRounding="False" />
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="Root" Property="Background" Value="{DynamicResource PivotPreviousButtonBackgroundPointerOver}" />
                      <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource PivotPreviousButtonBorderBrushPointerOver}" />
                      <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource PivotPreviousButtonForegroundPointerOver}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                      <Setter TargetName="Root" Property="Background" Value="{DynamicResource PivotPreviousButtonBackgroundPressed}" />
                      <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource PivotPreviousButtonBorderBrushPressed}" />
                      <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource PivotPreviousButtonForegroundPressed}" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="TopHeight" Height="Auto" />
                <RowDefinition x:Name="BottomHeight" Height="*" />
              </Grid.RowDefinitions>
              <Grid x:Name="HeaderPanel" Grid.Row="0" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="LeftHeaderPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:PivotHelper.LeftHeader}" ContentTemplate="{TemplateBinding chelper:PivotHelper.LeftHeaderTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <primitives:PivotHeaderScrollViewer x:Name="ScrollViewer" Grid.Column="1" VerticalContentAlignment="Stretch" HorizontalScrollBarVisibility="Hidden" Orientation="Horizontal" Style="{DynamicResource {x:Type ScrollViewer}}" Template="{DynamicResource ScrollViewerScrollBarlessTemplate}" VerticalScrollBarVisibility="Disabled">
                  <StackPanel Panel.ZIndex="1" Background="{DynamicResource PivotHeaderBackground}" IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Once" Orientation="Horizontal" />
                </primitives:PivotHeaderScrollViewer>
                <RepeatButton x:Name="PreviousButton" Grid.Column="1" Width="20" Height="36" Margin="{DynamicResource PivotNavButtonMargin}" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Transparent" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding ElementName=ScrollViewer}" FocusVisualStyle="{x:Null}" IsEnabled="False" IsTabStop="False" Opacity="0" Template="{StaticResource PreviousTemplate}" />
                <RepeatButton x:Name="NextButton" Grid.Column="1" Width="20" Height="36" Margin="{DynamicResource PivotNavButtonMargin}" HorizontalAlignment="Right" VerticalAlignment="Top" Background="Transparent" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding ElementName=ScrollViewer}" FocusVisualStyle="{x:Null}" IsEnabled="False" IsTabStop="False" Opacity="0" Template="{StaticResource NextTemplate}" />
                <ContentPresenter x:Name="RightHeaderPresenter" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:PivotHelper.RightHeader}" ContentTemplate="{TemplateBinding chelper:PivotHelper.RightHeaderTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
              <Border x:Name="ContentPanel" Grid.Row="1" Background="{DynamicResource PivotItemBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                <ContentPresenter x:Name="PART_SelectedContentHost" Margin="{DynamicResource PivotItemMargin}" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Border>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="TitleContentControl" Property="HasContent" Value="True">
              <Setter TargetName="TitleContentControl" Property="Visibility" Value="Visible" />
            </Trigger>
            <!--  PreviousButtonVisible  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="HeaderPanel" Property="IsMouseOver" Value="True" />
                <Condition SourceName="ContentPanel" Property="IsMouseOver" Value="False" />
                <Condition SourceName="ScrollViewer" Property="CanScrollLeft" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PreviousButton" Property="Opacity" Value="1" />
              <Setter TargetName="PreviousButton" Property="IsEnabled" Value="True" />
            </MultiTrigger>
            <!--  NextButtonVisible  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="HeaderPanel" Property="IsMouseOver" Value="True" />
                <Condition SourceName="ContentPanel" Property="IsMouseOver" Value="False" />
                <Condition SourceName="ScrollViewer" Property="CanScrollRight" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="NextButton" Property="Opacity" Value="1" />
              <Setter TargetName="NextButton" Property="IsEnabled" Value="True" />
            </MultiTrigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="TopHeight" Property="Height" Value="*" />
              <Setter TargetName="BottomHeight" Property="Height" Value="Auto" />
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultProgressBarStyle" TargetType="ProgressBar">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource ProgressBarForeground}" />
    <Setter Property="Background" Value="{DynamicResource ProgressBarBackground}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ProgressBarBorderThemeThickness}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ProgressBarBorderBrush}" />
    <Setter Property="MinHeight" Value="{DynamicResource ProgressBarMinHeight}" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ProgressBarCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ProgressBar">
          <Grid x:Name="LayoutRoot">
            <Border x:Name="ProgressBarRoot" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <Grid Height="{TemplateBinding MinHeight}">
                <Rectangle x:Name="PART_Track" Width="{TemplateBinding Width}" Height="{DynamicResource ProgressBarTrackHeight}" VerticalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="{Binding Value, Source={StaticResource ProgressBarTrackCornerRadiusProxy}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Value, Source={StaticResource ProgressBarTrackCornerRadiusProxy}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <Grid x:Name="PART_Indicator" HorizontalAlignment="Left" ClipToBounds="true">
                  <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" Opacity="0" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                   Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                   Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Grid x:Name="Animation" ClipToBounds="True">
                    <Rectangle x:Name="PART_GlowRect" Width="100" Margin="-100,0,0,0" HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                       Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                       Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  </Grid>
                </Grid>
              </Grid>
            </Border>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Indeterminate" To="Determinate">
                    <Storyboard>
                      <animation:FadeInThemeAnimation TargetName="Indicator" />
                      <animation:FadeOutThemeAnimation TargetName="Animation" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Determinate" To="Indeterminate">
                    <Storyboard>
                      <animation:FadeOutThemeAnimation TargetName="Indicator" />
                      <animation:FadeInThemeAnimation TargetName="Animation" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="LayoutRoot" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="False">
              <Setter TargetName="Indicator" Property="Opacity" Value="1" />
              <Setter TargetName="Animation" Property="Opacity" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultProgressBarStyle}" TargetType="ProgressBar" />
  <Style x:Key="DefaultRadioButtonStyle" TargetType="RadioButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource RadioButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource RadioButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource RadioButtonBorderBrush}" />
    <Setter Property="Padding" Value="8,6,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-7,-3,-7,-3" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Border x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid Height="32" VerticalAlignment="Top">
                <Ellipse x:Name="OuterEllipse" Width="20" Height="20" Fill="{DynamicResource RadioButtonOuterEllipseFill}" Stroke="{DynamicResource RadioButtonOuterEllipseStroke}" StrokeThickness="{DynamicResource RadioButtonBorderThemeThickness}" UseLayoutRounding="False" />
                <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                <Ellipse x:Name="CheckOuterEllipse" Width="20" Height="20" Fill="{DynamicResource RadioButtonOuterEllipseCheckedFill}" Opacity="0" Stroke="{DynamicResource RadioButtonOuterEllipseCheckedStroke}" StrokeThickness="{DynamicResource RadioButtonBorderThemeThickness}" UseLayoutRounding="False" />
                <Ellipse x:Name="CheckGlyph" Width="{DynamicResource RadioButtonCheckGlyphSize}" Height="{DynamicResource RadioButtonCheckGlyphSize}" Fill="{DynamicResource RadioButtonCheckGlyphFill}" Opacity="0" Stroke="{DynamicResource RadioButtonCheckGlyphStroke}" UseLayoutRounding="False" />
                <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                <Border x:Name="PressedCheckGlyph" Width="4" Height="4" Background="{DynamicResource RadioButtonCheckGlyphFill}" BorderBrush="{DynamicResource RadioButtonCheckGlyphStroke}" CornerRadius="6" Opacity="0" UseLayoutRounding="False" />
              </Grid>
              <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Width">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="14" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Height">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="14" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Width">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="10" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Height">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="10" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedCheckGlyph" Storyboard.TargetProperty="Width">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="10" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedCheckGlyph" Storyboard.TargetProperty="Height">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="10" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Width">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="14" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Height">
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="14" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="OuterEllipse" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CheckOuterEllipse" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PressedCheckGlyph" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource RadioButtonForegroundPointerOver}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource RadioButtonBackgroundPointerOver}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource RadioButtonBorderBrushPointerOver}" />
              <Setter TargetName="OuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseStrokePointerOver}" />
              <Setter TargetName="OuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseFillPointerOver}" />
              <Setter TargetName="CheckOuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseCheckedStrokePointerOver}" />
              <Setter TargetName="CheckOuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseCheckedFillPointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Fill" Value="{DynamicResource RadioButtonCheckGlyphFillPointerOver}" />
              <Setter TargetName="CheckGlyph" Property="Stroke" Value="{DynamicResource RadioButtonCheckGlyphStrokePointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource RadioButtonForegroundPressed}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource RadioButtonBackgroundPressed}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource RadioButtonBorderBrushPressed}" />
              <Setter TargetName="OuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseStrokePressed}" />
              <Setter TargetName="OuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseFillPressed}" />
              <Setter TargetName="CheckOuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseCheckedStrokePressed}" />
              <Setter TargetName="CheckOuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseCheckedFillPressed}" />
              <Setter TargetName="CheckGlyph" Property="Fill" Value="{DynamicResource RadioButtonCheckGlyphFillPressed}" />
              <Setter TargetName="CheckGlyph" Property="Stroke" Value="{DynamicResource RadioButtonCheckGlyphStrokePressed}" />
              <Setter TargetName="PressedCheckGlyph" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource RadioButtonForegroundDisabled}" />
              <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource RadioButtonBackgroundDisabled}" />
              <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource RadioButtonBorderBrushDisabled}" />
              <Setter TargetName="OuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseStrokeDisabled}" />
              <Setter TargetName="OuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseFillDisabled}" />
              <Setter TargetName="CheckOuterEllipse" Property="Stroke" Value="{DynamicResource RadioButtonOuterEllipseCheckedStrokeDisabled}" />
              <Setter TargetName="CheckOuterEllipse" Property="Fill" Value="{DynamicResource RadioButtonOuterEllipseCheckedFillDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Fill" Value="{DynamicResource RadioButtonCheckGlyphFillDisabled}" />
              <Setter TargetName="CheckGlyph" Property="Stroke" Value="{DynamicResource RadioButtonCheckGlyphStrokeDisabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="CheckGlyph" Property="Stroke" Value="{DynamicResource RadioButtonCheckGlyphStrokeChecked}" />
              <Setter TargetName="PressedCheckGlyph" Property="Background" Value="{DynamicResource RadioButtonCheckGlyphFillPressed}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="RadioButton" />
  <DataTemplate x:Key="BackgroundGlyphDefaultTemplate">
    <!--  -8, -8 are to compensate for the default scale down, plus factoring in margins  -->
    <TextBlock Margin="-8,-8,0,0" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="32" Foreground="{DynamicResource RatingControlUnselectedForeground}" Text="" />
  </DataTemplate>
  <DataTemplate x:Key="ForegroundGlyphDefaultTemplate">
    <!--  -8, -8 are to compensate for the default scale down, plus factoring in margins  -->
    <TextBlock Margin="-8,-8,0,0" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="32" Text="" />
  </DataTemplate>
  <DataTemplate x:Key="BackgroundPathDefaultTemplate">
    <local:FontIconFallback Margin="-8,-8,0,0" HorizontalContentAlignment="Left" VerticalContentAlignment="Top" Data="M 13.828125 12.246094 L 16.25 20 L 10 15.195313 L 3.75 20 L 6.171875 12.246094 L 0 7.5 L 7.65625 7.5 L 10 0 L 12.34375 7.5 L 20 7.5 Z M 13.876953 16.601563 C 13.629557 15.794271 13.38216 14.991862 13.134766 14.194336 C 12.887369 13.396811 12.633463 12.594401 12.373047 11.787109 C 13.043619 11.285808 13.704427 10.78125 14.355469 10.273438 C 15.00651 9.765625 15.664063 9.257813 16.328125 8.75 L 11.425781 8.75 L 10 4.189453 L 8.574219 8.75 L 3.671875 8.75 C 4.335938 9.257813 4.993489 9.765625 5.644531 10.273438 C 6.295572 10.78125 6.95638 11.285808 7.626953 11.787109 C 7.366536 12.594401 7.11263 13.396811 6.865234 14.194336 C 6.617838 14.991862 6.370442 15.794271 6.123047 16.601563 L 10 13.613281 Z" FontSize="32" Foreground="{DynamicResource RatingControlUnselectedForeground}" />
  </DataTemplate>
  <Style x:Key="DefaultRepeatButtonStyle" TargetType="RepeatButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource RepeatButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource RepeatButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource RepeatButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource ControlElevationBorderBrushElevationColor}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <local:ElevationBorder x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </local:ElevationBorder>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource RepeatButtonBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource RepeatButtonBorderBrushPointerOver}" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource RepeatButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource RepeatButtonBackgroundPressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource RepeatButtonBorderBrushPressed}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource RepeatButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource RepeatButtonBackgroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource RepeatButtonBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource RepeatButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultRepeatButtonStyle}" TargetType="RepeatButton" />
  <Style x:Key="ResizeGripDefaultStyle" TargetType="ResizeGrip">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ResizeGrip">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Path Margin="0,0,2,2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z">
              <Path.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" ViewboxUnits="Absolute" Viewport="0,0,3,3" ViewportUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <DrawingGroup.Children>
                        <GeometryDrawing Brush="{DynamicResource ResizeGripForeground}" Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z " />
                      </DrawingGroup.Children>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Path.Fill>
            </Path>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ResizeGripDefaultStyle}" TargetType="ResizeGrip" />
  <Style x:Key="DefaultThumbStyle" TargetType="Thumb">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource ThumbBackground}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="BorderBrush" Value="{DynamicResource ThumbBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Grid SnapsToDevicePixels="True">
            <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <Border x:Name="BackgroundPointerOver" Background="{DynamicResource ThumbBackgroundPointerOver}" BorderBrush="{DynamicResource ThumbBorderBrushPointerOver}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Opacity="0" />
            <Border x:Name="BackgroundPressed" Background="{DynamicResource ThumbBackgroundPressed}" BorderBrush="{DynamicResource ThumbBorderBrushPressed}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Opacity="0" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundPointerOver" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundPressed" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultThumbStyle}" TargetType="Thumb" />
  <ControlTemplate x:Key="HorizontalIncrementTemplate" TargetType="RepeatButton">
    <Border x:Name="Root" Padding="{DynamicResource ScrollBarHorizontalIncreaseMargin}" Background="{DynamicResource ScrollBarButtonBackground}" BorderBrush="{DynamicResource ScrollBarButtonBorderBrush}">
      <local:FontIcon x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource ScrollBarButtonArrowIconFontSize}" Foreground="{DynamicResource ScrollBarButtonArrowForeground}" Glyph="" RenderTransformOrigin="0.5, 0.5">
        <local:FontIcon.RenderTransform>
          <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1" />
        </local:FontIcon.RenderTransform>
      </local:FontIcon>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver" />
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundDisabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalDecrementTemplate" TargetType="RepeatButton">
    <Border x:Name="Root" Padding="{DynamicResource ScrollBarHorizontalDecreaseMargin}" Background="{DynamicResource ScrollBarButtonBackground}" BorderBrush="{DynamicResource ScrollBarButtonBorderBrush}">
      <local:FontIcon x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource ScrollBarButtonArrowIconFontSize}" Foreground="{DynamicResource ScrollBarButtonArrowForeground}" Glyph="" RenderTransformOrigin="0.5, 0.5">
        <local:FontIcon.RenderTransform>
          <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1" />
        </local:FontIcon.RenderTransform>
      </local:FontIcon>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver" />
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundDisabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="VerticalIncrementTemplate" TargetType="RepeatButton">
    <Border x:Name="Root" Padding="{DynamicResource ScrollBarVerticalIncreaseMargin}" Background="{DynamicResource ScrollBarButtonBackground}" BorderBrush="{DynamicResource ScrollBarButtonBorderBrush}">
      <local:FontIcon x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource ScrollBarButtonArrowIconFontSize}" Foreground="{DynamicResource ScrollBarButtonArrowForeground}" Glyph="" RenderTransformOrigin="0.5, 0.5">
        <local:FontIcon.RenderTransform>
          <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1" />
        </local:FontIcon.RenderTransform>
      </local:FontIcon>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver" />
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundDisabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="VerticalDecrementTemplate" TargetType="RepeatButton">
    <Border x:Name="Root" Padding="{DynamicResource ScrollBarVerticalDecreaseMargin}" Background="{DynamicResource ScrollBarButtonBackground}" BorderBrush="{DynamicResource ScrollBarButtonBorderBrush}">
      <local:FontIcon x:Name="Arrow" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="{DynamicResource ScrollBarButtonArrowIconFontSize}" Foreground="{DynamicResource ScrollBarButtonArrowForeground}" Glyph="" RenderTransformOrigin="0.5, 0.5">
        <local:FontIcon.RenderTransform>
          <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1" />
        </local:FontIcon.RenderTransform>
      </local:FontIcon>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver" />
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.016" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:30" Value="{DynamicResource ScrollBarButtonArrowScalePressed}" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Arrow" Property="Foreground" Value="{DynamicResource ScrollBarButtonArrowForegroundDisabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="VerticalThumbTemplate" TargetType="Thumb">
    <Rectangle x:Name="ThumbVisual" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                       Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                       Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" SnapsToDevicePixels="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{DynamicResource ScrollBarThumbStrokeThickness}" />
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="ThumbVisual" Property="Fill" Value="{DynamicResource ScrollBarThumbFillDisabled}" />
        <Setter TargetName="ThumbVisual" Property="Opacity" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalThumbTemplate" TargetType="Thumb">
    <Rectangle x:Name="ThumbVisual" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                       Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                       Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" SnapsToDevicePixels="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{DynamicResource ScrollBarThumbStrokeThickness}" />
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="ThumbVisual" Property="Fill" Value="{DynamicResource ScrollBarThumbFillDisabled}" />
        <Setter TargetName="ThumbVisual" Property="Opacity" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ScrollBarVertical" TargetType="ScrollBar">
    <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
      <Border.Resources>
        <Storyboard x:Key="ExpandedToCollapsedStoryboard">
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="PART_LineDownButton" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="VerticalLargeIncrease" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="VerticalLargeDecrease" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="PART_LineUpButton" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="VerticalTrackRect" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Width">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarContractDuration}" Value="{DynamicResource ScrollBarVerticalThumbMinWidth}" />
          </DoubleAnimationUsingKeyFrames>
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="VerticalThumbTransform" Storyboard.TargetProperty="X">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarContractDuration}" Value="{DynamicResource ScrollBarThumbOffset}" />
          </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ExpandedStoryboard">
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="PART_LineDownButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="VerticalLargeIncrease" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="VerticalLargeDecrease" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="PART_LineUpButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="VerticalTrackRect" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <!--  Because of the blurriness caused by SCALE animation performed on the object with rounded corners, we have to use dependent animation on width to rerasterize the mask on every tick of the animation.  -->
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Width">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarExpandDuration}" Value="{DynamicResource ScrollBarSize}" />
          </DoubleAnimationUsingKeyFrames>
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="VerticalThumbTransform" Storyboard.TargetProperty="X">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarExpandDuration}" Value="0" />
          </DoubleAnimationUsingKeyFrames>
        </Storyboard>
      </Border.Resources>
      <VisualStateManager.CustomVisualStateManager>
        <vstates:SimpleVisualStateManager />
      </VisualStateManager.CustomVisualStateManager>
      <Grid x:Name="VerticalRoot">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Rectangle x:Name="VerticalTrackRect" Grid.RowSpan="3" Margin="0" Fill="{DynamicResource ScrollBarTrackFill}" Opacity="0" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                               Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter2x}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                               Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter2x}}" Stroke="{DynamicResource ScrollBarTrackStroke}" StrokeThickness="{DynamicResource ScrollBarTrackBorderThemeThickness}" />
        <RepeatButton x:Name="PART_LineUpButton" Grid.Row="0" Height="{DynamicResource ScrollBarSize}" MinWidth="{DynamicResource ScrollBarSize}" Padding="{DynamicResource ScrollBarVerticalDecreaseMargin}" HorizontalAlignment="Center" Command="{x:Static ScrollBar.LineUpCommand}" IsTabStop="False" Opacity="0" Template="{StaticResource VerticalDecrementTemplate}" />
        <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
          <Track.Resources>
            <sys:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">32</sys:Double>
          </Track.Resources>
          <Track.DecreaseRepeatButton>
            <RepeatButton x:Name="VerticalLargeDecrease" Command="{x:Static ScrollBar.PageUpCommand}" Opacity="0" Style="{StaticResource RepeatButtonTransparent}" />
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton x:Name="VerticalLargeIncrease" Command="{x:Static ScrollBar.PageDownCommand}" Opacity="0" Style="{StaticResource RepeatButtonTransparent}" />
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="VerticalThumb" Width="{DynamicResource ScrollBarVerticalThumbMinWidth}" HorizontalAlignment="Center" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Background="{DynamicResource ScrollBarPanningThumbBackground}" BorderBrush="{DynamicResource ScrollBarThumbBorderBrush}" RenderTransformOrigin="1,0.5" Template="{StaticResource VerticalThumbTemplate}">
              <Thumb.RenderTransform>
                <TransformGroup>
                  <TranslateTransform x:Name="VerticalThumbTransform" X="{DynamicResource ScrollBarThumbOffset}" />
                </TransformGroup>
              </Thumb.RenderTransform>
            </Thumb>
          </Track.Thumb>
        </Track>
        <RepeatButton x:Name="PART_LineDownButton" Grid.Row="2" Height="{DynamicResource ScrollBarSize}" MinWidth="{DynamicResource ScrollBarSize}" Padding="{DynamicResource ScrollBarVerticalIncreaseMargin}" HorizontalAlignment="Center" Command="{x:Static ScrollBar.LineDownCommand}" IsTabStop="False" Opacity="0" Template="{StaticResource VerticalIncrementTemplate}" />
      </Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="ConsciousStates">
          <primitives:VisualStateGroupListener.Listener>
            <primitives:VisualStateGroupListener x:Name="ConsciousStatesListener" />
          </primitives:VisualStateGroupListener.Listener>
          <VisualStateGroup.Transitions>
            <VisualTransition Storyboard="{StaticResource ExpandedToCollapsedStoryboard}" From="Expanded" To="Collapsed" />
          </VisualStateGroup.Transitions>
          <VisualState x:Name="Collapsed" />
          <VisualState x:Name="Expanded" Storyboard="{StaticResource ExpandedStoryboard}" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger SourceName="ConsciousStatesListener" Property="CurrentStateName" Value="Collapsed">
        <Setter TargetName="VerticalThumb" Property="Background" Value="{DynamicResource ScrollBarPanningThumbBackground}" />
      </Trigger>
      <Trigger SourceName="ConsciousStatesListener" Property="CurrentStateName" Value="Expanded">
        <Setter TargetName="Root" Property="Background" Value="{DynamicResource ScrollBarBackgroundPointerOver}" />
        <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrushPointerOver}" />
        <Setter TargetName="VerticalTrackRect" Property="Stroke" Value="{DynamicResource ScrollBarTrackStrokePointerOver}" />
        <Setter TargetName="VerticalTrackRect" Property="Fill" Value="{DynamicResource ScrollBarTrackFillPointerOver}" />
        <Setter TargetName="VerticalThumb" Property="Background" Value="{DynamicResource ScrollBarThumbBackground}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Root" Property="Background" Value="{DynamicResource ScrollBarBackgroundDisabled}" />
        <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrushDisabled}" />
        <Setter TargetName="Root" Property="Opacity" Value="0.5" />
        <Setter TargetName="VerticalTrackRect" Property="Stroke" Value="{DynamicResource ScrollBarTrackStrokeDisabled}" />
        <Setter TargetName="VerticalTrackRect" Property="Fill" Value="{DynamicResource ScrollBarTrackFillDisabled}" />
        <Setter TargetName="PART_LineUpButton" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_LineDownButton" Property="Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ScrollBarHorizontal" TargetType="ScrollBar">
    <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
      <Border.Resources>
        <Storyboard x:Key="ExpandedToCollapsedStoryboard">
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="PART_LineRightButton" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="HorizontalLargeIncrease" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="HorizontalLargeDecrease" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="PART_LineLeftButton" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="HorizontalTrackRect" Storyboard.TargetProperty="Opacity" To="0" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Height">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarContractDuration}" Value="{DynamicResource ScrollBarHorizontalThumbMinHeight}" />
          </DoubleAnimationUsingKeyFrames>
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarContractBeginTime}" Storyboard.TargetName="HorizontalThumbTransform" Storyboard.TargetProperty="Y">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarContractDuration}" Value="{DynamicResource ScrollBarThumbOffset}" />
          </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ExpandedStoryboard">
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="PART_LineRightButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="HorizontalLargeIncrease" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="HorizontalLargeDecrease" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="PART_LineLeftButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <DoubleAnimation BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="HorizontalTrackRect" Storyboard.TargetProperty="Opacity" To="1" Duration="{DynamicResource ScrollBarOpacityChangeDuration}" />
          <!--  Because of the blurriness caused by SCALE animation performed on the object with rounded corners, we have to use dependent animation on width to rerasterize the mask on every tick of the animation.  -->
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Height">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarExpandDuration}" Value="{DynamicResource ScrollBarSize}" />
          </DoubleAnimationUsingKeyFrames>
          <DoubleAnimationUsingKeyFrames BeginTime="{DynamicResource ScrollBarExpandBeginTime}" Storyboard.TargetName="HorizontalThumbTransform" Storyboard.TargetProperty="Y">
            <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource ScrollBarExpandDuration}" Value="0" />
          </DoubleAnimationUsingKeyFrames>
        </Storyboard>
      </Border.Resources>
      <VisualStateManager.CustomVisualStateManager>
        <vstates:SimpleVisualStateManager />
      </VisualStateManager.CustomVisualStateManager>
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Rectangle x:Name="HorizontalTrackRect" Grid.ColumnSpan="3" Margin="0" Fill="{DynamicResource ScrollBarTrackFill}" Opacity="0" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                               Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter2x}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                               Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter2x}}" Stroke="{DynamicResource ScrollBarTrackStroke}" StrokeThickness="{DynamicResource ScrollBarTrackBorderThemeThickness}" />
        <RepeatButton x:Name="PART_LineLeftButton" Grid.Column="0" Width="{DynamicResource ScrollBarSize}" MinHeight="{DynamicResource ScrollBarSize}" Padding="{DynamicResource ScrollBarHorizontalDecreaseMargin}" VerticalAlignment="Center" Command="{x:Static ScrollBar.LineLeftCommand}" IsTabStop="False" Opacity="0" Template="{StaticResource HorizontalDecrementTemplate}" />
        <Track x:Name="PART_Track" Grid.Column="1">
          <Track.Resources>
            <sys:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">32</sys:Double>
          </Track.Resources>
          <Track.DecreaseRepeatButton>
            <RepeatButton x:Name="HorizontalLargeDecrease" Command="{x:Static ScrollBar.PageLeftCommand}" Opacity="0" Style="{StaticResource RepeatButtonTransparent}" />
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton x:Name="HorizontalLargeIncrease" Command="{x:Static ScrollBar.PageRightCommand}" Opacity="0" Style="{StaticResource RepeatButtonTransparent}" />
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="HorizontalThumb" Height="{DynamicResource ScrollBarHorizontalThumbMinHeight}" VerticalAlignment="Center" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Background="{DynamicResource ScrollBarPanningThumbBackground}" BorderBrush="{DynamicResource ScrollBarThumbBorderBrush}" RenderTransformOrigin="0.5,1" Template="{StaticResource HorizontalThumbTemplate}">
              <Thumb.RenderTransform>
                <TransformGroup>
                  <TranslateTransform x:Name="HorizontalThumbTransform" Y="{DynamicResource ScrollBarThumbOffset}" />
                </TransformGroup>
              </Thumb.RenderTransform>
            </Thumb>
          </Track.Thumb>
        </Track>
        <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Width="{DynamicResource ScrollBarSize}" MinHeight="{DynamicResource ScrollBarSize}" Padding="{DynamicResource ScrollBarHorizontalIncreaseMargin}" VerticalAlignment="Center" Command="{x:Static ScrollBar.LineRightCommand}" IsTabStop="False" Opacity="0" Template="{StaticResource HorizontalIncrementTemplate}">
          <RepeatButton.RenderTransform>
            <TransformGroup>
              <TranslateTransform X="-4" />
            </TransformGroup>
          </RepeatButton.RenderTransform>
        </RepeatButton>
      </Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="ConsciousStates">
          <primitives:VisualStateGroupListener.Listener>
            <primitives:VisualStateGroupListener x:Name="ConsciousStatesListener" />
          </primitives:VisualStateGroupListener.Listener>
          <VisualStateGroup.Transitions>
            <VisualTransition Storyboard="{StaticResource ExpandedToCollapsedStoryboard}" From="Expanded" To="Collapsed" />
          </VisualStateGroup.Transitions>
          <VisualState x:Name="Collapsed" />
          <VisualState x:Name="Expanded" Storyboard="{StaticResource ExpandedStoryboard}" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger SourceName="ConsciousStatesListener" Property="CurrentStateName" Value="Collapsed">
        <Setter TargetName="HorizontalThumb" Property="Background" Value="{DynamicResource ScrollBarPanningThumbBackground}" />
      </Trigger>
      <Trigger SourceName="ConsciousStatesListener" Property="CurrentStateName" Value="Expanded">
        <Setter TargetName="Root" Property="Background" Value="{DynamicResource ScrollBarBackgroundPointerOver}" />
        <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrushPointerOver}" />
        <Setter TargetName="HorizontalTrackRect" Property="Stroke" Value="{DynamicResource ScrollBarTrackStrokePointerOver}" />
        <Setter TargetName="HorizontalTrackRect" Property="Fill" Value="{DynamicResource ScrollBarTrackFillPointerOver}" />
        <Setter TargetName="HorizontalThumb" Property="Background" Value="{DynamicResource ScrollBarThumbBackground}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Root" Property="Background" Value="{DynamicResource ScrollBarBackgroundDisabled}" />
        <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrushDisabled}" />
        <Setter TargetName="Root" Property="Opacity" Value="0.5" />
        <Setter TargetName="HorizontalTrackRect" Property="Stroke" Value="{DynamicResource ScrollBarTrackStrokeDisabled}" />
        <Setter TargetName="HorizontalTrackRect" Property="Fill" Value="{DynamicResource ScrollBarTrackFillDisabled}" />
        <Setter TargetName="PART_LineLeftButton" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_LineRightButton" Property="Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultScrollBarStyle" TargetType="ScrollBar">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="MinWidth" Value="{DynamicResource ScrollBarSize}" />
    <Setter Property="MinHeight" Value="{DynamicResource ScrollBarSize}" />
    <Setter Property="Background" Value="{DynamicResource ScrollBarBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ScrollBarForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:ScrollBarHelper.IsEnabled" Value="True" />
    <Setter Property="chelper:ScrollBarHelper.CollapsedThumbBackgroundColor" Value="{DynamicResource ScrollBarPanningThumbBackgroundColor}" />
    <Setter Property="chelper:ScrollBarHelper.ExpandedThumbBackgroundColor" Value="{DynamicResource ScrollBarThumbBackgroundColor}" />
    <Setter Property="Template" Value="{StaticResource ScrollBarVertical}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Template" Value="{StaticResource ScrollBarHorizontal}" />
      </Trigger>
      <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
        <Setter Property="chelper:ScrollBarHelper.CollapsedThumbBackgroundColor" Value="{DynamicResource {x:Static SystemColors.ControlTextColorKey}}" />
        <Setter Property="chelper:ScrollBarHelper.ExpandedThumbBackgroundColor" Value="{DynamicResource {x:Static SystemColors.ControlTextColorKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultScrollBarStyle}" TargetType="ScrollBar" />
  <Style x:Key="DefaultScrollViewerStyle" TargetType="ScrollViewer">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:ScrollViewerHelper.IsEnabled" Value="True" />
    <Setter Property="chelper:ScrollViewerHelper.AutoHideScrollBars" Value="{DynamicResource AutoHideScrollBars}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <VisualStateManager.CustomVisualStateManager>
              <vstates:SimpleVisualStateManager />
            </VisualStateManager.CustomVisualStateManager>
            <Grid Background="{TemplateBinding Background}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{TemplateBinding VerticalOffset}" />
              <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{TemplateBinding HorizontalOffset}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ScrollingIndicatorStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="MouseIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                        <DiscreteObjectKeyFrame KeyTime="{DynamicResource ScrollViewerSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                        <DiscreteObjectKeyFrame KeyTime="{DynamicResource ScrollViewerSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="TouchIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.5">
                          <DiscreteObjectKeyFrame.Value>
                            <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.5">
                          <DiscreteObjectKeyFrame.Value>
                            <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NoIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <primitives:ScrollingIndicatorMode>None</primitives:ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TouchIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <primitives:ScrollingIndicatorMode>TouchIndicator</primitives:ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="(chelper:ScrollBarHelper.IndicatorMode)">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <primitives:ScrollingIndicatorMode>TouchIndicator</primitives:ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseIndicator" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultScrollViewerStyle}" TargetType="ScrollViewer" />
  <Style x:Key="TextControlContentHostStyle" BasedOn="{StaticResource DefaultScrollViewerStyle}" TargetType="ScrollViewer">
    <Setter Property="chelper:TextControlContentHostHelper.ContentPresenterMargin" Value="-2,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
            <Grid Background="{TemplateBinding Background}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Border Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Padding="{TemplateBinding Padding}">
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding chelper:TextControlContentHostHelper.ContentPresenterMargin}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              </Border>
              <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{TemplateBinding VerticalOffset}" />
              <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{TemplateBinding HorizontalOffset}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderThumbStyle" TargetType="Thumb">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource SliderThumbBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Margin="-2" Background="{DynamicResource SliderOuterThumbBackground}" BorderBrush="{DynamicResource SliderThumbBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource SliderThumbCornerRadius}">
            <Ellipse x:Name="SliderInnerThumb" Width="{DynamicResource SliderInnerThumbWidth}" Height="{DynamicResource SliderInnerThumbHeight}" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5, 0.5">
              <Ellipse.RenderTransform>
                <ScaleTransform />
              </Ellipse.RenderTransform>
            </Ellipse>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <!--  0.86 is relative scale from 14px to 12px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="0.86" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <!--  0.86 is relative scale from 14px to 12px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="0.86" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <!--  1.167 is relative scale from 12px to 14px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="1.167" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <!--  1.167 is relative scale from 12px to 14px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="1.167" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <!--  0.71 is relative scale from 14px to 10px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="0.71" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <!--  0.71 is relative scale from 14px to 10px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="0.71" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <!--  1.167 is relative scale from 12px to 14px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="1.167" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SliderInnerThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <!--  1.167 is relative scale from 12px to 14px  -->
                      <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="1.167" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultStatusBarStyle" TargetType="StatusBar">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{DynamicResource StatusBarBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource StatusBarForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="StatusBar">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <ItemsPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultStatusBarStyle}" TargetType="StatusBar" />
  <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="Separator">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource StatusBarSeparatorForeground}" />
    <Setter Property="Padding" Value="{DynamicResource StatusBarSeparatorMargin}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Grid x:Name="RootGrid" Background="Transparent">
            <Rectangle x:Name="SeparatorRectangle" Width="{DynamicResource StatusBarSeparatorWidth}" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" Fill="{TemplateBinding Foreground}" RadiusX="{DynamicResource StatusBarSeparatorCornerRadius}" RadiusY="{DynamicResource StatusBarSeparatorCornerRadius}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultStatusBarItemStyle" TargetType="StatusBarItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="StatusBarItem">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
            <local:ContentPresenterEx HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource StatusBarForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultStatusBarItemStyle}" TargetType="StatusBarItem" />
  <Style x:Key="TabViewButtonStyle" TargetType="Button">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource TabViewButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TabViewButtonForeground}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FontSize" Value="{DynamicResource TabViewItemAddButtonFontSize}" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIcons}" />
    <Setter Property="Width" Value="{DynamicResource TabViewItemAddButtonWidth}" />
    <Setter Property="Height" Value="{DynamicResource TabViewItemAddButtonHeight}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabViewCloseButtonStyle" TargetType="Button">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIcons}" />
    <Setter Property="FontSize" Value="{DynamicResource TabViewItemHeaderCloseFontSize}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="Width" Value="{DynamicResource TabViewItemHeaderCloseButtonWidth}" />
    <Setter Property="Height" Value="{DynamicResource TabViewItemHeaderCloseButtonHeight}" />
    <Setter Property="Background" Value="{DynamicResource TabViewItemHeaderCloseButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderCloseButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderThickness}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewItemHeaderCloseButtonBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderCloseButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewItemHeaderCloseButtonBackgroundPressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderCloseButtonForegroundPressed}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabViewScrollButtonStyle" TargetType="RepeatButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource TabViewScrollButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TabViewScrollButtonForeground}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FontSize" Value="{DynamicResource TabViewItemScrollButonFontSize}" />
    <Setter Property="FontFamily" Value="{DynamicResource FluentSystemIconsFilled}" />
    <Setter Property="Width" Value="{DynamicResource TabViewItemScrollButtonWidth}" />
    <Setter Property="Height" Value="{DynamicResource TabViewItemScrollButtonHeight}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewScrollButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewScrollButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewScrollButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewScrollButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TabViewScrollButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource TabViewScrollButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="HorizontalTabItemStyle" TargetType="TabItem">
    <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" chelper:PressHelper.IsEnabled="True" SnapsToDevicePixels="True">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition x:Name="LeftColumn" Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition x:Name="RightColumn" Width="Auto" />
        </Grid.ColumnDefinitions>
        <Border x:Name="BottomBorderLine" Grid.ColumnSpan="3" Height="1" VerticalAlignment="Bottom" BorderBrush="{DynamicResource TabViewBorderBrush}" BorderThickness="1" />
        <Path x:Name="LeftRadiusRenderArc" Width="4" Height="4" Margin="-4,0,0,0" VerticalAlignment="Bottom" Data="M4 0C4 1.19469 3.47624 2.26706 2.64582 3H0C1.65685 3 3 1.65685 3 0H4Z" Fill="{DynamicResource TabViewBorderBrush}" RenderTransformOrigin="0.5,0.5" Visibility="Collapsed" />
        <Path x:Name="RightRadiusRenderArc" Grid.Column="2" Width="4" Height="4" Margin="0,0,-4,0" VerticalAlignment="Bottom" Data="M0 0C0 1.19469 0.523755 2.26706 1.35418 3H4C2.34315 3 1 1.65685 1 0H0Z" Fill="{DynamicResource TabViewBorderBrush}" RenderTransformOrigin="0.5,0.5" Visibility="Collapsed" />
        <Path x:Name="SelectedBackgroundPath" Grid.ColumnSpan="3" Margin="-4,0,-4,0" VerticalAlignment="Bottom" Data="{TemplateBinding chelper:TabItemHelper.TabGeometry}" Fill="{DynamicResource TabViewItemHeaderBackgroundSelected}" RenderTransformOrigin="0.5,0.5" Visibility="Collapsed" />
        <Border x:Name="TabSeparator" Grid.Column="1" Width="1" Margin="{DynamicResource TabViewItemSeparatorMargin}" HorizontalAlignment="Right" BorderBrush="{DynamicResource TabViewItemSeparator}" BorderThickness="1" />
        <Border x:Name="TabContainer" Grid.Column="1" Padding="{DynamicResource TabViewItemHeaderPadding}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                    Converter={StaticResource TopCornerRadiusFilterConverter}}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="IconColumn" Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Viewbox x:Name="IconBox" MaxWidth="{DynamicResource TabViewItemHeaderIconSize}" MaxHeight="{DynamicResource TabViewItemHeaderIconSize}" Margin="{DynamicResource TabViewItemHeaderIconMargin}">
              <ContentControl x:Name="IconControl" Content="{TemplateBinding chelper:TabItemHelper.Icon}" Foreground="{DynamicResource TabViewItemIconForeground}" IsTabStop="False" />
            </Viewbox>
            <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" Focusable="False" FontSize="{DynamicResource TabViewItemHeaderFontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{DynamicResource TabViewItemHeaderForeground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Button x:Name="CloseButton" Grid.Column="2" Margin="{DynamicResource TabViewItemHeaderCloseMargin}" Command="{TemplateBinding chelper:TabItemHelper.CloseTabButtonCommand}" Content="" IsTabStop="False" Style="{StaticResource TabViewCloseButtonStyle}" Visibility="Collapsed">
              <Button.InputBindings>
                <KeyBinding Key="F4" Command="{TemplateBinding chelper:TabItemHelper.CloseTabButtonCommand}" Modifiers="Ctrl" />
              </Button.InputBindings>
            </Button>
          </Grid>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <!--  PointerOver  -->
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundPointerOver}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundPointerOver}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundPointerOver}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderPointerOverCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderPointerOverCloseButtonForeground}" />
        <Setter TargetName="TabSeparator" Property="Opacity" Value="0" />
      </Trigger>
      <!--  Pressed  -->
      <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundPressed}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundPressed}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundPressed}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderPressedCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderPressedCloseButtonForeground}" />
        <Setter TargetName="TabSeparator" Property="Opacity" Value="0" />
      </Trigger>
      <!--  Selected  -->
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="BottomBorderLine" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="RightRadiusRenderArc" Property="Visibility" Value="Visible" />
        <Setter TargetName="LeftRadiusRenderArc" Property="Visibility" Value="Visible" />
        <Setter TargetName="SelectedBackgroundPath" Property="Visibility" Value="Visible" />
        <Setter TargetName="SelectedBackgroundPath" Property="Fill" Value="{DynamicResource TabViewItemHeaderBackgroundSelected}" />
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundSelected}" />
        <Setter TargetName="TabContainer" Property="Margin" Value="{DynamicResource TabViewSelectedItemHeaderMargin}" />
        <Setter TargetName="TabContainer" Property="BorderBrush" Value="{DynamicResource TabViewSelectedItemBorderBrush}" />
        <Setter TargetName="TabContainer" Property="BorderThickness" Value="{DynamicResource TabViewSelectedItemBorderThickness}" />
        <Setter TargetName="TabContainer" Property="Padding" Value="{DynamicResource TabViewSelectedItemHeaderPadding}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundSelected}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundSelected}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonForeground}" />
        <Setter TargetName="LayoutRoot" Property="Background" Value="Transparent" />
        <Setter TargetName="ContentPresenter" Property="FontWeight" Value="SemiBold" />
        <Setter Property="Panel.ZIndex" Value="1" />
      </Trigger>
      <!--  Disabled  -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundDisabled}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundDisabled}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundDisabled}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewButtonForegroundDisabled}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderDisabledCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonForeground}" />
        <Setter TargetName="CloseButton" Property="BorderBrush" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderBrushDisabled}" />
      </Trigger>
      <!--  NoIcon  -->
      <Trigger Property="chelper:TabItemHelper.Icon" Value="{x:Null}">
        <Setter TargetName="IconBox" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="Auto" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="Always" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="OnPointerOver" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True" />
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="OnPointerOver" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom">
        <Setter TargetName="LeftRadiusRenderArc" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleY="-1" />
          </Setter.Value>
        </Setter>
        <Setter TargetName="RightRadiusRenderArc" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleY="-1" />
          </Setter.Value>
        </Setter>
        <Setter TargetName="SelectedBackgroundPath" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleY="-1" />
          </Setter.Value>
        </Setter>
        <Setter TargetName="BottomBorderLine" Property="VerticalAlignment" Value="Top" />
        <Setter TargetName="TabContainer" Property="CornerRadius" Value="{Binding Path=(chelper:ControlHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="VerticalTabItemStyle" TargetType="TabItem">
    <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" chelper:PressHelper.IsEnabled="True" SnapsToDevicePixels="True">
      <Border x:Name="TabContainer" Grid.Column="1" Padding="{DynamicResource TabViewItemHeaderPadding}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition x:Name="IconColumn" Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Viewbox x:Name="IconBox" MaxWidth="{DynamicResource TabViewItemHeaderIconSize}" MaxHeight="{DynamicResource TabViewItemHeaderIconSize}" Margin="{DynamicResource TabViewItemHeaderIconMargin}">
            <ContentControl x:Name="IconControl" Content="{TemplateBinding chelper:TabItemHelper.Icon}" Foreground="{DynamicResource TabViewItemIconForeground}" IsTabStop="False" />
          </Viewbox>
          <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" Focusable="False" FontSize="{DynamicResource TabViewItemHeaderFontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{DynamicResource TabViewItemHeaderForeground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          <Button x:Name="CloseButton" Grid.Column="2" Margin="{DynamicResource TabViewItemHeaderCloseMargin}" Command="{TemplateBinding chelper:TabItemHelper.CloseTabButtonCommand}" Content="" IsTabStop="False" Style="{StaticResource TabViewCloseButtonStyle}" Visibility="Collapsed">
            <Button.InputBindings>
              <KeyBinding Key="F4" Command="{TemplateBinding chelper:TabItemHelper.CloseTabButtonCommand}" Modifiers="Ctrl" />
            </Button.InputBindings>
          </Button>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <!--  PointerOver  -->
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundPointerOver}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundPointerOver}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundPointerOver}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderPointerOverCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderPointerOverCloseButtonForeground}" />
      </Trigger>
      <!--  Pressed  -->
      <Trigger SourceName="LayoutRoot" Property="chelper:PressHelper.IsPressed" Value="True">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundPressed}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundPressed}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundPressed}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderPressedCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderPressedCloseButtonForeground}" />
      </Trigger>
      <!--  Selected  -->
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundSelected}" />
        <Setter TargetName="TabContainer" Property="Margin" Value="{DynamicResource TabViewSelectedItemHeaderMargin}" />
        <Setter TargetName="TabContainer" Property="BorderBrush" Value="{DynamicResource TabViewSelectedItemBorderBrush}" />
        <Setter TargetName="TabContainer" Property="BorderThickness" Value="{DynamicResource TabViewSelectedItemBorderThickness}" />
        <Setter TargetName="TabContainer" Property="Padding" Value="{DynamicResource TabViewSelectedItemHeaderPadding}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundSelected}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemIconForegroundSelected}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonForeground}" />
        <Setter TargetName="LayoutRoot" Property="Background" Value="Transparent" />
        <Setter TargetName="ContentPresenter" Property="FontWeight" Value="SemiBold" />
        <Setter Property="Panel.ZIndex" Value="1" />
      </Trigger>
      <!--  Disabled  -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TabContainer" Property="Background" Value="{DynamicResource TabViewItemHeaderBackgroundDisabled}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundDisabled}" />
        <Setter Property="Foreground" Value="{DynamicResource TabViewItemHeaderForegroundDisabled}" />
        <Setter TargetName="IconControl" Property="Foreground" Value="{DynamicResource TabViewButtonForegroundDisabled}" />
        <Setter TargetName="CloseButton" Property="Background" Value="{DynamicResource TabViewItemHeaderDisabledCloseButtonBackground}" />
        <Setter TargetName="CloseButton" Property="Foreground" Value="{DynamicResource TabViewItemHeaderSelectedCloseButtonForeground}" />
        <Setter TargetName="CloseButton" Property="BorderBrush" Value="{DynamicResource TabViewItemHeaderCloseButtonBorderBrushDisabled}" />
      </Trigger>
      <!--  NoIcon  -->
      <Trigger Property="chelper:TabItemHelper.Icon" Value="{x:Null}">
        <Setter TargetName="IconBox" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="Auto" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="Always" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="OnPointerOver" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True" />
          <Condition Property="chelper:TabItemHelper.IsAddTabButtonVisible" Value="True" />
          <Condition Property="chelper:TabItemHelper.CloseButtonOverlayMode" Value="OnPointerOver" />
        </MultiTrigger.Conditions>
        <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultTabItemStyle" TargetType="TabItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="chelper:TabItemHelper.IsEnabled" Value="True" />
    <Setter Property="MinWidth" Value="{DynamicResource TabViewItemMinWidth}" />
    <Setter Property="MaxWidth" Value="{DynamicResource TabViewItemMaxWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource TabViewItemMinHeight}" />
    <Setter Property="Background" Value="{DynamicResource TabViewItemHeaderBackground}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TabViewItemBorderThickness}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TabViewItemBorderBrush}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource OverlayCornerRadius}" />
    <Setter Property="Template" Value="{StaticResource HorizontalTabItemStyle}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left">
        <Setter Property="Template" Value="{StaticResource VerticalTabItemStyle}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right">
        <Setter Property="Template" Value="{StaticResource VerticalTabItemStyle}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultTabItemStyle}" TargetType="TabItem" />
  <ControlTemplate x:Key="HorizontalTabControlStyle" TargetType="TabControl">
    <Grid x:Name="TemplateRoot" ClipToBounds="true" SnapsToDevicePixels="true">
      <Grid.RowDefinitions>
        <RowDefinition x:Name="TopHeight" Height="Auto" />
        <RowDefinition x:Name="BottomHeight" Height="*" />
      </Grid.RowDefinitions>
      <Grid x:Name="TabContainerGrid" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
        <Grid.ColumnDefinitions>
          <ColumnDefinition x:Name="LeftContentColumn" Width="Auto" MinWidth="2" />
          <ColumnDefinition x:Name="TabColumn" Width="*" />
          <ColumnDefinition x:Name="RightContentColumn" Width="Auto" />
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="LeftContentPresenter" Grid.Column="0" Content="{TemplateBinding chelper:TabControlHelper.TabStripHeader}" ContentTemplate="{TemplateBinding chelper:TabControlHelper.TabStripHeaderTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <Border x:Name="LeftBottomBorderLine" Height="1" VerticalAlignment="Bottom" BorderBrush="{DynamicResource TabViewBorderBrush}" BorderThickness="1" />
        <Grid Grid.Column="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="2" />
            <ColumnDefinition x:Name="ScrollViewerWidth" Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition x:Name="AddButtonColumn" Width="Auto" />
          </Grid.ColumnDefinitions>
          <Border x:Name="InnerLeftBottomBorderLine" Height="1" VerticalAlignment="Bottom" BorderBrush="{DynamicResource TabViewBorderBrush}" BorderThickness="1" />
          <Border x:Name="ScrollDecreaseButtonContainer" Padding="{DynamicResource TabViewItemLeftScrollButtonContainerPadding}" VerticalAlignment="Bottom" Visibility="Collapsed">
            <RepeatButton x:Name="ScrollDecreaseButton" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding ElementName=ScrollViewer}" Content="" Delay="50" IsEnabled="False" Style="{StaticResource TabViewScrollButtonStyle}" />
          </Border>
          <primitives:PivotHeaderScrollViewer x:Name="ScrollViewer" Grid.Column="1" Padding="1,0,0,0" HorizontalAlignment="Left" VerticalContentAlignment="Stretch" HorizontalScrollBarVisibility="Hidden" Orientation="Horizontal" Style="{DynamicResource {x:Type ScrollViewer}}" Template="{DynamicResource ScrollViewerScrollBarlessTemplate}" VerticalScrollBarVisibility="Disabled">
            <Border Padding="{TemplateBinding Padding}">
              <StackPanel Panel.ZIndex="1" IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Once" Orientation="Horizontal" />
            </Border>
          </primitives:PivotHeaderScrollViewer>
          <Border x:Name="ScrollIncreaseButtonContainer" Grid.Column="2" Padding="{DynamicResource TabViewItemRightScrollButtonContainerPadding}" VerticalAlignment="Bottom" Visibility="Collapsed">
            <RepeatButton x:Name="ScrollIncreaseButton" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding ElementName=ScrollViewer}" Content="" Delay="50" IsEnabled="False" Style="{StaticResource TabViewScrollButtonStyle}" />
          </Border>
          <Border x:Name="InnerRightBottomBorderLine" Grid.Column="2" Height="1" VerticalAlignment="Bottom" BorderBrush="{DynamicResource TabViewBorderBrush}" BorderThickness="1" />
          <Border Grid.Column="3" Padding="{DynamicResource TabViewItemAddButtonContainerPadding}" VerticalAlignment="Bottom" Visibility="{TemplateBinding chelper:TabControlHelper.IsAddTabButtonVisible,                                                      Converter={StaticResource BooleanToVisibilityConverter}}">
            <Button x:Name="AddButton" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{TemplateBinding chelper:TabControlHelper.AddTabButtonCommand}" CommandParameter="{TemplateBinding chelper:TabControlHelper.AddTabButtonCommandParameter}" Content="" Style="{StaticResource TabViewButtonStyle}" />
          </Border>
        </Grid>
        <Border x:Name="RightBottomBorderLine" Grid.Column="1" Grid.ColumnSpan="2" Height="1" VerticalAlignment="Bottom" BorderBrush="{DynamicResource TabViewBorderBrush}" BorderThickness="1" />
        <ContentPresenter x:Name="RightContentPresenter" Grid.Column="2" HorizontalAlignment="Stretch" Content="{TemplateBinding chelper:TabControlHelper.TabStripFooter}" ContentTemplate="{TemplateBinding chelper:TabControlHelper.TabStripFooterTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      </Grid>
      <Border x:Name="ContentPanel" Grid.Row="1" Background="{TemplateBinding chelper:TabControlHelper.ContentBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local">
        <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="ScrollViewer" Property="CanScrollHorizontally" Value="False">
        <Setter TargetName="ScrollViewerWidth" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=ScrollViewer}" />
      </Trigger>
      <Trigger SourceName="ScrollViewer" Property="CanScrollHorizontally" Value="True">
        <Setter TargetName="ScrollDecreaseButtonContainer" Property="Visibility" Value="Visible" />
        <Setter TargetName="ScrollIncreaseButtonContainer" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ScrollViewer" Property="CanScrollLeft" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ScrollDecreaseButton" Property="IsEnabled" Value="True" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ScrollViewer" Property="CanScrollRight" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ScrollIncreaseButton" Property="IsEnabled" Value="True" />
      </MultiTrigger>
      <Trigger Property="TabStripPlacement" Value="Bottom">
        <Setter TargetName="TopHeight" Property="Height" Value="*" />
        <Setter TargetName="BottomHeight" Property="Height" Value="Auto" />
        <Setter TargetName="TabContainerGrid" Property="Grid.Row" Value="1" />
        <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
        <Setter TargetName="LeftBottomBorderLine" Property="VerticalAlignment" Value="Top" />
        <Setter TargetName="RightBottomBorderLine" Property="VerticalAlignment" Value="Top" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="VerticalTabControlStyle" TargetType="TabControl">
    <Grid x:Name="TemplateRoot" ClipToBounds="true" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition x:Name="LeftHeight" Width="Auto" />
        <ColumnDefinition x:Name="RightHeight" Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="TabContainerGrid" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
        <Grid.RowDefinitions>
          <RowDefinition x:Name="TopRowDefinition" Height="Auto" MinHeight="2" />
          <RowDefinition x:Name="TabRow" Height="*" />
          <RowDefinition x:Name="BottomRowDefinition" Height="Auto" />
        </Grid.RowDefinitions>
        <ContentPresenter x:Name="TopContentPresenter" Grid.Row="0" Content="{TemplateBinding chelper:TabControlHelper.TabStripHeader}" ContentTemplate="{TemplateBinding chelper:TabControlHelper.TabStripHeaderTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <Grid Grid.Row="1">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" MinHeight="2" />
            <RowDefinition x:Name="ScrollViewerHeight" Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition x:Name="AddButtonColumn" Height="Auto" />
          </Grid.RowDefinitions>
          <primitives:PivotHeaderScrollViewer x:Name="ScrollViewer" Grid.Row="1" Padding="10,1" VerticalAlignment="Top" HorizontalContentAlignment="Stretch" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Hidden">
            <Border Padding="{TemplateBinding Padding}">
              <StackPanel Panel.ZIndex="1" IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Once" Orientation="Vertical" />
            </Border>
          </primitives:PivotHeaderScrollViewer>
          <Border x:Name="TabSeparator" Grid.Row="2" Height="1" Margin="8,4" VerticalAlignment="Top" BorderBrush="{DynamicResource TabViewItemSeparator}" BorderThickness="1" />
          <Border Grid.Row="3" Padding="{DynamicResource TabViewItemAddButtonContainerPadding}" HorizontalAlignment="Center" Visibility="{TemplateBinding chelper:TabControlHelper.IsAddTabButtonVisible,                                                      Converter={StaticResource BooleanToVisibilityConverter}}">
            <Button x:Name="AddButton" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{TemplateBinding chelper:TabControlHelper.AddTabButtonCommand}" CommandParameter="{TemplateBinding chelper:TabControlHelper.AddTabButtonCommandParameter}" Content="" Style="{StaticResource TabViewButtonStyle}" />
          </Border>
        </Grid>
        <ContentPresenter x:Name="BottomContentPresenter" Grid.Row="2" VerticalAlignment="Stretch" Content="{TemplateBinding chelper:TabControlHelper.TabStripFooter}" ContentTemplate="{TemplateBinding chelper:TabControlHelper.TabStripFooterTemplate}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      </Grid>
      <Border x:Name="ContentPanel" Grid.Column="1" Background="{TemplateBinding chelper:TabControlHelper.ContentBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local">
        <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="ScrollViewer" Property="CanScrollVertically" Value="False">
        <Setter TargetName="ScrollViewerHeight" Property="MaxHeight" Value="{Binding ActualHeight, ElementName=ScrollViewer}" />
      </Trigger>
      <Trigger Property="TabStripPlacement" Value="Right">
        <Setter TargetName="LeftHeight" Property="Width" Value="*" />
        <Setter TargetName="RightHeight" Property="Width" Value="Auto" />
        <Setter TargetName="TabContainerGrid" Property="Grid.Column" Value="1" />
        <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultTabControlStyle" TargetType="TabControl">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="chelper:TabControlHelper.IsEnabled" Value="True" />
    <Setter Property="Background" Value="{DynamicResource TabViewBackground}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="chelper:TabControlHelper.ContentBackground" Value="{DynamicResource TabViewItemHeaderBackgroundSelected}" />
    <Setter Property="Template" Value="{StaticResource HorizontalTabControlStyle}" />
    <Style.Triggers>
      <Trigger Property="TabStripPlacement" Value="Left">
        <Setter Property="Template" Value="{StaticResource VerticalTabControlStyle}" />
      </Trigger>
      <Trigger Property="TabStripPlacement" Value="Right">
        <Setter Property="Template" Value="{StaticResource VerticalTabControlStyle}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultTabControlStyle}" TargetType="TabControl" />
  <Style x:Key="AlternateCloseButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Width" Value="{DynamicResource TeachingTipAlternateCloseButtonSize}" />
    <Setter Property="Height" Value="{DynamicResource TeachingTipAlternateCloseButtonSize}" />
    <Setter Property="Background" Value="{DynamicResource TeachingTipAlternateCloseButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TeachingTipAlternateCloseButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TeachingTipAlternateCloseButtonBorderBrush}" />
    <Setter Property="FontFamily" Value="{DynamicResource SymbolThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource TeachingTipAlternateCloseButtonGlyphSize}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="BorderThickness" Value="{DynamicResource TeachingTipAlternateCloseButtonBorderThickness}" />
    <Setter Property="Content" Value="" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Padding="{TemplateBinding Padding}" Background="Transparent">
            <Border x:Name="Background" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
              <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Border>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TeachingTipAlternateCloseButtonBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource TeachingTipAlternateCloseButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TeachingTipAlternateCloseButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TeachingTipAlternateCloseButtonBackgroundPressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource TeachingTipAlternateCloseButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource TeachingTipAlternateCloseButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource TeachingTipAlternateCloseButtonBackgroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource TeachingTipAlternateCloseButtonBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource TeachingTipAlternateCloseButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
    <Setter Property="FontSize" Value="{DynamicResource BodyTextBlockFontSize}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="LineStackingStrategy" Value="MaxHeight" />
  </Style>
  <Style x:Key="CaptionTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="{DynamicResource CaptionTextBlockFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
  </Style>
  <Style x:Key="BodyTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontWeight" Value="Normal" />
  </Style>
  <Style x:Key="BodyStrongTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock" />
  <Style x:Key="SubtitleTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="{DynamicResource SubtitleTextBlockFontSize}" />
  </Style>
  <Style x:Key="TitleTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="{DynamicResource TitleTextBlockFontSize}" />
  </Style>
  <Style x:Key="TitleLargeTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="{DynamicResource TitleLargeTextBlockFontSize}" />
  </Style>
  <Style x:Key="DisplayTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="{DynamicResource DisplayTextBlockFontSize}" />
  </Style>
  <Style x:Key="HeaderTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="46" />
    <Setter Property="FontWeight" Value="Light" />
  </Style>
  <Style x:Key="SubheaderTextBlockStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="34" />
    <Setter Property="FontWeight" Value="Light" />
  </Style>
  <Style x:Key="DateTimePickerFlyoutButtonStyle" TargetType="ButtonBase">
    <Setter Property="Background" Value="{DynamicResource DateTimePickerFlyoutButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ButtonBase">
          <Grid Background="{TemplateBinding Background}">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource DateTimePickerFlyoutButtonBorderBrush}" BorderThickness="{DynamicResource DateTimeFlyoutButtonBorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource DateTimePickerFlyoutButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DateTimePickerFlyoutButtonBorderBrushPointerOver}" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DateTimePickerFlyoutButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource DateTimePickerFlyoutButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DateTimePickerFlyoutButtonBorderBrushPressed}" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DateTimePickerFlyoutButtonForegroundPressed}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource ToggleButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToggleButtonBorderThemeThickness}" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource ControlElevationBorderBrushElevationColor}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <local:ElevationBorder x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Border x:Name="Border" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </local:ElevationBorder>
          <ControlTemplate.Triggers>
            <!--  PointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundPointerOver}" />
            </MultiTrigger>
            <!--  Pressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundPressed}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundPressed}" />
            </MultiTrigger>
            <!--  Disabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushDisabled}" />
            </MultiTrigger>
            <!--  Checked  -->
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Background" Property="BorderThickness" Value="0" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ControlFillColorTransparentBrush}" />
              <Setter TargetName="Border" Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="IsPressed" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundChecked}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundChecked}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushChecked}" />
            </MultiTrigger>
            <!--  CheckedPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundCheckedPointerOver}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushCheckedPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundCheckedPointerOver}" />
            </MultiTrigger>
            <!--  CheckedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundCheckedPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundCheckedPressed}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushCheckedPressed}" />
            </MultiTrigger>
            <!--  CheckedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundCheckedDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundCheckedDisabled}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushCheckedDisabled}" />
            </MultiTrigger>
            <!--  Indeterminate  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="IsPressed" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundIndeterminate}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundIndeterminate}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushIndeterminate}" />
            </MultiTrigger>
            <!--  IndeterminatePointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundIndeterminatePointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushIndeterminatePointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundIndeterminatePointerOver}" />
            </MultiTrigger>
            <!--  IndeterminatePressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundIndeterminatePressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushIndeterminatePressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundIndeterminatePressed}" />
            </MultiTrigger>
            <!--  IndeterminateDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="{x:Null}" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToggleButtonBackgroundIndeterminateDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundIndeterminateDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushIndeterminateDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton" />
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="68" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Border x:Name="ToolBarButtonInnerBorder" Margin="{DynamicResource ToolBarButtonInnerBorderMargin}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <Grid x:Name="ContentRoot" MinHeight="{DynamicResource ToolBarThemeCompactHeight}">
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{DynamicResource ToolBarButtonTextLabelMargin}" HorizontalAlignment="Center" Focusable="False" FontFamily="{TemplateBinding FontFamily}" FontSize="12" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ToolBarButtonInnerBorder" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="ToolBarButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ToolBarButtonInnerBorder" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="ToolBarButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ToolBarButtonInnerBorder" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundDisabled}" />
              <Setter TargetName="ToolBarButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="68" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="Root" MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Border x:Name="ToolBarToggleButtonInnerBackground" Margin="{DynamicResource AppBarButtonInnerBorderMargin}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <Border x:Name="ToolBarToggleButtonInnerBorder" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            </Border>
            <Grid x:Name="ContentRoot" MinHeight="{DynamicResource ToolBarThemeCompactHeight}">
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{DynamicResource ToolBarButtonTextLabelMargin}" HorizontalAlignment="Center" Focusable="False" FontFamily="{TemplateBinding FontFamily}" FontSize="12" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderThickness" Value="0" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ControlFillColorTransparentBrush}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource DefaultCheckBoxStyle}" TargetType="CheckBox">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="68" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid x:Name="Root" MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Border x:Name="ToolBarToggleButtonInnerBackground" Margin="{DynamicResource AppBarButtonInnerBorderMargin}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <Border x:Name="ToolBarToggleButtonInnerBorder" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            </Border>
            <Grid x:Name="ContentRoot" MinHeight="{DynamicResource ToolBarThemeCompactHeight}">
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{DynamicResource ToolBarButtonTextLabelMargin}" HorizontalAlignment="Center" Focusable="False" FontFamily="{TemplateBinding FontFamily}" FontSize="12" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderThickness" Value="0" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ControlFillColorTransparentBrush}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="RadioButton">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="68" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid x:Name="Root" MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Border x:Name="ToolBarToggleButtonInnerBackground" Margin="{DynamicResource AppBarButtonInnerBorderMargin}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <Border x:Name="ToolBarToggleButtonInnerBorder" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            </Border>
            <Grid x:Name="ContentRoot" MinHeight="{DynamicResource ToolBarThemeCompactHeight}">
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{DynamicResource ToolBarButtonTextLabelMargin}" HorizontalAlignment="Center" Focusable="False" FontFamily="{TemplateBinding FontFamily}" FontSize="12" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderThickness" Value="0" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="BorderBrush" Value="{DynamicResource ControlFillColorTransparentBrush}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPointerOver}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedPressed}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ToolBarToggleButtonInnerBackground" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelectedDisabled}" />
              <Setter TargetName="ToolBarToggleButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarThumbStyle" TargetType="Thumb">
    <Setter Property="Foreground" Value="{DynamicResource ToolBarSeparatorForeground}" />
    <Setter Property="Padding" Value="{DynamicResource ToolBarSeparatorMargin}" />
    <Setter Property="Cursor" Value="SizeAll" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Grid x:Name="RootGrid" Background="Transparent">
            <Rectangle x:Name="SeparatorRectangle" Width="{DynamicResource ToolBarSeparatorWidth}" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" Fill="{TemplateBinding Foreground}" RadiusX="{DynamicResource ToolBarSeparatorCornerRadius}" RadiusY="{DynamicResource ToolBarSeparatorCornerRadius}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarOverflowButtonStyle" BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Width" Value="{DynamicResource ToolBarExpandButtonThemeWidth}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Border" Margin="{DynamicResource ToolBarEllipsisButtonInnerBorderMargin}" Padding="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPointerOver}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundPressed}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ToolBarButtonForegroundDisabled}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrushDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ToolBar}" TargetType="ToolBar">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource ToolBarBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ToolBarForeground}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolBar">
          <Grid x:Name="LayoutRoot" SnapsToDevicePixels="True">
            <Border x:Name="ContentRoot" Height="{TemplateBinding Height}" MinHeight="{DynamicResource ToolBarThemeCompactHeight}" Margin="{TemplateBinding Padding}" VerticalAlignment="Top" Background="{TemplateBinding Background}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" MinWidth="{DynamicResource ToolBarMoreButtonColumnMinWidth}" />
                </Grid.ColumnDefinitions>
                <Thumb x:Name="ToolBarThumb" Width="10" Style="{StaticResource ToolBarThumbStyle}" />
                <ToolBarPanel x:Name="PART_ToolBarPanel" Grid.Column="1" MinHeight="{DynamicResource ToolBarThemeCompactHeight}" HorizontalAlignment="Left" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ToggleButton x:Name="MoreButton" Grid.Column="2" MinHeight="{DynamicResource ToolBarThemeCompactHeight}" Padding="{DynamicResource ToolBarMoreButtonMargin}" VerticalAlignment="Top" ClickMode="Press" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarOverflowButtonStyle}">
                  <local:FontIcon x:Name="EllipsisIcon" Height="{DynamicResource ToolBarExpandButtonCircleDiameter}" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="20" Glyph="" />
                </ToggleButton>
                <Popup x:Name="OverflowPopup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PlacementTarget="{Binding ElementName=MoreButton}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" StaysOpen="False">
                  <Popup.PlacementRectangle>
                    <MultiBinding>
                      <MultiBinding.Converter>
                        <converters:PlacementRectangleConverter Margin="0,1,0,1" />
                      </MultiBinding.Converter>
                      <Binding ElementName="MoreButton" Path="ActualWidth" />
                      <Binding ElementName="MoreButton" Path="ActualHeight" />
                    </MultiBinding>
                  </Popup.PlacementRectangle>
                  <primitives:ThemeShadowChrome x:Name="OverflowContentRoot" MaxWidth="{DynamicResource ToolBarOverflowMaxWidth}" CornerRadius="{Binding ElementName=DropDownBorder, Path=CornerRadius}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="DropDownBorder" Background="{DynamicResource ToolBarOverflowPresenterBackground}" BorderBrush="{DynamicResource ToolBarOverflowPresenterBorderBrush}" BorderThickness="{DynamicResource ToolBarOverflowPresenterBorderThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
                      <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="0" FocusVisualStyle="{x:Null}" Focusable="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Once" WrapWidth="200" />
                    </Border>
                  </primitives:ThemeShadowChrome>
                </Popup>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultToolTipStyle" TargetType="ToolTip">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource ToolTipForegroundBrush}" />
    <Setter Property="Background" Value="{DynamicResource ToolTipBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolTipBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolTipBorderThemeThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{DynamicResource ToolTipContentThemeFontSize}" />
    <Setter Property="Padding" Value="{DynamicResource ToolTipBorderPadding}" />
    <Setter Property="MaxWidth" Value="{DynamicResource ToolTipMaxWidth}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <primitives:ThemeShadowChrome MaxWidth="{TemplateBinding MaxWidth}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Depth="16" IsShadowEnabled="{TemplateBinding HasDropShadow}" SnapsToDevicePixels="True">
            <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
              <local:ContentPresenterEx SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" />
            </Border>
          </primitives:ThemeShadowChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultToolTipStyle}" TargetType="ToolTip" />
  <Style x:Key="DefaultTreeViewItemStyle" TargetType="TreeViewItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{DynamicResource TreeViewItemBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource ListViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TreeViewItemBorderThemeThickness}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <!--<Setter Property="IsHoldingEnabled" Value="True" />-->
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="{DynamicResource ListViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource TreeViewItemMinHeight}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:TreeViewItemHelper.IsEnabled" Value="True" />
    <Setter Property="chelper:TreeViewItemHelper.GlyphBrush" Value="{DynamicResource TreeViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeViewItem">
          <Grid x:Name="Root">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Border x:Name="ContentPresenterGrid" Margin="{DynamicResource TreeViewItemPresenterMargin}" Padding="{DynamicResource TreeViewItemPresenterPadding}" chelper:PressHelper.IsEnabled="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
              <Grid>
                <Rectangle x:Name="SelectionIndicator" Width="3" Height="16" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{DynamicResource TreeViewItemSelectionIndicatorForeground}" Opacity="0" RadiusX="2" RadiusY="2" RenderTransformOrigin="0.5,0.5">
                  <Rectangle.RenderTransform>
                    <ScaleTransform x:Name="IndicatorTransform" ScaleY="1" />
                  </Rectangle.RenderTransform>
                </Rectangle>
                <Border x:Name="MultiSelectGrid" Margin="{DynamicResource TreeViewItemMultiSelectSelectedItemBorderMargin}" Padding="{TemplateBinding chelper:TreeViewItemHelper.Indentation}" BorderBrush="Transparent" BorderThickness="{DynamicResource TreeViewItemBorderThemeThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid Grid.Column="0">
                      <CheckBox x:Name="MultiSelectCheckBox" Width="32" MinWidth="32" MinHeight="{DynamicResource TreeViewItemMultiSelectCheckBoxMinHeight}" Margin="10,0,0,0" VerticalAlignment="Center" IsTabStop="False" Visibility="Collapsed" />
                      <Border x:Name="MultiArrangeOverlayTextBorder" Height="20" MinWidth="20" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{DynamicResource SystemControlBackgroundAccentBrush}" BorderBrush="{DynamicResource SystemControlBackgroundChromeWhiteBrush}" BorderThickness="1" CornerRadius="{DynamicResource ControlCornerRadius}" IsHitTestVisible="False" Visibility="Collapsed">
                        <TextBlock x:Name="MultiArrangeOverlayText" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource SystemControlForegroundChromeWhiteBrush}" IsHitTestVisible="False" Style="{DynamicResource CaptionTextBlockStyle}" />
                      </Border>
                    </Grid>
                    <ToggleButton x:Name="ExpandCollapseChevron" Grid.Column="1" Width="Auto" Padding="{TemplateBinding chelper:TreeViewItemHelper.ExpandChevronPadding}" Background="Transparent" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Opacity="{TemplateBinding chelper:TreeViewItemHelper.GlyphOpacity}" Style="{StaticResource ExpandCollapseToggleStyle}">
                      <Grid>
                        <local:FontIcon x:Name="ExpandCollapseGlyph" Width="12" Height="12" Margin="2" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="{TemplateBinding chelper:TreeViewItemHelper.GlyphSize}" Foreground="{TemplateBinding chelper:TreeViewItemHelper.GlyphBrush}" Glyph="{TemplateBinding chelper:TreeViewItemHelper.CollapsedGlyph}" IsHitTestVisible="False" RenderTransformOrigin="0.5, 0.5">
                          <local:FontIcon.RenderTransform>
                            <RotateTransform x:Name="ExpandCollapseGlyphRotateTransform" Angle="0" />
                          </local:FontIcon.RenderTransform>
                        </local:FontIcon>
                      </Grid>
                    </ToggleButton>
                    <local:ContentPresenterEx x:Name="PART_Header" Grid.Column="2" MinHeight="{DynamicResource TreeViewItemContentHeight}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </Border>
              </Grid>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndicatorTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="1,0,0,0" KeyTime="{DynamicResource TreeViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndicatorTransform" Storyboard.TargetProperty="ScaleY">
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource TreeViewItemScaleAnimationDuration}" Value="{DynamicResource TreeViewItemPillMinScale}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseGlyphRotateTransform" Storyboard.TargetProperty="Angle" To="90.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseGlyphRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndicatorTransform" Storyboard.TargetProperty="ScaleY">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{DynamicResource TreeViewItemPillMinScale}" />
                      <SplineDoubleKeyFrame KeySpline="0,0,0,1" KeyTime="{DynamicResource TreeViewItemScaleAnimationDuration}" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="SelectedInactive" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="ContentPresenterGrid" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="Root" Property="chelper:ControlHelper.VisualState" Value="Pressed" />
            </Trigger>
            <Trigger SourceName="ContentPresenterGrid" Property="chelper:PressHelper.IsPressed" Value="False">
              <Setter TargetName="Root" Property="chelper:ControlHelper.VisualState" Value="Normal" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="ExpandCollapseChevron" Property="Visibility" Value="Hidden" />
              <Setter Property="chelper:TreeViewItemHelper.GlyphOpacity" Value="0" />
            </Trigger>
            <Trigger SourceName="ContentPresenterGrid" Property="IsMouseOver" Value="True">
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundPointerOver}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundPointerOver}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundPointerOver}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundPointerOver}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushPointerOver}" />
            </Trigger>
            <Trigger SourceName="ContentPresenterGrid" Property="chelper:PressHelper.IsPressed" Value="True">
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundPressed}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundPressed}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundPressed}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundPressed}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushPressed}" />
            </Trigger>
            <!--  Selected  -->
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundSelected}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelected}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForeground}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelected}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushSelected}" />
              <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundDisabled}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundDisabled}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundDisabled}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundDisabled}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushDisabled}" />
            </Trigger>
            <!--  PointerOverSelected  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="ContentPresenterGrid" Property="IsMouseOver" Value="True" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundSelectedPointerOver}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedPointerOver}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundPointerOver}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedPointerOver}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <!--  PressedSelected  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="ContentPresenterGrid" Property="chelper:PressHelper.IsPressed" Value="True" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundSelectedPressed}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedPressed}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundPressed}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedPressed}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <!--  SelectedDisabled  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ContentPresenterGrid" Property="Background" Value="{DynamicResource TreeViewItemBackgroundSelectedDisabled}" />
              <Setter TargetName="PART_Header" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedDisabled}" />
              <Setter TargetName="SelectionIndicator" Property="Fill" Value="{DynamicResource TreeViewItemSelectionIndicatorForegroundDisabled}" />
              <Setter TargetName="ExpandCollapseGlyph" Property="Foreground" Value="{DynamicResource TreeViewItemForegroundSelectedDisabled}" />
              <Setter TargetName="ContentPresenterGrid" Property="BorderBrush" Value="{DynamicResource TreeViewItemBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultTreeViewItemStyle}" TargetType="TreeViewItem" />
  <Style x:Key="DefaultTreeViewStyle" TargetType="TreeView">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:ScrollViewerHelper.AutoHideScrollBars" Value="{DynamicResource AutoHideScrollBars}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeView">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <local:ScrollViewerEx x:Name="_tv_scrollviewer_" Padding="{TemplateBinding Padding}" chelper:ScrollViewerHelper.AutoHideScrollBars="{TemplateBinding chelper:ScrollViewerHelper.AutoHideScrollBars}" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter />
            </local:ScrollViewerEx>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
              <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultTreeViewStyle}" TargetType="TreeView" />
  <Style x:Key="TitleBarBackButtonStyle" TargetType="primitives:TitleBarButton">
    <Setter Property="Background" Value="{DynamicResource AccentButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource AccentButtonForeground}" />
    <Setter Property="HoverBackground" Value="{DynamicResource AccentButtonBackgroundPointerOver}" />
    <Setter Property="HoverForeground" Value="{DynamicResource AccentButtonForegroundPointerOver}" />
    <Setter Property="PressedBackground" Value="{DynamicResource AccentButtonBackgroundPressed}" />
    <Setter Property="PressedForeground" Value="{DynamicResource AccentButtonForegroundPressed}" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Width" Value="48" />
    <Setter Property="Content" Value="M 20 10 L 3.828125 10 L 10.410156 16.582031 L 9 18 L 0 9 L 9 0 L 10.410156 1.416016 L 3.828125 8 L 20 8 Z" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <local:FontIconFallback Data="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <WindowChrome x:Key="DefaultWindowChrome" x:Shared="False" CaptionHeight="{DynamicResource {x:Static primitives:TitleBar.HeightKey}}" NonClientFrameEdges="None" ResizeBorderThickness="4" UseAeroCaptionButtons="False" />
  <WindowChrome x:Key="AeroWindowChrome" x:Shared="False" CaptionHeight="{DynamicResource {x:Static primitives:TitleBar.HeightKey}}" GlassFrameThickness="-1" NonClientFrameEdges="None" ResizeBorderThickness="4" UseAeroCaptionButtons="False" />
  <WindowChrome x:Key="AcrylicWindowChrome" x:Shared="False" CaptionHeight="{DynamicResource {x:Static primitives:TitleBar.HeightKey}}" GlassFrameThickness="0,1,0,0" NonClientFrameEdges="None" ResizeBorderThickness="4" UseAeroCaptionButtons="False" />
  <Style x:Key="BaseWindowStyle" TargetType="Window">
    <Setter Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseHighBrush}" />
    <Setter Property="Background" Value="{DynamicResource ApplicationPageBackgroundThemeBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource WindowBorder}" />
    <Setter Property="BorderThickness" Value="0.5" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource DefaultWindowChrome}" />
    <Setter Property="root:ThemeManager.IsThemeAware" Value="True" />
    <Setter Property="primitives:TitleBar.Background" Value="{DynamicResource ControlFillColorTransparentBrush}" />
    <Setter Property="primitives:TitleBar.Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="primitives:TitleBar.InactiveBackground" Value="{DynamicResource ControlFillColorTransparentBrush}" />
    <Setter Property="primitives:TitleBar.InactiveForeground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
    <Setter Property="primitives:TitleBar.BackButtonStyle" Value="{StaticResource TitleBarBackButtonStyle}" />
    <Setter Property="chelper:WindowHelper.FixMaximizedWindow" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Window">
          <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid x:Name="ContentGrid">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <primitives:TitleBarControl Title="{TemplateBinding Title}" Panel.ZIndex="1" Height="{TemplateBinding primitives:TitleBar.Height}" BackButtonCommand="{TemplateBinding primitives:TitleBar.BackButtonCommand}" BackButtonCommandParameter="{TemplateBinding primitives:TitleBar.BackButtonCommandParameter}" BackButtonCommandTarget="{TemplateBinding primitives:TitleBar.BackButtonCommandTarget}" BackButtonStyle="{TemplateBinding primitives:TitleBar.BackButtonStyle}" Background="{TemplateBinding primitives:TitleBar.Background}" ButtonStyle="{TemplateBinding primitives:TitleBar.ButtonStyle}" ExtendViewIntoTitleBar="{TemplateBinding primitives:TitleBar.ExtendViewIntoTitleBar}" Foreground="{TemplateBinding primitives:TitleBar.Foreground}" Icon="{TemplateBinding Icon}" InactiveBackground="{TemplateBinding primitives:TitleBar.InactiveBackground}" InactiveForeground="{TemplateBinding primitives:TitleBar.InactiveForeground}" IsActive="{TemplateBinding IsActive}" IsBackButtonVisible="{TemplateBinding primitives:TitleBar.IsBackButtonVisible}" IsBackEnabled="{TemplateBinding primitives:TitleBar.IsBackEnabled}" IsIconVisible="{TemplateBinding primitives:TitleBar.IsIconVisible}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{TemplateBinding primitives:TitleBar.Style}" />
                <AdornerDecorator x:Name="AdornerDecorator" Grid.Row="1">
                  <local:ContentPresenterEx Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
              </Grid>
              <Border x:Name="HighContrastBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" BorderThickness="7,1,7,7" IsHitTestVisible="False" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Background" Value="Transparent">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource WindowBorderInactive}" />
              <Setter TargetName="HighContrastBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
              <Setter TargetName="ContentGrid" Property="Margin" Value="7,0,7,7" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
              <Setter TargetName="ContentGrid" Property="Margin" Value="0" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="primitives:TitleBar.ExtendViewIntoTitleBar" Value="True">
              <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
              <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="WindowChrome.WindowChrome" Value="{x:Null}">
        <Setter Property="chelper:WindowHelper.FixMaximizedWindow" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultWindowStyle" BasedOn="{StaticResource BaseWindowStyle}" TargetType="Window">
    <Setter Property="OverridesDefaultStyle" Value="True" />
  </Style>
  <Style x:Key="AeroWindowStyle" BasedOn="{StaticResource BaseWindowStyle}" TargetType="Window">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource AeroWindowChrome}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Window">
          <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid x:Name="Background">
                <!--  Color tint overlay  -->
                <Rectangle x:Name="TintColorLayer" Fill="{TemplateBinding Background}" Opacity="0.8" />
                <!--  Tiled noise texture  -->
                <Rectangle x:Name="NoiseLayer" Opacity="0.02">
                  <Rectangle.Fill>
                    <ImageBrush ImageSource="/iNKORE.UI.WPF.Modern;component/Materials/Acrylic/NoiseAsset_256X256_PNG.png" Stretch="None" TileMode="Tile" Viewport="0,0,128,128" ViewportUnits="Absolute" />
                  </Rectangle.Fill>
                </Rectangle>
              </Grid>
              <Grid x:Name="ContentGrid">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <primitives:TitleBarControl Title="{TemplateBinding Title}" Panel.ZIndex="1" BackButtonCommand="{TemplateBinding primitives:TitleBar.BackButtonCommand}" BackButtonCommandParameter="{TemplateBinding primitives:TitleBar.BackButtonCommandParameter}" Height="{TemplateBinding primitives:TitleBar.Height}" BackButtonCommandTarget="{TemplateBinding primitives:TitleBar.BackButtonCommandTarget}" BackButtonStyle="{TemplateBinding primitives:TitleBar.BackButtonStyle}" Background="{TemplateBinding primitives:TitleBar.Background}" ButtonStyle="{TemplateBinding primitives:TitleBar.ButtonStyle}" ExtendViewIntoTitleBar="{TemplateBinding primitives:TitleBar.ExtendViewIntoTitleBar}" Foreground="{TemplateBinding primitives:TitleBar.Foreground}" Icon="{TemplateBinding Icon}" InactiveBackground="{TemplateBinding primitives:TitleBar.InactiveBackground}" InactiveForeground="{TemplateBinding primitives:TitleBar.InactiveForeground}" IsActive="{TemplateBinding IsActive}" IsBackButtonVisible="{TemplateBinding primitives:TitleBar.IsBackButtonVisible}" IsBackEnabled="{TemplateBinding primitives:TitleBar.IsBackEnabled}" IsIconVisible="{TemplateBinding primitives:TitleBar.IsIconVisible}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{TemplateBinding primitives:TitleBar.Style}" />
                <AdornerDecorator x:Name="AdornerDecorator" Grid.Row="1">
                  <local:ContentPresenterEx Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
              </Grid>
              <Border x:Name="HighContrastBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" BorderThickness="7,1,7,7" IsHitTestVisible="False" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Background" Value="Transparent">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource WindowBorderInactive}" />
              <Setter TargetName="HighContrastBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
              <Setter TargetName="ContentGrid" Property="Margin" Value="7,0,7,7" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
              <Setter TargetName="ContentGrid" Property="Margin" Value="0" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="primitives:TitleBar.ExtendViewIntoTitleBar" Value="True">
              <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
              <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AcrylicWindowStyle" BasedOn="{StaticResource BaseWindowStyle}" TargetType="Window">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource AcrylicWindowChrome}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Window">
          <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid x:Name="ContentGrid">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <primitives:TitleBarControl Title="{TemplateBinding Title}" Panel.ZIndex="1" BackButtonCommand="{TemplateBinding primitives:TitleBar.BackButtonCommand}" Height="{TemplateBinding primitives:TitleBar.Height}" BackButtonCommandParameter="{TemplateBinding primitives:TitleBar.BackButtonCommandParameter}" BackButtonCommandTarget="{TemplateBinding primitives:TitleBar.BackButtonCommandTarget}" BackButtonStyle="{TemplateBinding primitives:TitleBar.BackButtonStyle}" Background="{TemplateBinding primitives:TitleBar.Background}" ButtonStyle="{TemplateBinding primitives:TitleBar.ButtonStyle}" ExtendViewIntoTitleBar="{TemplateBinding primitives:TitleBar.ExtendViewIntoTitleBar}" Foreground="{TemplateBinding primitives:TitleBar.Foreground}" Icon="{TemplateBinding Icon}" InactiveBackground="{TemplateBinding primitives:TitleBar.InactiveBackground}" InactiveForeground="{TemplateBinding primitives:TitleBar.InactiveForeground}" IsActive="{TemplateBinding IsActive}" IsBackButtonVisible="{TemplateBinding primitives:TitleBar.IsBackButtonVisible}" IsBackEnabled="{TemplateBinding primitives:TitleBar.IsBackEnabled}" IsIconVisible="{TemplateBinding primitives:TitleBar.IsIconVisible}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{TemplateBinding primitives:TitleBar.Style}" />
                <AdornerDecorator x:Name="AdornerDecorator" Grid.Row="1">
                  <local:ContentPresenterEx Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
              </Grid>
              <Border x:Name="HighContrastBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" BorderThickness="7,1,7,7" IsHitTestVisible="False" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Background" Value="Transparent">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource WindowBorderInactive}" />
              <Setter TargetName="HighContrastBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
              <Setter TargetName="ContentGrid" Property="Margin" Value="7,0,7,7" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
              <Setter TargetName="ContentGrid" Property="Margin" Value="0" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="primitives:TitleBar.ExtendViewIntoTitleBar" Value="True">
              <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
              <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MicaWindowStyle" BasedOn="{StaticResource BaseWindowStyle}" TargetType="Window">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource AeroWindowChrome}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Window">
          <Border x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Grid x:Name="ContentGrid">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <primitives:TitleBarControl Title="{TemplateBinding Title}" Panel.ZIndex="1" Height="{TemplateBinding primitives:TitleBar.Height}" BackButtonCommand="{TemplateBinding primitives:TitleBar.BackButtonCommand}" BackButtonCommandParameter="{TemplateBinding primitives:TitleBar.BackButtonCommandParameter}" BackButtonCommandTarget="{TemplateBinding primitives:TitleBar.BackButtonCommandTarget}" BackButtonStyle="{TemplateBinding primitives:TitleBar.BackButtonStyle}" Background="{TemplateBinding primitives:TitleBar.Background}" ButtonStyle="{TemplateBinding primitives:TitleBar.ButtonStyle}" ExtendViewIntoTitleBar="{TemplateBinding primitives:TitleBar.ExtendViewIntoTitleBar}" Foreground="{TemplateBinding primitives:TitleBar.Foreground}" Icon="{TemplateBinding Icon}" InactiveBackground="{TemplateBinding primitives:TitleBar.InactiveBackground}" InactiveForeground="{TemplateBinding primitives:TitleBar.InactiveForeground}" IsActive="{TemplateBinding IsActive}" IsBackButtonVisible="{TemplateBinding primitives:TitleBar.IsBackButtonVisible}" IsBackEnabled="{TemplateBinding primitives:TitleBar.IsBackEnabled}" IsIconVisible="{TemplateBinding primitives:TitleBar.IsIconVisible}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{TemplateBinding primitives:TitleBar.Style}" />
                <AdornerDecorator x:Name="AdornerDecorator" Grid.Row="1">
                  <local:ContentPresenterEx Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
              </Grid>
              <Border x:Name="HighContrastBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" BorderThickness="7,1,7,7" IsHitTestVisible="False" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Background" Value="Transparent">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource WindowBorderInactive}" />
              <Setter TargetName="HighContrastBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true">
              <Setter TargetName="ContentGrid" Property="Margin" Value="7,0,7,7" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="LayoutRoot" Property="BorderThickness" Value="0" />
              <Setter TargetName="ContentGrid" Property="Margin" Value="0" />
              <Setter TargetName="HighContrastBorder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="primitives:TitleBar.ExtendViewIntoTitleBar" Value="True">
              <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
              <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
            </Trigger>
            <Trigger Property="chelper:WindowHelper.SystemBackdropType" Value="Acrylic">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ControlFillColorTransparentBrush}" />
            </Trigger>
            <Trigger Property="chelper:WindowHelper.SystemBackdropType" Value="Mica">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ControlFillColorTransparentBrush}" />
            </Trigger>
            <Trigger Property="chelper:WindowHelper.SystemBackdropType" Value="Tabbed">
              <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource ControlFillColorTransparentBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SnapWindowStyle" BasedOn="{StaticResource BaseWindowStyle}" TargetType="Window">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource AeroWindowChrome}" />
  </Style>
  <Style BasedOn="{StaticResource DefaultWindowStyle}" TargetType="Window" />
  <ControlTemplate x:Key="TextControlValidationErrorTemplate">
    <Grid SnapsToDevicePixels="True">
      <AdornedElementPlaceholder />
      <Border BorderBrush="{DynamicResource SystemControlErrorTextForegroundBrush}" BorderThickness="{DynamicResource TextControlBorderThemeThicknessFocused}" CornerRadius="{DynamicResource ControlCornerRadius}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="EllipsisButton" BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
    <Setter Property="Background" Value="{DynamicResource AppBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource AppBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="Width" Value="{DynamicResource AppBarExpandButtonThemeWidth}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Border" Margin="{DynamicResource AppBarEllipsisButtonInnerBorderMargin}" Padding="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource AppBarButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource AppBarButtonForegroundDisabled}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CommandBarFlyoutEllipsisButtonStyle" BasedOn="{StaticResource EllipsisButton}" TargetType="ToggleButton">
    <Setter Property="Background" Value="{DynamicResource CommandBarFlyoutAppBarButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource CommandBarFlyoutAppBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource CommandBarFlyoutAppBarButtonBorderBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Width" Value="44" />
    <Setter Property="Height" Value="40" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Border" Margin="{DynamicResource CommandBarFlyoutAppBarEllipsisButtonInnerBorderMargin}" Padding="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommandBarFlyoutAppBarButtonBackgroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource CommandBarFlyoutAppBarButtonForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommandBarFlyoutAppBarButtonBackgroundPressed}" />
              <Setter Property="Foreground" Value="{DynamicResource CommandBarFlyoutAppBarButtonForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommandBarFlyoutAppBarButtonBackgroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource CommandBarFlyoutAppBarButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultDatePickerTextBoxStyle" TargetType="DatePickerTextBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource CalendarDatePickerTextForegroundSelected}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}" />
    <Setter Property="local:TextContextMenu.UsingTextContextMenu" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePickerTextBox">
          <Grid SnapsToDevicePixels="True">
            <Border x:Name="BorderElement" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <Border x:Name="ContentElement" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <ContentControl x:Name="PART_Watermark" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Foreground="{DynamicResource CalendarDatePickerTextForeground}" IsHitTestVisible="False" Opacity="0" />
            <local:ScrollViewerEx x:Name="PART_ContentHost" Margin="0" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{DynamicResource TextControlContentHostStyle}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="WatermarkStates">
                <VisualState x:Name="Unwatermarked" />
                <VisualState x:Name="Watermarked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource CalendarDatePickerTextForegroundDisabled}" />
              <Setter TargetName="PART_Watermark" Property="Foreground" Value="{DynamicResource CalendarDatePickerTextForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsSelectionActive" Value="True">
              <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter TargetName="BorderElement" Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter Property="CaretBrush" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter TargetName="PART_Watermark" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultDatePickerTextBoxStyle}" TargetType="DatePickerTextBox" />
  <Style x:Key="DefaultListViewStyle" BasedOn="{StaticResource BaseListViewStyle}" TargetType="ListView">
    <Style.Resources>
      <converters:IsGridViewConverter x:Key="IsGridViewConverter" />
    </Style.Resources>
    <Style.Triggers>
      <DataTrigger Binding="{Binding View, RelativeSource={RelativeSource Self}, Converter={StaticResource IsGridViewConverter}}" Value="True">
        <Setter Property="Template" Value="{StaticResource GridViewTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static GridView.GridViewItemContainerStyleKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultListViewStyle}" TargetType="ListView" />
  <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}" TargetType="MenuItem">
    <Border x:Name="LayoutRoot" Margin="{DynamicResource MenuFlyoutItemMargin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="true">
      <Grid x:Name="AnimationRoot">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="{TemplateBinding Visibility, Converter={StaticResource SharedSizeGroupConverter}, ConverterParameter=MenuItemCheckColumnGroup}" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="{TemplateBinding Visibility, Converter={StaticResource SharedSizeGroupConverter}, ConverterParameter=MenuItemIconColumnGroup}" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <local:FontIcon x:Name="CheckGlyph" Width="16" Margin="0,0,12,0" FontFamily="{DynamicResource FluentSystemIconsFilled}" FontSize="16" Foreground="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForeground}" Glyph="" Opacity="0" Visibility="Collapsed" />
        <Viewbox x:Name="IconRoot" Grid.Column="1" Width="16" Height="16" Margin="0,0,12,0" HorizontalAlignment="Left" VerticalAlignment="Center">
          <local:ContentPresenterEx x:Name="IconContent" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Viewbox>
        <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="Header" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <TextBlock x:Name="KeyboardAcceleratorTextBlock" Grid.Column="3" Margin="24,0,2,0" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForeground}" Style="{DynamicResource CaptionTextBlockStyle}" Text="{TemplateBinding InputGestureText}" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="IconRoot" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputGestureText" Value="">
        <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsCheckable" Value="True">
        <Setter TargetName="CheckGlyph" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemRevealBackgroundPointerOver}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushPointerOver}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPointerOver}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPointerOver}" />
        <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundPointerOver}" />
        <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundPointerOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemRevealBackgroundPressed}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushPressed}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPressed}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPressed}" />
        <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundPressed}" />
        <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemBackgroundDisabled}" />
        <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushDisabled}" />
        <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundDisabled}" />
        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundDisabled}" />
        <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundDisabled}" />
        <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundDisabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultMenuItemStyle" TargetType="MenuItem">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource MenuFlyoutItemBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemBackgroundBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource MenuFlyoutItemBorderThickness}" />
    <Setter Property="Foreground" Value="{DynamicResource MenuFlyoutItemForeground}" />
    <Setter Property="Padding" Value="{DynamicResource MenuFlyoutItemThemePadding}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}}" />
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Background" Value="{DynamicResource MenuBarItemBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource MenuBarItemBorderThickness}" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Header" Value="Item" />
        <Setter Property="Height" Value="{DynamicResource MenuBarHeight}" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Background" Value="{DynamicResource MenuBarItemBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource MenuBarItemBorderThickness}" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Header" Value="Item" />
        <Setter Property="Height" Value="{DynamicResource MenuBarHeight}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Background" Value="{DynamicResource MenuFlyoutSubItemBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource MenuFlyoutSubItemBorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemForeground}" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultMenuItemStyle}" TargetType="MenuItem" />
  <Style x:Key="NavigationViewItemHeaderTextStyle" BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <!--<Setter Property="OpticalMarginAlignment" Value="TrimSideBearings" />-->
    <Setter Property="TextWrapping" Value="NoWrap" />
  </Style>
  <Style x:Key="DefaultPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
    <Setter Property="PasswordChar" Value="●" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="chelper:PasswordBoxHelper.IsEnabled" Value="True" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderBrushElevationColor}" />
    <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}" />
    <Setter Property="local:TextContextMenu.UsingTextContextMenu" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid SnapsToDevicePixels="True">
            <Grid.Resources>
              <Style x:Key="RevealButtonStyle" TargetType="ToggleButton">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                      <Border x:Name="ButtonLayoutGrid" Margin="{DynamicResource TextBoxInnerButtonMargin}" Background="{DynamicResource TextControlButtonBackground}" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
                        <local:FontIcon x:Name="GlyphElement" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="{DynamicResource PasswordBoxIconFontSize}" FontStyle="Normal" Foreground="{DynamicResource TextControlButtonForeground}" Glyph="" />
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                          <Setter TargetName="ButtonLayoutGrid" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                          <Setter TargetName="ButtonLayoutGrid" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                          <Setter TargetName="GlyphElement" Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPointerOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                          <Setter TargetName="ButtonLayoutGrid" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                          <Setter TargetName="ButtonLayoutGrid" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                          <Setter TargetName="GlyphElement" Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                          <Setter TargetName="ButtonLayoutGrid" Property="Opacity" Value="0" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                      <local:ScrollViewerEx x:Name="PART_ContentHost" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsTabStop="False" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="{DynamicResource PasswordBoxTopHeaderMargin}" VerticalAlignment="Top" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="Normal" Foreground="{DynamicResource TextControlHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <local:ElevationBorder x:Name="BorderElement" Grid.Row="1" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="2" MinWidth="{DynamicResource TextControlThemeMinWidth}" MinHeight="{DynamicResource TextControlThemeMinHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <Grid Grid.Row="1" Grid.Column="0">
              <local:ScrollViewerEx x:Name="PART_ContentHost" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsTabStop="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
              <TextBox x:Name="TextBox" Padding="{TemplateBinding Padding}" local:TextContextMenu.UsingTextContextMenu="{TemplateBinding local:TextContextMenu.UsingTextContextMenu}" BorderThickness="{TemplateBinding BorderThickness}" CaretBrush="{TemplateBinding CaretBrush}" ContextMenu="{TemplateBinding ContextMenu}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" IsTabStop="False" MaxLength="{TemplateBinding MaxLength}" ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" SelectionBrush="{TemplateBinding SelectionBrush}" SelectionOpacity="{TemplateBinding SelectionOpacity}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource TextBoxStyle}" Visibility="Collapsed" />
            </Grid>
            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Foreground="{DynamicResource TextControlPlaceholderForeground}" IsHitTestVisible="False" Text="{TemplateBinding chelper:ControlHelper.PlaceholderText}" Visibility="{TemplateBinding chelper:PasswordBoxHelper.PlaceholderTextVisibility}" />
            <ToggleButton x:Name="RevealButton" Grid.Row="1" Grid.Column="1" MinWidth="34" Padding="{DynamicResource HelperButtonThemePadding}" VerticalAlignment="Stretch" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" FontSize="{TemplateBinding FontSize}" IsTabStop="False" Style="{StaticResource RevealButtonStyle}" Visibility="Collapsed" />
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding chelper:ControlHelper.Description}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RevealButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource TextControlHeaderForegroundDisabled}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
              <Setter TargetName="TextBox" Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="TextBox" Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
            </Trigger>
            <DataTrigger Value="True">
              <DataTrigger.Binding>
                <MultiBinding Converter="{StaticResource OrConverter}">
                  <Binding Path="IsSelectionActive" RelativeSource="{RelativeSource Self}" />
                  <Binding ElementName="TextBox" Path="IsSelectionActive" />
                </MultiBinding>
              </DataTrigger.Binding>
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderFocusedBrushElevationColor}" />
              <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter Property="CaretBrush" Value="{DynamicResource TextControlForegroundFocused}" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="chelper:PasswordBoxHelper.PasswordRevealMode" Value="Peek" />
                <Condition SourceName="RevealButton" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ContentHost" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="TextBox" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="chelper:PasswordBoxHelper.PasswordRevealMode" Value="Visible">
              <Setter TargetName="PART_ContentHost" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="TextBox" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultPasswordBoxStyle}" TargetType="PasswordBox" />
  <Style x:Key="DefaultRichTextBoxStyle" TargetType="RichTextBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}" />
    <Setter Property="local:TextContextMenu.UsingTextContextMenu" Value="True" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderBrushElevationColor}" />
    <Setter Property="chelper:RichTextBoxHelper.IsEnabled" Value="True" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RichTextBox">
          <Grid SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Margin="{DynamicResource RichEditBoxTopHeaderMargin}" VerticalAlignment="Top" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="Normal" Foreground="{DynamicResource TextControlHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <local:ElevationBorder x:Name="BorderElement" Grid.Row="1" Grid.RowSpan="1" MinWidth="{DynamicResource TextControlThemeMinWidth}" MinHeight="{DynamicResource TextControlThemeMinHeight}" chelper:ValidationHelper.IsTemplateValidationAdornerSite="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <local:ScrollViewerEx x:Name="PART_ContentHost" Grid.Row="1" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" chelper:TextControlContentHostHelper.ContentPresenterMargin="-5,-1" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsTabStop="False" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Foreground="{DynamicResource TextControlPlaceholderForeground}" IsHitTestVisible="False" Text="{TemplateBinding chelper:ControlHelper.PlaceholderText}" Visibility="Collapsed" />
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Content="{TemplateBinding chelper:ControlHelper.Description}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource TextControlHeaderForegroundDisabled}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsSelectionActive" Value="true">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderFocusedBrushElevationColor}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter TargetName="BorderElement" Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
            </Trigger>
            <Trigger Property="chelper:RichTextBoxHelper.IsEmpty" Value="True">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <Style x:Key="FlowDocument" TargetType="FlowDocument">
        <Setter Property="OverridesDefaultStyle" Value="true" />
      </Style>
      <Style x:Key="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="Hyperlink" />
    </Style.Resources>
  </Style>
  <Style BasedOn="{StaticResource DefaultRichTextBoxStyle}" TargetType="RichTextBox" />
  <Style x:Key="SliderAutoToolTipStyle" BasedOn="{StaticResource DefaultToolTipStyle}" TargetType="ToolTip">
    <Setter Property="chelper:SliderAutoToolTipHelper.IsEnabled" Value="True" />
  </Style>
  <ControlTemplate x:Key="SliderHorizontal" TargetType="Slider">
    <Grid Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Margin="{DynamicResource SliderTopHeaderMargin}" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="{DynamicResource SliderHeaderThemeFontWeight}" Foreground="{DynamicResource SliderHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
      <!--  This border exists only to draw the correct focus rect with rounded corners when element is focused.  -->
      <Border x:Name="FocusBorder" Grid.Row="1" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" CornerRadius="{DynamicResource ControlCornerRadius}" />
      <Grid x:Name="SliderContainer" Grid.Row="1" Background="{DynamicResource SliderContainerBackground}">
        <Grid x:Name="HorizontalTemplate" MinHeight="{DynamicResource SliderHorizontalHeight}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition chelper:RowDefinitionHelper.PixelHeight="{DynamicResource SliderPreContentMargin}" />
            <RowDefinition Height="Auto" />
            <RowDefinition chelper:RowDefinitionHelper.PixelHeight="{DynamicResource SliderPostContentMargin}" />
          </Grid.RowDefinitions>
          <Rectangle x:Name="HorizontalTrackRect" Grid.Row="1" Grid.ColumnSpan="3" Height="{DynamicResource SliderTrackThemeHeight}" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
          <Rectangle x:Name="HorizontalDecreaseRect" Grid.Row="1" Grid.ColumnSpan="3" Width="{Binding ActualWidth, ElementName=HorizontalDecrease}" HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
          <TickBar x:Name="TopTickBar" Grid.ColumnSpan="3" Height="{DynamicResource SliderOutsideTickBarThemeHeight}" Margin="0,0,0,4" VerticalAlignment="Bottom" Fill="{DynamicResource SliderTickBarFill}" Placement="Top" Visibility="Collapsed" />
          <TickBar x:Name="HorizontalInlineTickBar" Grid.Row="1" Grid.ColumnSpan="3" Height="{DynamicResource SliderTrackThemeHeight}" Fill="{DynamicResource SliderInlineTickBarFill}" Visibility="Collapsed" />
          <TickBar x:Name="BottomTickBar" Grid.Row="2" Grid.ColumnSpan="3" Height="{DynamicResource SliderOutsideTickBarThemeHeight}" Margin="0,4,0,0" VerticalAlignment="Top" Fill="{DynamicResource SliderTickBarFill}" Placement="Bottom" Visibility="Collapsed" />
          <Track x:Name="PART_Track" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="3">
            <Track.DecreaseRepeatButton>
              <RepeatButton x:Name="HorizontalDecrease" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
            </Track.DecreaseRepeatButton>
            <Track.IncreaseRepeatButton>
              <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
            </Track.IncreaseRepeatButton>
            <Track.Thumb>
              <Thumb x:Name="HorizontalThumb" Width="{DynamicResource SliderHorizontalThumbWidth}" Height="{DynamicResource SliderHorizontalThumbHeight}" chelper:FocusVisualHelper.FocusVisualMargin="-14,-6,-14,-6" DataContext="{TemplateBinding Value}" Style="{StaticResource SliderThumbStyle}">
                <Thumb.Resources>
                  <Style BasedOn="{StaticResource SliderAutoToolTipStyle}" TargetType="ToolTip" />
                </Thumb.Resources>
              </Thumb>
            </Track.Thumb>
          </Track>
        </Grid>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTickBar" Property="Visibility" Value="Visible" />
        <Setter TargetName="BottomTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="HorizontalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillPointerOver}" />
        <Setter TargetName="HorizontalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundPointerOver}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundPointerOver}" />
        <Setter TargetName="HorizontalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillPointerOver}" />
      </Trigger>
      <Trigger SourceName="HorizontalThumb" Property="IsDragging" Value="True">
        <Setter TargetName="HorizontalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillPressed}" />
        <Setter TargetName="HorizontalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundPressed}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundPressed}" />
        <Setter TargetName="HorizontalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource SliderHeaderForegroundDisabled}" />
        <Setter TargetName="HorizontalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillDisabled}" />
        <Setter TargetName="HorizontalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillDisabled}" />
        <Setter TargetName="HorizontalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundDisabled}" />
        <Setter TargetName="TopTickBar" Property="Fill" Value="{DynamicResource SliderTickBarFillDisabled}" />
        <Setter TargetName="BottomTickBar" Property="Fill" Value="{DynamicResource SliderTickBarFillDisabled}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundDisabled}" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="HorizontalDecreaseRect" Property="HorizontalAlignment" Value="Right" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SliderVertical" TargetType="Slider">
    <Grid Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Margin="{DynamicResource SliderTopHeaderMargin}" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="{DynamicResource SliderHeaderThemeFontWeight}" Foreground="{DynamicResource SliderHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
      <!--  This border exists only to draw the correct focus rect with rounded corners when element is focused.  -->
      <Border x:Name="FocusBorder" Grid.Row="1" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" CornerRadius="{DynamicResource ControlCornerRadius}" />
      <Grid x:Name="SliderContainer" Grid.Row="1" Background="{DynamicResource SliderContainerBackground}">
        <Grid x:Name="VerticalTemplate" MinWidth="{DynamicResource SliderVerticalWidth}">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition chelper:ColumnDefinitionHelper.PixelWidth="{DynamicResource SliderPreContentMargin}" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition chelper:ColumnDefinitionHelper.PixelWidth="{DynamicResource SliderPostContentMargin}" />
          </Grid.ColumnDefinitions>
          <Rectangle x:Name="VerticalTrackRect" Grid.RowSpan="3" Grid.Column="1" Width="{DynamicResource SliderTrackThemeHeight}" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
          <Rectangle x:Name="VerticalDecreaseRect" Grid.RowSpan="3" Grid.Column="1" Height="{Binding ActualHeight, ElementName=VerticalDecrease}" VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}" RadiusX="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                   Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
          <TickBar x:Name="LeftTickBar" Grid.RowSpan="3" Width="{DynamicResource SliderOutsideTickBarThemeHeight}" Margin="0,0,4,0" HorizontalAlignment="Right" Fill="{DynamicResource SliderTickBarFill}" Placement="Left" Visibility="Collapsed" />
          <TickBar x:Name="VerticalInlineTickBar" Grid.RowSpan="3" Grid.Column="1" Width="{DynamicResource SliderTrackThemeHeight}" Fill="{DynamicResource SliderInlineTickBarFill}" Visibility="Collapsed" />
          <TickBar x:Name="RightTickBar" Grid.RowSpan="3" Grid.Column="2" Width="{DynamicResource SliderOutsideTickBarThemeHeight}" Margin="4,0,0,0" HorizontalAlignment="Left" Fill="{DynamicResource SliderTickBarFill}" Placement="Right" Visibility="Collapsed" />
          <Track x:Name="PART_Track" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="3">
            <Track.DecreaseRepeatButton>
              <RepeatButton x:Name="VerticalDecrease" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
            </Track.DecreaseRepeatButton>
            <Track.IncreaseRepeatButton>
              <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
            </Track.IncreaseRepeatButton>
            <Track.Thumb>
              <Thumb x:Name="VerticalThumb" Width="{DynamicResource SliderVerticalThumbWidth}" Height="{DynamicResource SliderVerticalThumbHeight}" chelper:FocusVisualHelper.FocusVisualMargin="-6,-14,-6,-14" DataContext="{TemplateBinding Value}" Style="{StaticResource SliderThumbStyle}">
                <Thumb.Resources>
                  <Style BasedOn="{StaticResource SliderAutoToolTipStyle}" TargetType="ToolTip" />
                </Thumb.Resources>
              </Thumb>
            </Track.Thumb>
          </Track>
        </Grid>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="LeftTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="RightTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="LeftTickBar" Property="Visibility" Value="Visible" />
        <Setter TargetName="RightTickBar" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="VerticalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillPointerOver}" />
        <Setter TargetName="VerticalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundPointerOver}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundPointerOver}" />
        <Setter TargetName="VerticalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillPointerOver}" />
      </Trigger>
      <Trigger SourceName="VerticalThumb" Property="IsDragging" Value="True">
        <Setter TargetName="VerticalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillPressed}" />
        <Setter TargetName="VerticalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundPressed}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundPressed}" />
        <Setter TargetName="VerticalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillPressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource SliderHeaderForegroundDisabled}" />
        <Setter TargetName="VerticalDecreaseRect" Property="Fill" Value="{DynamicResource SliderTrackValueFillDisabled}" />
        <Setter TargetName="VerticalTrackRect" Property="Fill" Value="{DynamicResource SliderTrackFillDisabled}" />
        <Setter TargetName="VerticalThumb" Property="Background" Value="{DynamicResource SliderThumbBackgroundDisabled}" />
        <Setter TargetName="LeftTickBar" Property="Fill" Value="{DynamicResource SliderTickBarFillDisabled}" />
        <Setter TargetName="RightTickBar" Property="Fill" Value="{DynamicResource SliderTickBarFillDisabled}" />
        <Setter TargetName="SliderContainer" Property="Background" Value="{DynamicResource SliderContainerBackgroundDisabled}" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="VerticalDecreaseRect" Property="VerticalAlignment" Value="Top" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultSliderStyle" TargetType="Slider">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="AutoToolTipPlacement" Value="TopLeft" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Background" Value="{DynamicResource SliderTrackFill}" />
    <Setter Property="BorderThickness" Value="{DynamicResource SliderBorderThemeThickness}" />
    <Setter Property="Foreground" Value="{DynamicResource SliderTrackValueFill}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <!--<Setter Property="ManipulationMode" Value="None" />-->
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="chelper:FocusVisualHelper.FocusVisualMargin" Value="-7,0,-7,0" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource SliderTrackCornerRadius}" />
    <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource SliderVertical}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultSliderStyle}" TargetType="Slider" />
  <Style x:Key="DefaultTextBoxStyle" TargetType="TextBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="MinHeight" Value="{DynamicResource TextControlThemeMinHeight}" />
    <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
    <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}" />
    <Setter Property="local:TextContextMenu.UsingTextContextMenu" Value="True" />
    <Setter Property="chelper:TextBoxHelper.IsEnabled" Value="True" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderBrushElevationColor}" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource IsApplicationFocusVisualKindReveal}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <ControlTemplate.Resources>
            <Style x:Key="DeleteButtonStyle" TargetType="Button">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonLayoutGrid" Margin="{DynamicResource TextBoxInnerButtonMargin}" Background="{DynamicResource TextControlButtonBackground}" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                      <TextBlock x:Name="GlyphElement" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="{DynamicResource TextBoxIconFontSize}" FontStyle="Normal" Foreground="{DynamicResource TextControlButtonForeground}" Text="" />
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CommonStates">
                          <VisualState x:Name="Normal" />
                          <VisualState x:Name="MouseOver">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonForegroundPointerOver}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Pressed">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextControlButtonForegroundPressed}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Disabled">
                            <Storyboard>
                              <DoubleAnimation Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                            </Storyboard>
                          </VisualState>
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Grid SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="{DynamicResource TextBoxTopHeaderMargin}" VerticalAlignment="Top" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="Normal" Foreground="{DynamicResource TextControlHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <local:ElevationBorder x:Name="BorderElement" Grid.Row="1" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="2" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" chelper:ValidationHelper.IsTemplateValidationAdornerSite="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <local:ScrollViewerEx x:Name="PART_ContentHost" Grid.Row="1" Grid.Column="0" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Foreground="{TemplateBinding Foreground}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsTabStop="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding chelper:ControlHelper.PlaceholderForeground}" IsHitTestVisible="False" Text="{TemplateBinding chelper:ControlHelper.PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" />
            <Button x:Name="DeleteButton" Grid.Row="1" Grid.Column="1" Width="30" Padding="{DynamicResource HelperButtonThemePadding}" VerticalAlignment="Stretch" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" chelper:TextBoxHelper.IsDeleteButton="True" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" FontSize="{TemplateBinding FontSize}" IsTabStop="False" Style="{StaticResource DeleteButtonStyle}" Visibility="Collapsed" />
            <local:ContentPresenterEx x:Name="DescriptionPresenter" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding chelper:ControlHelper.Description}" Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeleteButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="chelper:ControlHelper.PlaceholderForeground" Value="{x:Null}">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForeground}" />
            </Trigger>
            <Trigger Property="chelper:TextBoxHelper.HasText" Value="True">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource TextControlHeaderForegroundDisabled}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsSelectionActive" Value="true">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderFocusedBrushElevationColor}" />
              <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocused" Value="True" />
                <Condition Property="chelper:TextBoxHelper.HasText" Value="True" />
                <Condition Property="IsReadOnly" Value="False" />
                <Condition Property="AcceptsReturn" Value="False" />
                <Condition Property="TextWrapping" Value="NoWrap" />
              </MultiTrigger.Conditions>
              <Setter Property="chelper:TextBoxHelper.IsDeleteButtonVisible" Value="True" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox" />
  <Style x:Key="DataGridTextBoxStyle" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox">
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Padding" Value="11,0,6,0" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="0" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DataGridTextControlValidationErrorTemplate}" />
  </Style>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="{x:Type TextBox}" />
  <Style x:Key="AutoSuggestBoxTextBoxStyle" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource TextControlThemeMinHeight}" />
    <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
    <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderBrushElevationColor}" />
    <Setter Property="local:TextContextMenu.UsingTextContextMenu" Value="True" />
    <Setter Property="chelper:TextBoxHelper.IsEnabled" Value="True" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <ControlTemplate.Resources>
            <converters:CornerRadiusFilterConverter x:Key="RightCornerRadiusFilterConverter" Filter="Right" />
            <Style TargetType="ContentControl">
              <Setter Property="HorizontalContentAlignment" Value="Left" />
              <Setter Property="VerticalContentAlignment" Value="Top" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="ContentControl">
                    <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="DeleteButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="Button">
                    <ControlTemplate.Resources>
                      <StreamGeometry x:Key="Cancel">M 10.888672 10 L 17.626953 16.748047 L 16.748047 17.626953 L 10 10.888672 L 3.251953 17.626953 L 2.373047 16.748047 L 9.111328 10 L 2.373047 3.251953 L 3.251953 2.373047 L 10 9.111328 L 16.748047 2.373047 L 17.626953 3.251953 Z</StreamGeometry>
                    </ControlTemplate.Resources>
                    <Border x:Name="ButtonLayoutGrid" Background="{DynamicResource TextControlButtonBackground}" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                      <local:FontIconFallback x:Name="GlyphElement" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource Cancel}" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontStyle="Normal" Foreground="{DynamicResource TextControlButtonForeground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsMouseOver" Value="true">
                        <Setter TargetName="ButtonLayoutGrid" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                        <Setter TargetName="ButtonLayoutGrid" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                        <Setter TargetName="GlyphElement" Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPointerOver}" />
                      </Trigger>
                      <Trigger Property="IsPressed" Value="true">
                        <Setter TargetName="ButtonLayoutGrid" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                        <Setter TargetName="ButtonLayoutGrid" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                        <Setter TargetName="GlyphElement" Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPressed}" />
                      </Trigger>
                      <Trigger Property="IsEnabled" Value="false">
                        <Setter TargetName="ButtonLayoutGrid" Property="Opacity" Value="0" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="QueryButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" Padding="{TemplateBinding Padding}" Background="{DynamicResource TextControlButtonBackground}" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}">
                      <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextElement.FontSize="{DynamicResource AutoSuggestBoxIconFontSize}" />
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextControlButtonForegroundPointerOver}" />
                      </Trigger>
                      <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                        <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextControlButtonForegroundPressed}" />
                      </Trigger>
                      <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Opacity" Value="0" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <local:ElevationBorder x:Name="BorderElement" Grid.Row="1" Grid.RowSpan="1" Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Grid.ColumnSpan="3" Margin="{DynamicResource AutoSuggestBoxTopHeaderMargin}" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FontWeight="Normal" Foreground="{DynamicResource TextControlHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <local:ScrollViewerEx x:Name="PART_ContentHost" Grid.Row="1" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
            <ContentControl x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Grid.ColumnSpan="3" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding chelper:ControlHelper.PlaceholderText}" Focusable="False" Foreground="{DynamicResource TextControlPlaceholderForeground}" IsHitTestVisible="False" />
            <Button x:Name="DeleteButton" Grid.Row="1" Grid.Column="1" MinWidth="34" VerticalAlignment="Stretch" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                                  Converter={StaticResource RightCornerRadiusFilterConverter}}" chelper:TextBoxHelper.IsDeleteButton="True" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" FontSize="{TemplateBinding FontSize}" Style="{StaticResource DeleteButtonStyle}" Visibility="Collapsed" />
            <Button x:Name="QueryButton" Grid.Row="1" Grid.Column="2" Width="{TemplateBinding Height}" MinWidth="34" VerticalAlignment="Stretch" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius,                                                                                  Converter={StaticResource RightCornerRadiusFilterConverter}}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" FontSize="{TemplateBinding FontSize}" Style="{StaticResource QueryButtonStyle}" />
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Grid.ColumnSpan="3" Content="{TemplateBinding chelper:ControlHelper.Description}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeleteButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource TextControlHeaderForegroundDisabled}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </Trigger>
            <!--  PointerOver  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
            </Trigger>
            <!--  Focused  -->
            <Trigger Property="IsSelectionActive" Value="True">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
              <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderFocusedBrushElevationColor}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter TargetName="BorderElement" Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter TargetName="QueryButton" Property="Foreground" Value="{DynamicResource TextControlButtonForeground}" />
            </Trigger>
            <Trigger Property="chelper:TextBoxHelper.HasText" Value="True">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
          <Condition Property="chelper:TextBoxHelper.HasText" Value="True" />
          <Condition Property="IsReadOnly" Value="False" />
          <Condition Property="AcceptsReturn" Value="False" />
          <Condition Property="TextWrapping" Value="NoWrap" />
        </MultiTrigger.Conditions>
        <Setter Property="chelper:TextBoxHelper.IsDeleteButtonVisible" Value="True" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ComboBoxTextBoxStyle" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid SnapsToDevicePixels="True">
            <local:ElevationBorder x:Name="BorderElement" chelper:FocusVisualHelper.IsTemplateFocusTarget="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <local:ScrollViewerEx x:Name="PART_ContentHost" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsTabStop="False" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
            <TextBlock x:Name="PlaceholderTextContentPresenter" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Foreground="{DynamicResource TextControlPlaceholderForeground}" IsHitTestVisible="False" Text="{TemplateBinding chelper:ControlHelper.PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelectionActive" Value="False">
              <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource ControlFillColorTransparentBrush}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource ControlFillColorTransparentBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelectionActive" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
              <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelectionActive" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
              <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
            </MultiTrigger>
            <Trigger Property="IsSelectionActive" Value="True">
              <Setter TargetName="BorderElement" Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
              <Setter TargetName="BorderElement" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
              <Setter TargetName="BorderElement" Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource TextControlElevationBorderFocusedBrushElevationColor}" />
              <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter Property="CaretBrush" Value="{DynamicResource TextControlForegroundFocused}" />
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="PlaceholderTextContentPresenter" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultComboBoxStyle" TargetType="ComboBox">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="{DynamicResource ComboBoxPadding}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="Foreground" Value="{DynamicResource ComboBoxForeground}" />
    <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ComboBoxBorderThemeThickness}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
    <Setter Property="chelper:ComboBoxHelper.TextBoxStyle" Value="{StaticResource ComboBoxTextBoxStyle}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="local:ElevationBorder.ElevationColor" Value="{DynamicResource ControlElevationBorderBrushElevationColor}" />
    <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="chelper:ControlHelper.PlaceholderForeground" Value="{DynamicResource ComboBoxPlaceHolderForeground}" />
    <Setter Property="chelper:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource IsApplicationFocusVisualKindReveal}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="chelper:ComboBoxHelper.KeepInteriorCornersSquare" Value="True" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid x:Name="LayoutRoot" SnapsToDevicePixels="True">
            <Grid.Resources>
              <Storyboard x:Key="OverlayOpeningAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Shdw" Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0" />
                  <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlNormalAnimationDuration}" Value="1.0" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <Storyboard x:Key="OverlayClosingAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Shdw" Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1.0" />
                  <SplineDoubleKeyFrame KeySpline="{DynamicResource ControlFastOutSlowInKeySpline}" KeyTime="{DynamicResource ControlFastAnimationDuration}" Value="0.0" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="38" />
            </Grid.ColumnDefinitions>
            <local:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="{DynamicResource ComboBoxTopHeaderMargin}" VerticalAlignment="Top" Content="{TemplateBinding chelper:ControlHelper.Header}" ContentTemplate="{TemplateBinding chelper:ControlHelper.HeaderTemplate}" FlowDirection="{TemplateBinding FlowDirection}" FontWeight="{DynamicResource ComboBoxHeaderThemeFontWeight}" Foreground="{DynamicResource ComboBoxHeaderForeground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding chelper:ControlHelper.HeaderVisibility}" />
            <Border x:Name="HighlightBackground" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="-4" Background="{DynamicResource ComboBoxBackgroundFocused}" BorderBrush="{DynamicResource ComboBoxBackgroundBorderBrushFocused}" BorderThickness="{DynamicResource ComboBoxBackgroundBorderThicknessFocused}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Opacity="0" />
            <local:ElevationBorder x:Name="Background" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" MinWidth="{DynamicResource ComboBoxThemeMinWidth}" chelper:ValidationHelper.IsTemplateValidationAdornerSite="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" />
            <Rectangle x:Name="Pill" Grid.Row="1" Grid.Column="0" Margin="1,0,0,0" Opacity="0" Style="{StaticResource ComboBoxItemPill}">
              <Rectangle.RenderTransform>
                <TranslateTransform x:Name="PillTransform" Y="1" />
              </Rectangle.RenderTransform>
            </Rectangle>
            <local:ContentPresenterEx x:Name="ContentPresenter" Grid.Row="1" Grid.Column="0" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <TextBlock x:Name="PlaceholderTextBlock" Grid.Row="1" Grid.Column="0" Margin="{TemplateBinding Padding}" Padding="0,0,38,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding chelper:ControlHelper.PlaceholderForeground}" IsHitTestVisible="False" Text="{TemplateBinding chelper:ControlHelper.PlaceholderText}" Visibility="Collapsed" />
            <ToggleButton x:Name="ToggleButton" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" Background="Transparent" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
            <TextBox x:Name="PART_EditableTextBox" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,0,0,0" Padding="{DynamicResource ComboBoxEditableTextPadding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" chelper:ControlHelper.CornerRadius="{TemplateBinding chelper:ControlHelper.CornerRadius}" chelper:ControlHelper.PlaceholderForeground="{TemplateBinding chelper:ControlHelper.PlaceholderForeground}" chelper:ControlHelper.PlaceholderText="{TemplateBinding chelper:ControlHelper.PlaceholderText}" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" BorderBrush="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{TemplateBinding chelper:ComboBoxHelper.TextBoxStyle}" Visibility="Collapsed" />
            <ToggleButton x:Name="DropDownOverlay" Grid.Row="1" Grid.Column="1" Width="30" Margin="4,4,4,4" HorizontalAlignment="Right" chelper:ControlHelper.CornerRadius="{DynamicResource ComboBoxDropDownButtonBackgroundCornerRadius}" Background="Transparent" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" Visibility="Collapsed" />
            <local:FontIcon x:Name="DropDownGlyph" Grid.Row="1" Grid.Column="1" Width="12" Height="12" MinHeight="{DynamicResource ComboBoxMinHeight}" Margin="0,0,14,0" HorizontalAlignment="Right" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ComboBoxDropDownGlyphForeground}" Glyph="" IsHitTestVisible="False" />
            <local:ContentPresenterEx x:Name="DescriptionPresenter" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding chelper:ControlHelper.Description}" Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{TemplateBinding chelper:ControlHelper.DescriptionVisibility}" />
            <Popup x:Name="PART_Popup" AllowsTransparency="True" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PlacementTarget="{Binding ElementName=Background}" PopupAnimation="None">
              <Popup.PlacementRectangle>
                <MultiBinding>
                  <MultiBinding.Converter>
                    <converters:PlacementRectangleConverter Margin="0,1,0,1" />
                  </MultiBinding.Converter>
                  <Binding ElementName="Background" Path="ActualWidth" />
                  <Binding ElementName="Background" Path="ActualHeight" />
                </MultiBinding>
              </Popup.PlacementRectangle>
              <primitives:ThemeShadowChrome x:Name="Shdw" MinWidth="{Binding ActualWidth, ElementName=LayoutRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}" chelper:OpeningAnimationHelper.Storyboard="{StaticResource OverlayOpeningAnimation}" CornerRadius="{Binding ElementName=PopupBorder, Path=CornerRadius}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
                <Border x:Name="PopupBorder" Margin="0,-0.5,0,-1" HorizontalAlignment="Stretch" Background="{DynamicResource ComboBoxDropDownBackground}" BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}" BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
                  <Border Padding="{DynamicResource ComboBoxDropdownBorderPadding}" CornerRadius="{Binding ElementName=PopupBorder, Path=CornerRadius}">
                    <local:ScrollViewerEx x:Name="ScrollViewer" Foreground="{DynamicResource ComboBoxDropDownForeground}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" RewriteWheelChange="True" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                      <ItemsPresenter Margin="{DynamicResource ComboBoxDropdownContentMargin}" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </local:ScrollViewerEx>
                  </Border>
                </Border>
              </primitives:ThemeShadowChrome>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <!--  PointerOver  -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ComboBoxBackgroundPointerOver}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrushPointerOver}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundPointerOver}" />
              <Setter TargetName="PlaceholderTextBlock" Property="Foreground" Value="{DynamicResource ComboBoxPlaceHolderForegroundPointerOver}" />
            </Trigger>
            <!--  Pressed  -->
            <Trigger SourceName="ToggleButton" Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ComboBoxBackgroundPressed}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrushPressed}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundPressed}" />
              <Setter TargetName="PlaceholderTextBlock" Property="Foreground" Value="{DynamicResource ComboBoxPlaceHolderForegroundPressed}" />
            </Trigger>
            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ComboBoxBackgroundDisabled}" />
              <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrushDisabled}" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter TargetName="HeaderContentPresenter" Property="Foreground" Value="{DynamicResource ComboBoxHeaderForegroundDisabled}" />
              <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundDisabled}" />
              <Setter TargetName="PlaceholderTextBlock" Property="Foreground" Value="{DynamicResource ComboBoxPlaceHolderForegroundDisabled}" />
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundDisabled}" />
            </Trigger>
            <!--  Focused  -->
            <Trigger Property="chelper:FocusVisualHelper.ShowFocusVisual" Value="True">
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="1" />
              <Setter TargetName="Pill" Property="Opacity" Value="1" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ComboBoxForegroundFocused}" />
              <Setter TargetName="PlaceholderTextBlock" Property="Foreground" Value="{DynamicResource ComboBoxPlaceHolderForegroundFocused}" />
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocused}" />
            </Trigger>
            <!--  FocusedPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="chelper:FocusVisualHelper.ShowFocusVisual" Value="True" />
                <Condition SourceName="ToggleButton" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="1" />
              <Setter TargetName="Pill" Property="Opacity" Value="1" />
              <Setter Property="local:ElevationBorder.ElevationColor" Value="Transparent" />
              <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ComboBoxForegroundFocusedPressed}" />
              <Setter TargetName="PlaceholderTextBlock" Property="Foreground" Value="{DynamicResource ComboBoxPlaceHolderForegroundFocusedPressed}" />
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocusedPressed}" />
            </MultiTrigger>
            <!--  FocusedDropDown  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="chelper:FocusVisualHelper.ShowFocusVisual" Value="True" />
                <Condition Property="IsDropDownOpen" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PopupBorder" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ToggleButton" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="DropDownOverlay" Property="Visibility" Value="Visible" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEditable" Value="False" />
                <Condition Property="SelectedIndex" Value="-1" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <!--  TextBoxFocused  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_EditableTextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="DropDownOverlay" Property="IsMouseOver" Value="False" />
                <Condition SourceName="DropDownOverlay" Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
            </MultiTrigger>
            <!--  TextBoxFocusedOverlayPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_EditableTextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="DropDownOverlay" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
              <Setter TargetName="DropDownOverlay" Property="Background" Value="{DynamicResource ComboBoxDropDownBackgroundPointerOver}" />
            </MultiTrigger>
            <!--  TextBoxFocusedOverlayPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_EditableTextBox" Property="IsSelectionActive" Value="True" />
                <Condition SourceName="DropDownOverlay" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="DropDownGlyph" Property="Foreground" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}" />
              <Setter TargetName="DropDownOverlay" Property="Background" Value="{DynamicResource ComboBoxFocusedDropDownBackgroundPointerPressed}" />
            </MultiTrigger>
            <!--  TextBoxOverlayPointerOver  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_EditableTextBox" Property="IsSelectionActive" Value="False" />
                <Condition SourceName="DropDownOverlay" Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="DropDownOverlay" Property="Background" Value="{DynamicResource ComboBoxDropDownBackgroundPointerOver}" />
            </MultiTrigger>
            <!--  TextBoxOverlayPressed  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="PART_EditableTextBox" Property="IsSelectionActive" Value="False" />
                <Condition SourceName="DropDownOverlay" Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="DropDownOverlay" Property="Background" Value="{DynamicResource ComboBoxDropDownBackgroundPointerPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultComboBoxStyle}" TargetType="ComboBox" />
  <Style x:Key="DataGridComboBoxStyle" BasedOn="{StaticResource DefaultComboBoxStyle}" TargetType="ComboBox">
    <Setter Property="Padding" Value="12,0,0,0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="chelper:ControlHelper.CornerRadius" Value="0" />
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DataGridTextControlValidationErrorTemplate}" />
  </Style>
  <Style x:Key="DataGridTextBlockComboBoxStyle" BasedOn="{StaticResource DefaultComboBoxStyle}" TargetType="ComboBox">
    <Setter Property="Padding" Value="12,0,0,0" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultDataGridStyle" TargetType="DataGrid">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ColumnHeaderStyle" Value="{StaticResource DefaultDataGridColumnHeaderStyle}" />
    <Setter Property="RowHeaderStyle" Value="{StaticResource DefaultDataGridRowHeaderStyle}" />
    <Setter Property="RowStyle" Value="{StaticResource DefaultDataGridRowStyle}" />
    <Setter Property="CellStyle" Value="{StaticResource DefaultDataGridCellStyle}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource GridLinesBrush}" />
    <Setter Property="GridLinesVisibility" Value="Horizontal" />
    <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
    <Setter Property="MinRowHeight" Value="{DynamicResource DataGridRowMinHeight}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="chelper:DataGridHelper.TextColumnElementStyle" Value="{StaticResource DataGridTextBlockStyle}" />
    <Setter Property="chelper:DataGridHelper.TextColumnEditingElementStyle" Value="{DynamicResource DataGridTextBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.TextColumnFontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    <Setter Property="chelper:DataGridHelper.CheckBoxColumnElementStyle" Value="{DynamicResource DataGridReadOnlyCheckBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.CheckBoxColumnEditingElementStyle" Value="{DynamicResource DataGridCheckBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.ComboBoxColumnElementStyle" Value="{DynamicResource DataGridTextBlockComboBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.ComboBoxColumnEditingElementStyle" Value="{DynamicResource DataGridComboBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.HyperlinkColumnElementStyle" Value="{DynamicResource DataGridTextBlockStyle}" />
    <Setter Property="chelper:DataGridHelper.HyperlinkColumnEditingElementStyle" Value="{DynamicResource DataGridTextBoxStyle}" />
    <Setter Property="chelper:DataGridHelper.UseModernColumnStyles" Value="True" />
    <Setter Property="chelper:DataGridHelper.IsEnabled" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGrid">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <local:ScrollViewerEx x:Name="DG_ScrollViewer" chelper:ScrollViewerHelper.AutoHideScrollBars="False" Focusable="false" RewriteWheelChange="True">
              <local:ScrollViewerEx.Template>
                <ControlTemplate TargetType="ScrollViewer">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!--  Left Column Header Corner  -->
                    <Button Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,                                                                                           TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                    <!--  Column Headers  -->
                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Grid.ColumnSpan="2" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                    <Rectangle x:Name="ColumnHeadersAndRowsSeparator" Grid.ColumnSpan="3" Width="Auto" Height="1" VerticalAlignment="Bottom" Fill="{DynamicResource GridLinesBrush}" StrokeThickness="1" />
                    <!--  DataGrid content  -->
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />
                    <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{TemplateBinding VerticalOffset}" />
                    <Grid Grid.Row="2" Grid.Column="1">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{TemplateBinding HorizontalOffset}" />
                    </Grid>
                  </Grid>
                </ControlTemplate>
              </local:ScrollViewerEx.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </local:ScrollViewerEx>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="true" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DefaultDataGridStyle}" TargetType="DataGrid" />
</ResourceDictionary>